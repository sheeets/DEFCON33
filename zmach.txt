Resident data ends at 37b4, program starts at 37b4, file ends at 1630c

Starting analysis pass at address 36d0

End of analysis pass, low address = 37b4, high address = 8e13

228 bytes of data before code from 36d0 to 37b4

[Start of code]

Main routine R0001, 0 locals

       CALL_VS         R0226 -> Gef
       QUIT            

Routine R0002, 0 locals

       LOADW           #373d,G25 -> -(SP)
       PRINT_PADDR     (SP)+
       RTRUE           

Routine R0003, 4 locals

       LOG_SHIFT       G0f,#02 -> L00
       ADD             #197f,L00 -> -(SP)
       SUB             (SP)+,#02 -> L00
       LOADW           L00,#00 -> L02
       STORE           L03,"fd4cge   hkefdrfjxggngw   ehdtx      fgcgrme  
hmmfgufh   sGshhggdzcethfohebqcvuge   oz            hehdtx      ehwcwygu   wm  
         hggdzcethfoh  kCmSo0q'sacuat   t"
       JZ              G55 [TRUE] L0001
       SCAN_TABLE      L02,L03,#18 -> L01 [TRUE] L0005
L0001: STORE           L03,#3700
       JZ              G56 [TRUE] L0002
       SCAN_TABLE      L02,L03,#18 -> L01 [TRUE] L0005
L0002: JZ              G55 [FALSE] L0003
       JZ              G56 [TRUE] L0004
L0003: JE              L02,"floor","ground" [FALSE] L0004
       STORE           G25,#0a
       JUMP            L0006
L0004: RFALSE          
L0005: SUB             L01,L03 -> L01
       LOG_SHIFT       L01,#ffff -> L01
       MOD             L01,#0c -> -(SP)
       ADD             (SP)+,#01 -> G25
L0006: LOADB           #3730,G25 -> G24
       RTRUE           

Routine R0004, 3 locals

       CALL_VS         R0220 (L00,#04) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       PRINT_PADDR     L00
       NEW_LINE        
       RTRUE           
L0001: STORE           Gef,L00
       JE              Gef,#89 [FALSE] L0002
       CALL_2N         R0009 (G22)
       PRINT_RET       " hardly portable."
L0002: JE              Gef,#3d,#3e,#3c [FALSE] L0003
       PRINT_RET       "Nothing obvious happens."
L0003: JE              Gef,#33,#34,#35 [TRUE] L0004
       JE              Gef,#8a [FALSE] L0005
L0004: CALL_2N         R0009 (G22)
       PRINT_RET       " fixed in place."
L0005: JE              Gef,#36,#37,#38 [FALSE] L0006
       PRINT_RET       "What a concept!"
L0006: JE              Gef,#5e [FALSE] L0007
       PRINT           "> "
       RTRUE           
L0007: JE              Gef,#17 [FALSE] L0011
       STORE           L01,S092
       JZ              G42 [FALSE] L0008
       STORE           L01,S093
       STORE           L02,#04
L0008: CALL_VS         R0141 (L01,G0d,L02) -> -(SP)
       JZ              (SP)+ [TRUE] L0010
       JZ              G42 [TRUE] L0009
       PRINT           ".
"
L0009: RTRUE           
L0010: RFALSE          
L0011: JE              Gef,#04 [FALSE] L0012
       PRINT           "There is nothing special about "
       CALL_2N         R0208 (G22)
       PRINT_RET       "."
L0012: JE              Gef,#39,#3a,#3b [TRUE] L0013
       JE              Gef,#7b [FALSE] L0014
L0013: PRINT_PADDR     S094
       NEW_LINE        
       RTRUE           
L0014: JE              Gef,#08,#0c,#0e [TRUE] L0015
       JE              Gef,#25 [FALSE] L0016
L0015: PRINT           "You aren't holding "
       CALL_2N         R0006 (G22)
       PRINT_RET       "."
L0016: JE              Gef,#41,#02,#03 [TRUE] L0017
       JE              Gef,#47,#59,#24 [FALSE] L0018
L0017: PRINT           "You can't "
       CALL_2N         R0126 (L01)
       PRINT           " "
       CALL_2N         R0005 (G22)
       PRINT_RET       "."
L0018: JE              Gef,#8b [FALSE] L0019
       CALL_2N         R0009 (G22)
       PRINT_RET       " plainly inedible."
L0019: JE              Gef,#8c [FALSE] L0020
       CALL_2N         R0010 (G22)
       PRINT_RET       " already open."
L0020: JE              Gef,#8d [FALSE] L0021
       CALL_2N         R0010 (G22)
       PRINT_RET       " locked."
L0021: JE              Gef,#8e [FALSE] L0022
       PRINT           "You can't put things on top of "
       CALL_2N         R0005 (G23)
       PRINT_RET       "."
L0022: JE              Gef,#05,#07 [FALSE] L0023
       PRINT           "I don't suppose "
       CALL_2N         R0208 (G22)
       PRINT_RET       " would care for that."
L0023: JE              Gef,#06,#18,#13 [FALSE] L0024
       PRINT           "First, you'd have to leave "
       CALL_2N         R0208 (L01)
       PRINT_RET       "."
L0024: JE              Gef,#09 [FALSE] L0026
       PRINT           "You open "
       CALL_2N         R0208 (G22)
       TEST_ATTR       G22,#04 [FALSE] L0025
       TEST_ATTR       G22,#06 [TRUE] L0025
       CALL_VS         R0128 (G22,G0d) -> -(SP)
       JZ              (SP)+ [FALSE] L0025
       PRINT           ", revealing "
       CALL_VS         R0141 (#00,G22) -> -(SP)
       JZ              (SP)+ [FALSE] L0025
       PRINT           "nothing"
L0025: PRINT_RET       "."
L0026: JE              Gef,#0b [FALSE] L0027
       JUMP            L0126
L0027: JE              Gef,#0a,#12,#4b [TRUE] L0028
       JE              Gef,#5c,#16 [FALSE] L0029
L0028: PRINT           "You "
       CALL_2N         R0126 (L01)
       PRINT           " "
       CALL_2N         R0208 (G22)
       PRINT_RET       "."
L0029: JE              Gef,#0f,#0d [FALSE] L0030
       CALL_2N         R0207 (G23)
       PRINT_RET       " doesn't seem interested."
L0030: JE              Gef,#10,#11,#62 [FALSE] L0031
       CALL_2N         R0207 (L01)
       PRINT_RET       " has better things to do."
L0031: JE              Gef,#14,#15,#1e [TRUE] L0032
       JE              Gef,#2c,#73,#4e [FALSE] L0033
L0032: PRINT           "You can't, since "
       CALL_2N         R0208 (L01)
       PRINT           " "
       CALL_2N         R0008 (L01)
       PRINT_RET       " closed."
L0033: JE              Gef,#19,#7f [FALSE] L0034
       PRINT           "You already have "
       CALL_2N         R0006 (G22)
       PRINT_RET       "."
L0034: JE              Gef,#1a,#1b,#1c [FALSE] L0035
       PRINT           "Failed "
       CALL_2N         R0126 (G18)
       PRINT_RET       "."
L0035: JE              Gef,#27,#29,#77 [FALSE] L0036
       PRINT_RET       "Already there."
L0036: JE              Gef,#82,#83 [FALSE] L0037
       PRINT           "Try giving "
       CALL_2N         R0006 (G22)
       PRINT_RET       " instead."
L0037: JE              Gef,#28,#2a [FALSE] L0038
       PRINT_RET       "There is no more room."
L0038: JE              Gef,#1d [FALSE] L0039
       PRINT           "You put "
       CALL_2N         R0208 (G22)
       PRINT           " into "
       CALL_2N         R0208 (G23)
       PRINT_RET       "."
L0039: JE              Gef,#2b [FALSE] L0040
       PRINT           "You put "
       CALL_2N         R0208 (G22)
       PRINT           " on "
       CALL_2N         R0208 (G23)
       PRINT_RET       "."
L0040: JE              Gef,#1f,#20,#80 [TRUE] L0041
       JE              Gef,#81 [FALSE] L0042
L0041: PRINT_RET       "There is no reply."
L0042: JE              Gef,#23 [FALSE] L0043
       PRINT           "You are already wearing "
       CALL_2N         R0006 (G22)
       PRINT_RET       "."
L0043: JE              Gef,#26 [FALSE] L0044
       PRINT           "You are now wearing "
       CALL_2N         R0208 (G22)
       PRINT_RET       "."
L0044: JE              Gef,#4c [FALSE] L0045
       PRINT           "You're not wearing "
       CALL_2N         R0208 (G22)
       PRINT_RET       "."
L0045: JE              Gef,#4d [FALSE] L0046
       PRINT           "You take off "
       CALL_2N         R0208 (G22)
       PRINT_RET       "."
L0046: JE              Gef,#2d,#2e [FALSE] L0047
       CALL_2N         R0009 (G22)
       PRINT_RET       " not something you can switch."
L0047: JE              Gef,#2f,#30 [FALSE] L0048
       CALL_2N         R0009 (G22)
       PRINT           " already "
       CALL_2N         R0011 (G22)
       PRINT_RET       "."
L0048: JE              Gef,#31,#32 [FALSE] L0049
       PRINT           "You switch "
       CALL_2N         R0208 (G22)
       PRINT           " "
       CALL_2N         R0011 (G22)
       PRINT_RET       "."
L0049: JE              Gef,#63 [FALSE] L0050
       PRINT           "(first taking "
       CALL_2N         R0208 (L01)
       PRINT           ")
"
       JUMP            L0126
L0050: JE              Gef,#64 [FALSE] L0051
       PRINT           "(first taking off "
       CALL_2N         R0208 (L01)
       PRINT           ")
"
       JUMP            L0126
L0051: JE              Gef,#88 [FALSE] L0052
       PRINT           "But you would need to take off "
       CALL_2N         R0208 (L01)
       PRINT           " first.
"
       JUMP            L0126
L0052: JE              Gef,#42 [FALSE] L0055
       JE              G12,#00,#01 [FALSE] L0054
       SUB             L01,#02 -> -(SP)
       MUL             (SP)+,#04 -> -(SP)
       ADD             #197f,#02 -> -(SP)
       ADD             (SP)+,(SP)+ -> -(SP)
       LOADW           (SP)+,#00 -> -(SP)
       JE              (SP)+,"all" [FALSE] L0053
       PRINT_RET       "You are not carrying anything."
L0053: ADD             G19,#01 -> -(SP)
       CALL_2S         R0172 ((SP)+) -> -(SP)
       JG              (SP)+,#00 [FALSE] L0054
       PRINT_RET       "You're not holding any."
L0054: PRINT_PADDR     S095
       SUB             L01,#01 -> -(SP)
       CALL_VN         R0189 (G19,(SP)+)
       PRINT_RET       ""."
L0055: JE              Gef,#6a,#87,#6c [FALSE] L0056
       PRINT           "But you are not holding "
       CALL_2N         R0208 (L01)
       PRINT_RET       "."
L0056: JE              Gef,#65 [FALSE] L0057
       PRINT_PADDR     S096
       CALL_VN         R0189 (G19,L01)
       PRINT_RET       "" but then you lost me."
L0057: JE              Gef,#6b [FALSE] L0058
       PRINT           "You can't talk to "
       CALL_2N         R0208 (L01)
       PRINT_RET       "."
L0058: JE              Gef,#74 [FALSE] L0059
       PRINT           "You don't need to refer to ""
       CALL_1N         R0190
       PRINT_RET       "" in this game."
L0059: JE              Gef,#75 [FALSE] L0060
       PRINT           "Sorry, I don't understand what ""
       CALL_1N         R0190
       PRINT_RET       "" means."
L0060: JE              Gef,#7d [FALSE] L0061
       PRINT           "I think you wanted to say ""
       RTRUE           
L0061: JE              Gef,#7e [FALSE] L0062
       PRINT_RET       "". Please try again."
L0062: JE              Gef,#8f [FALSE] L0063
       PRINT           "I don't know what ""
       PRINT_ADDR      L01
       PRINT_RET       "" refers to."
L0063: JE              Gef,#90 [FALSE] L0064
       PRINT           "You can't see ""
       PRINT_ADDR      L01
       PRINT           "" ("
       CALL_2N         R0137 (L02)
       PRINT_RET       ") at the moment."
L0064: JE              Gef,#6f,#43,#69 [FALSE] L0065
       CALL_2N         R0007 (L01)
       PRINT_RET       "n't open."
L0065: JE              Gef,#44 [FALSE] L0066
       PRINT_PADDR     S097
       CALL_2N         R0208 (G22)
       PRINT_RET       "."
L0066: JE              Gef,#45,#6d,#6e [TRUE] L0067
       JE              Gef,#7c [FALSE] L0068
L0067: PRINT_PADDR     S098
       NEW_LINE        
       RTRUE           
L0068: JE              Gef,#48,#5a [FALSE] L0069
       CALL_2N         R0007 (G22)
       PRINT           " already "
       CALL_2N         R0126 (L01)
       PRINT_RET       "ed."
L0069: JE              Gef,#49 [FALSE] L0070
       PRINT           "First you'd have to close "
       CALL_2N         R0208 (G22)
       PRINT_RET       "."
L0070: JE              Gef,#4a,#5b [FALSE] L0071
       CALL_2N         R0207 (G23)
       PRINT_RET       " doesn't seem to fit the lock."
L0071: JE              Gef,#72 [FALSE] L0072
       CALL_2N         R0007 (L01)
       PRINT_RET       " closed."
L0072: JE              Gef,#4f [FALSE] L0073
       PRINT           "But "
       CALL_2N         R0208 (G22)
       PRINT_RET       " isn't there now."
L0073: JE              Gef,#50 [FALSE] L0074
       CALL_2N         R0207 (G22)
       PRINT           " contains "
       CALL_VN         R0141 (#00,G22)
       PRINT_RET       "."
L0074: JE              Gef,#51 [FALSE] L0075
       PRINT           "On "
       CALL_2N         R0208 (G22)
       CALL_VN         R0141 (S099,G22,#02)
       PRINT_RET       "."
L0075: JE              Gef,#52 [FALSE] L0076
       CALL_2N         R0007 (G22)
       PRINT_RET       " empty."
L0076: JE              Gef,#53 [FALSE] L0077
       PRINT           "There is nothing on "
       CALL_2N         R0208 (G22)
       PRINT_RET       "."
L0077: JE              Gef,#54 [FALSE] L0078
       PRINT           "You can't see inside, since "
       CALL_2N         R0208 (G22)
       PRINT           " "
       CALL_2N         R0008 (G22)
       PRINT_RET       " closed."
L0078: JE              Gef,#61 [FALSE] L0079
       CALL_2N         R0007 (G22)
       PRINT           " currently switched "
       CALL_2N         R0011 (G22)
       PRINT_RET       "."
L0079: JE              Gef,#55 [FALSE] L0080
       PRINT           "You eat "
       CALL_2N         R0208 (G22)
       PRINT_RET       ". Not bad."
L0080: JE              Gef,#70,#71 [FALSE] L0081
       PRINT_RET       "You achieve nothing by this."
L0081: JE              Gef,#68 [FALSE] L0082
       CALL_2N         R0007 (G22)
       PRINT_RET       " not available."
L0082: JE              Gef,#66 [FALSE] L0083
       CALL_2N         R0207 (L01)
       PRINT           " seems to belong to "
       CALL_2N         R0208 (L02)
       PRINT_RET       "."
L0083: JE              Gef,#67 [FALSE] L0084
       CALL_2N         R0207 (L01)
       PRINT           " seems to be part of "
       CALL_2N         R0208 (L02)
       PRINT_RET       "."
L0084: JE              Gef,#58 [FALSE] L0088
       JZ              G32 [TRUE] L0085
       PRINT           "In that game you"
       JUMP            L0086
L0085: PRINT           "You have so far"
L0086: PRINT           " scored "
       PRINT_NUM       G04
       PRINT           " out of a possible "
       PRINT_NUM       #00
       PRINT           ", in "
       PRINT_NUM       G08
       PRINT           " turn"
       JE              G08,#01 [TRUE] L0087
       PRINT           "s"
L0087: RTRUE           
L0088: JE              Gef,#56 [FALSE] L0091
       PRINT           "The score "
       JZ              G32 [TRUE] L0089
       PRINT           "wa"
       JUMP            L0090
L0089: PRINT           "i"
L0090: PRINT_RET       "s made up as follows:"
L0091: JE              Gef,#57 [FALSE] L0092
       PRINT           "total (out of "
       PRINT_NUM       #00
       PRINT_RET       ")"
L0092: JE              Gef,#84,#85,#86 [FALSE] L0103
       PRINT           "This game is now in its "
       JE              G0c,#01 [FALSE] L0093
       PRINT           "normal ""
L0093: JE              G0c,#02 [FALSE] L0094
       PRINT           ""verbose"
       JUMP            L0096
L0094: JE              G0c,#03 [FALSE] L0095
       PRINT           ""super"
L0095: PRINT           "brief"
L0096: PRINT           "" mode, which "
       JE              G0c,#01 [TRUE] L0097
       PRINT           "always "
L0097: PRINT           "gives "
       JE              G0c,#03 [FALSE] L0098
       PRINT           "short"
       JUMP            L0099
L0098: PRINT           "long"
L0099: PRINT           " descriptions of locations "
       JE              G0c,#01 [FALSE] L0100
       PRINT_PADDR     S100
       NEW_LINE        
       RTRUE           
L0100: PRINT           "(even if you"
       JE              G0c,#02 [FALSE] L0101
       PRINT           "'ve"
       JUMP            L0102
L0101: PRINT           " haven't"
L0102: PRINT_RET       " been there before)."
L0103: JE              Gef,#21 [FALSE] L0104
       PRINT_PADDR     S101
       PRINT_PADDR     S102
       PRINT           " or QUIT? "
       RTRUE           
L0104: JE              Gef,#22 [FALSE] L0105
       PRINT           "Are you sure you want to quit? "
       RTRUE           
L0105: JE              Gef,#3f [FALSE] L0106
       PRINT           "You have won"
       RTRUE           
L0106: JE              Gef,#40 [FALSE] L0107
       PRINT           "You have died"
       RTRUE           
L0107: JE              Gef,#5d [FALSE] L0110
       PRINT           "You have to "
       JIN             G0d,G00 [TRUE] L0108
       GET_PARENT      G0d -> -(SP)
       CALL_VS         R0128 ((SP)+,G22) -> -(SP)
       JZ              (SP)+ [FALSE] L0108
       PRINT           "leave "
       GET_PARENT      G0d -> -(SP)
       CALL_2N         R0208 ((SP)+)
       JUMP            L0109
L0108: PRINT           "enter "
       GET_PARENT      G22 -> -(SP)
       CALL_2N         R0208 ((SP)+)
L0109: PRINT_RET       " first."
L0110: JE              Gef,#93 [FALSE] L0111
       PRINT           "You can't enter "
       CALL_2N         R0208 (G22)
       PRINT           " while holding "
       CALL_2N         R0006 (G22)
       PRINT_RET       "."
L0111: JE              Gef,#76,#cd [FALSE] L0112
       CALL_2N         R0207 (L01)
       PRINT_RET       " can't contain things."
L0112: JE              Gef,#78 [FALSE] L0113
       PRINT           "Please answer yes or no: "
       JUMP            L0126
L0113: JE              Gef,#79 [FALSE] L0114
       PRINT_PADDR     S103
       JUMP            L0126
L0114: JE              Gef,#91,#92 [FALSE] L0116
       PRINT           "Score notification o"
       JE              L00,#91 [FALSE] L0115
       PRINT_RET       "n."
L0115: PRINT_RET       "ff."
L0116: JE              Gef,#7a [FALSE] L0120
       PRINT           "
[The score has just gone "
       JL              L01,G04 [FALSE] L0117
       SUB             G04,L01 -> L02
       PRINT           "up"
       JUMP            L0118
L0117: SUB             L01,G04 -> L02
       PRINT           "down"
L0118: PRINT           " by "
       PRINT_NUM       L02
       PRINT           " point"
       JG              L02,#01 [FALSE] L0119
       PRINT           "s"
L0119: PRINT           ".]
"
       JUMP            L0126
L0120: JE              Gef,#c8 [FALSE] L0121
       PRINT           "You can't usefully blow "
       CALL_2N         R0208 (G22)
       PRINT_RET       "."
L0121: JE              Gef,#ca [FALSE] L0122
       CALL_2N         R0007 (L01)
       PRINT_RET       " empty already."
L0122: JE              Gef,#cb [FALSE] L0123
       PRINT           "No, you can't set "
       CALL_2N         R0005 (G22)
       PRINT_RET       "."
L0123: JE              Gef,#cc [FALSE] L0124
       PRINT           "No, you can't set "
       CALL_2N         R0005 (G22)
       PRINT_RET       " to anything."
L0124: JE              Gef,#c9 [FALSE] L0125
       PRINT           "You look ridiculous waving "
       CALL_2N         R0208 (G22)
       PRINT_RET       "."
L0125: CALL_2N         R0012 (#0004)
L0126: RTRUE           

Routine R0005, 1 local

       TEST_ATTR       L00,#11 [FALSE] L0001
       PRINT           "those"
       JUMP            L0002
L0001: PRINT           "that"
L0002: RTRUE           

Routine R0006, 1 local

       JE              L00,G0d [FALSE] L0001
       PRINT           "yourself"
       RTRUE           
L0001: TEST_ATTR       L00,#11 [FALSE] L0002
       PRINT           "them"
       RTRUE           
L0002: TEST_ATTR       L00,#0e [FALSE] L0004
       TEST_ATTR       L00,#12 [FALSE] L0003
       PRINT           "her"
       RTRUE           
L0003: TEST_ATTR       L00,#13 [TRUE] L0004
       PRINT           "him"
       RTRUE           
L0004: PRINT           "it"
       RTRUE           

Routine R0007, 1 local

       CALL_2N         R0207 (L00)
       PRINT           " "
       CALL_2N         R0008 (L00)
       RTRUE           

Routine R0008, 1 local

       TEST_ATTR       L00,#11 [TRUE] L0001
       JE              L00,G0d [FALSE] L0002
L0001: PRINT           "are"
       JUMP            L0003
L0002: PRINT           "is"
L0003: RTRUE           

Routine R0009, 1 local

       JE              L00,G0d [FALSE] L0001
       PRINT           "You're"
       RTRUE           
L0001: TEST_ATTR       L00,#11 [FALSE] L0002
       PRINT           "They're"
       RTRUE           
L0002: TEST_ATTR       L00,#0e [FALSE] L0004
       TEST_ATTR       L00,#12 [FALSE] L0003
       PRINT           "She's"
       RTRUE           
L0003: TEST_ATTR       L00,#13 [TRUE] L0004
       PRINT           "He's"
       RTRUE           
L0004: PRINT           "That's"
       RTRUE           

Routine R0010, 1 local

       JE              L00,G0d [TRUE] L0001
       TEST_ATTR       L00,#11 [TRUE] L0001
       TEST_ATTR       L00,#0e [TRUE] L0001
       PRINT           "It's"
       RTRUE           
L0001: CALL_2N         R0009 (L00)
       RTRUE           

Routine R0011, 1 local

       TEST_ATTR       L00,#16 [FALSE] L0001
       PRINT           "on"
       JUMP            L0002
L0001: PRINT           "off"
L0002: RTRUE           

Routine R0012, 3 locals

       PRINT           "
[PunyInform error: "
       CALL_VS         R0220 (L00,#04) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       PRINT_PADDR     L00
       JUMP            L0002
L0001: PRINT_NUM       L00
L0002: PRINT           "]
"
       STORE           L02,L01
       RTRUE           

Routine R0013, 0 locals
    Parsing routine for:
        "go noun = [parse $1133]"
        "clear noun noun = [parse $1133]"

       JE              G22,#05 [TRUE] RTRUE
       RFALSE          

Routine R0014, 0 locals
    Action routine for:
        "answer topic to creature"
        "scream topic to / at creature"

       JG              G23,#01 [FALSE] L0001
       CALL_VS         R0203 (G23,#02) -> -(SP)
       JZ              (SP)+ [FALSE] RFALSE
L0001: RET             #20

Routine R0015, 0 locals
    Action routine for:
        "ask creature about topic"

       CALL_VS         R0203 (G22,#03) -> -(SP)
       JZ              (SP)+ [FALSE] RFALSE
       RET             #1f

Routine R0016, 0 locals
    Action routine for:
        "ask creature to topic"
        "ask that creature topic"
        "tell creature to topic"

       CALL_VN         G5d (#11,G22)
       RTRUE           

Routine R0017, 0 locals
    Action routine for:
        "ask creature for noun"

       JE              G22,G0d [FALSE] L0001
       CALL_2N         R0206 (#19)
       RTRUE           
L0001: CALL_VN         G5d (#10,G22)
       RTRUE           

Routine R0018, 0 locals
    Action routine for:
        "attack noun"
        "attack noun with held"
        "chop noun with held"

       CALL_2S         R0183 (G23) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       CALL_2S         R0161 (G22) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RTRUE           
L0001: TEST_ATTR       G22,#0e [FALSE] L0002
       CALL_VS         R0203 (G22,#06) -> -(SP)
       JZ              (SP)+ [FALSE] RFALSE
L0002: RET             S046

Routine R0019, 0 locals
    Action routine for:
        "climb noun"
        "climb up / over noun"

       TEST_ATTR       G22,#0e [FALSE] L0001
       RET             #7b
L0001: RET             #7c

Routine R0020, 0 locals
    Action routine for:
        "close noun"

       CALL_2S         R0161 (G22) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RTRUE           
L0001: TEST_ATTR       G22,#08 [TRUE] L0002
       CALL_VN         G5d (#02,"close")
       RTRUE           
L0002: TEST_ATTR       G22,#07 [TRUE] L0003
       CALL_VN         G5d (#6f,G22)
       RTRUE           
L0003: CLEAR_ATTR      G22,#07
       STORE           G34,#01
       STORE           G46,#0a
       STORE           G47,"close"
       RTRUE           

Routine R0021, 0 locals
    Action routine for:
        "read about topic in noun" REVERSE
        "read topic in noun" REVERSE
        "consult noun about topic"
        "consult noun on topic"

       RET             #44

Routine R0022, 0 locals
    Action routine for:
        "chop noun"

       RET             #45

Routine R0023, 0 locals
    Action routine for:
        "dig noun"
        "dig noun with held"

       CALL_2S         R0183 (G23) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       RET             S048

Routine R0024, 0 locals
    Action routine for:
        "remove ATTRIBUTE(16)"
        "disrobe held"
        "carry off noun"

       JIN             G22,G0d [FALSE] L0001
       TEST_ATTR       G22,#10 [TRUE] L0002
L0001: RET             #4c
L0002: CLEAR_ATTR      G22,#10
       STORE           G46,#4d
       RTRUE           

Routine R0025, 0 locals
    Action routine for:
        "drink noun"

       RET             S029

Routine R0026, 0 locals
    Action routine for:
        "discard multiheld"

       JIN             G22,G0d [TRUE] L0001
       RET             #08
L0001: CALL_2S         R0184 (G22) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       GET_PARENT      G0d -> -(SP)
       INSERT_OBJ      G22,(SP)+
       SET_ATTR        G22,#0a
       STORE           G46,S030
       RTRUE           

Routine R0027, 0 locals
    Action routine for:
        "eat held"

       TEST_ATTR       G22,#0e [FALSE] L0001
       RET             #07
L0001: CALL_2S         R0183 (G22) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       TEST_ATTR       G22,#00 [TRUE] L0002
       RET             #8b
L0002: REMOVE_OBJ      G22
       STORE           G34,#01
       STORE           G46,#55
       RTRUE           

Routine R0028, 2 locals

       GET_PROP_ADDR   L00,#13 -> Gef
       JZ              Gef [TRUE] L0001
       GET_PROP_LEN    Gef -> Gef
L0001: PUSH            Gef
       JG              (SP)+,#02 [FALSE] L0003
       GET_PROP_ADDR   L00,#09 -> Gef
       PUSH            Gef
       LOADW           (SP)+,#01 -> -(SP)
       JE              G03,(SP)+ [FALSE] L0002
       STORE           L01,#01
L0002: GET_PROP_ADDR   L00,#13 -> Gef
       PUSH            Gef
       LOADW           (SP)+,L01 -> -(SP)
       RET_POPPED      
L0003: GET_PROP        L00,#13 -> Gef
       STORE           L01,Gef
       CALL_VS         R0127 (L01,G3f) -> -(SP)
       JG              (SP)+,#00 [FALSE] L0004
       CALL_VS         R0215 (L00,#13) -> -(SP)
       RET_POPPED      
L0004: RET             L01

Routine R0029, 1 local
    Action routine for:
        "climb into / onto noun"
        "enter noun"
        "get in / into / on / onto noun"
        "go noun"
        "jump in / into / onto noun"
        "lie on / in / inside noun"
        "lie on top of noun"
        "stand on noun"

       TEST_ATTR       G22,#17 [FALSE] L0001
       CALL_2S         R0028 (G22) -> L00
       CALL_2S         R0224 (L00) -> L00
       CALL_VN         R0206 (#18,L00)
       RTRUE           
L0001: TEST_ATTR       G22,#05 [TRUE] L0002
       CALL_VN         G5d (#03,"enter")
       RTRUE           
L0002: JIN             G0d,G22 [FALSE] L0003
       RET             S037
L0003: CALL_VS         R0128 (G0d,G22) -> -(SP)
       JZ              (SP)+ [TRUE] L0004
       RET             #93
L0004: TEST_ATTR       G22,#04 [FALSE] L0005
       TEST_ATTR       G22,#07 [TRUE] L0005
       CALL_VN         G5d (#14,G22)
       RTRUE           
L0005: GET_PARENT      G0d -> -(SP)
       GET_PARENT      G22 -> -(SP)
       JE              (SP)+,(SP)+ [TRUE] L0006
       RET             #5d
L0006: CALL_VN         R0150 (G22,#01)
       STORE           G46,#12
       STORE           G47,"enter"
       RTRUE           

Routine R0030, 1 local
    Action routine for:
        "examine noun"
        "l noun"
        "l at noun"
        "read noun"

       GET_PROP        G22,#07 -> Gef
       PUSH            Gef
       JZ              (SP)+ [FALSE] L0005
       TEST_ATTR       G22,#04 [FALSE] L0003
       TEST_ATTR       G22,#07 [TRUE] L0001
       TEST_ATTR       G22,#06 [FALSE] L0002
L0001: CALL_VN         R0206 (#1f,G22)
       RTRUE           
L0002: CALL_VN         G5d (#72,G22)
       RTRUE           
L0003: TEST_ATTR       G22,#15 [FALSE] L0004
       RET             #61
L0004: RET             #04
L0005: CALL_VS         R0147 (G22,#07) -> L00
       STORE           G46,#01
       JZ              L00 [FALSE] L0006
       TEST_ATTR       G22,#15 [FALSE] L0006
       RET             #61
L0006: RTRUE           

Routine R0031, 1 local
    Action routine for:
        "climb out of / from noun"
        "exit"
        "exit noun"
        "get out / off / up of / from noun"
        "get up / out / off"
        "jump out of / from noun"
        "jump off noun"
        "stand"
        "stand up"

       GET_PARENT      G0d -> L00
       GET_PARENT      L00 -> -(SP)
       JZ              (SP)+ [FALSE] L0002
       GET_PROP        L00,#1b -> Gef
       PUSH            Gef
       JZ              (SP)+ [TRUE] L0001
       JZ              G22 [FALSE] L0001
       CALL_VN         R0206 (#18,#271c)
       RTRUE           
L0001: RET             S038
L0002: JZ              G22 [FALSE] L0003
       CALL_VN         R0206 (#09,L00)
       RTRUE           
L0003: JIN             G0d,G22 [TRUE] L0006
       CALL_VS         R0128 (G22,G0d) -> -(SP)
       JZ              (SP)+ [TRUE] L0004
       GET_PARENT      G0d -> -(SP)
       CALL_VN         G5d (#13,(SP)+)
       RTRUE           
L0004: TEST_ATTR       G22,#03 [FALSE] L0005
       RET             S039
L0005: RET             S040
L0006: TEST_ATTR       G22,#04 [FALSE] L0007
       TEST_ATTR       G22,#07 [TRUE] L0007
       CALL_VN         G5d (#15,G22)
       RTRUE           
L0007: GET_PARENT      G22 -> -(SP)
       CALL_VN         R0150 ((SP)+,#01)
       STORE           G46,#16
       STORE           G47,"leave"
       RTRUE           

Routine R0032, 0 locals
    Action routine for:
        "fill noun"

       RET             S047 OR "arrakis"

Routine R0033, 0 locals
    Action routine for:
        "get off noun"

       GET_PARENT      G0d -> -(SP)
       JE              (SP)+,G22 [FALSE] L0001
       CALL_VN         R0206 (#09,G22)
       RTRUE           
L0001: RET             S039

Routine R0034, 0 locals
    Action routine for:
        "feed held to creature" REVERSE
        "feed held creature" REVERSE
        "feed creature held"
        "feed over held to creature" REVERSE

       CALL_2S         R0161 (G23) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RTRUE           
L0001: JIN             G22,G0d [TRUE] L0002
       RET             #0e
L0002: JE              G23,G0d [FALSE] L0003
       RET             #19
L0003: CALL_VS         R0203 (G23,#17) -> -(SP)
       JZ              (SP)+ [FALSE] RFALSE
       RET             #0f

Routine R0035, 1 local
    Action routine for:
        "go noun = [parse $1133]"

       STORE           L00,G24
       CALL_2S         R0125 (L00) -> -(SP)
       RET_POPPED      

Routine R0036, 4 locals

       CALL_2S         R0161 (G23) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RTRUE           
L0001: CALL_VS         R0129 (G22,G23) -> L02
       LOADW           L00,#00 -> L01
       JZ              L01 [TRUE] L0002
       GET_PARENT      G22 -> -(SP)
       JE              (SP)+,G23 [FALSE] L0002
       RET             L01
L0002: LOADW           L00,#01 -> L01
       JZ              L01 [TRUE] L0003
       JE              L02,G22 [FALSE] L0003
       RET             L01
L0003: LOADW           L00,#02 -> L01
       JZ              L01 [TRUE] L0004
       JE              G23,L02 [TRUE] L0004
       TEST_ATTR       G23,#04 [FALSE] L0004
       TEST_ATTR       G23,#07 [TRUE] L0004
       CALL_VN         G5d (L01,G23)
       RTRUE           
L0004: LOADW           L00,#03 -> L01
       JZ              L01 [TRUE] L0005
       JE              G22,G0d [TRUE] L0005
       JE              G23,#05 [TRUE] L0005
       CALL_2S         R0183 (G22) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
L0005: LOADW           L00,#04 -> L01
       JZ              L01 [TRUE] L0006
       CALL_2S         R0184 (G22) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
L0006: STORE           G45,G12
       STORE           L03,G12
       STORE           G12,#1001
       CALL_VS         R0146 (G23,#0e) -> -(SP)
       JZ              (SP)+ [TRUE] L0007
       STORE           G12,L03
       RTRUE           
L0007: STORE           G12,L03
       LOADW           L00,#05 -> L01
       JZ              L01 [TRUE] L0008
       TEST_ATTR       G23,#0e [FALSE] L0008
       RET             L01
L0008: LOADW           L00,#06 -> L01
       JZ              L01 [TRUE] L0009
       TEST_ATTR       G23,#04 [TRUE] L0009
       CALL_VN         G5d (L01,G23)
       RTRUE           
L0009: LOADW           L00,#07 -> L01
       JZ              L01 [TRUE] L0010
       TEST_ATTR       G23,#03 [TRUE] L0010
       CALL_VN         G5d (L01,G23)
       RTRUE           
L0010: LOADW           L00,#08 -> L01
       JZ              L01 [TRUE] L0011
       CALL_2S         R0136 (G23) -> -(SP)
       JZ              (SP)+ [TRUE] L0011
       RET             L01
L0011: INSERT_OBJ      G22,G23
       CALL_1S         R0202 -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       STORE           L03,G12
       STORE           G12,#1001
       CALL_VS         R0146 (G23,#0f) -> -(SP)
       JZ              (SP)+ [TRUE] L0012
       STORE           G12,L03
       RTRUE           
L0012: STORE           G12,L03
       JZ              G3a [TRUE] L0013
       RTRUE           
L0013: LOADW           L00,#09 -> L01
       RET             L01

Routine R0037, 0 locals
    Action routine for:
        "discard multiexcept in / into / down noun"
        "insert multiexcept in / into noun"
        "place multiexcept in / inside / into noun"

       JE              G22,G0d [FALSE] L0001
       CALL_VN         R0206 (#08,G23)
       RTRUE           
L0001: CALL_2S         R0036 (#1ad2) -> -(SP)
       RET_POPPED      

Routine R0038, 0 locals
    Action routine for:
        "i"
        "carry inventory"

       STORE           G46,#01
       CALL_2S         G5d (#17) -> -(SP)
       JZ              (SP)+ [FALSE] L0001
       RET             S041
L0001: RTRUE           

Routine R0039, 0 locals
    Action routine for:
        "jump"

       RET             S052

Routine R0040, 0 locals
    Action routine for:
        "jump over noun"

       RET             #6d

Routine R0041, 0 locals
    Action routine for:
        "listen"
        "listen to noun"

       RET             S034

Routine R0042, 0 locals
    Action routine for:
        "lock noun with held"

       CALL_2S         R0161 (G22) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RTRUE           
L0001: TEST_ATTR       G22,#19 [TRUE] L0002
       CALL_VN         G5d (#47,"lock")
       RTRUE           
L0002: TEST_ATTR       G22,#18 [FALSE] L0003
       CALL_VN         G5d (#48,"lock")
       RTRUE           
L0003: TEST_ATTR       G22,#07 [FALSE] L0004
       RET             #49
L0004: CALL_2S         R0183 (G23) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       CALL_VS         R0146 (G22,#12) -> -(SP)
       JE              (SP)+,G23 [TRUE] L0005
       RET             #4a
L0005: SET_ATTR        G22,#18
       STORE           G46,#4b
       STORE           G47,"lock"
       RTRUE           

Routine R0043, 1 local
    Action routine for:
        "l"

       STORE           L00,G0c
       STORE           G0c,#02
       CALL_1N         R0120
       STORE           G0c,L00
       RTRUE           

Routine R0044, 0 locals
    Action routine for:
        "open noun"

       CALL_2S         R0161 (G22) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RTRUE           
L0001: TEST_ATTR       G22,#08 [TRUE] L0002
       CALL_VN         G5d (#41,"open")
       RTRUE           
L0002: TEST_ATTR       G22,#18 [FALSE] L0003
       RET             #8d
L0003: TEST_ATTR       G22,#07 [FALSE] L0004
       RET             #8c
L0004: SET_ATTR        G22,#07
       STORE           G34,#01
       STORE           G46,#09
       RTRUE           

Routine R0045, 0 locals
    Action routine for:
        "drag noun"

       CALL_2S         R0161 (G22) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RTRUE           
L0001: TEST_ATTR       G22,#0d [FALSE] L0002
       RET             #34
L0002: TEST_ATTR       G22,#0c [FALSE] L0003
       RET             #37
L0003: TEST_ATTR       G22,#0e [FALSE] L0004
       RET             #3a
L0004: RET             #3e

Routine R0046, 0 locals
    Action routine for:
        "clear noun"

       CALL_2S         R0161 (G22) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RTRUE           
L0001: TEST_ATTR       G22,#0d [FALSE] L0002
       RET             #33
L0002: TEST_ATTR       G22,#0c [FALSE] L0003
       RET             #36
L0003: TEST_ATTR       G22,#0e [FALSE] L0004
       RET             #39
L0004: RET             #3d

Routine R0047, 0 locals
    Action routine for:
        "clear noun noun = [parse $1133]"

       RET             S051

Routine R0048, 0 locals
    Action routine for:
        "place multiexcept on / onto noun"

       JE              G22,G0d [FALSE] L0001
       CALL_VN         R0206 (#08,G23)
       RTRUE           
L0001: CALL_2S         R0036 (#1ae6) -> -(SP)
       RET_POPPED      

Routine R0049, 1 local
    Action routine for:
        "get multiinside from / off noun"
        "remove multiinside from noun"
        "carry multiinside from / off noun"

       GET_PARENT      G22 -> L00
       TEST_ATTR       L00,#04 [FALSE] L0001
       TEST_ATTR       L00,#07 [TRUE] L0001
       CALL_VN         G5d (#4e,L00)
       RTRUE           
L0001: JE              L00,G23 [TRUE] L0002
       RET             #4f
L0002: CALL_1S         R0123 -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       STORE           G12,#16
       CALL_1S         R0202 -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       STORE           G12,#14
       STORE           G46,S053
       RTRUE           

Routine R0050, 0 locals
    Action routine for:
        "clean noun"

       RET             #70

Routine R0051, 2 locals
    Action routine for:
        "l in / inside / on noun"
        "search noun"

       CALL_2S         R0161 (G22) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RTRUE           
L0001: CALL_VS         R0141 (#01,G22) -> L01
       TEST_ATTR       G22,#03 [FALSE] L0003
       JZ              L01 [FALSE] L0002
       RET             #53
L0002: RET             #51
L0003: TEST_ATTR       G22,#04 [TRUE] L0004
       RET             S054
L0004: TEST_ATTR       G22,#06 [TRUE] L0005
       TEST_ATTR       G22,#07 [TRUE] L0005
       RET             #54
L0005: CALL_1S         R0202 -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       STORE           L00,#52
       JZ              L01 [TRUE] L0006
       STORE           L00,#50
L0006: RET             L00

Routine R0052, 0 locals
    Action routine for:
        "scream topic"
        "scream"

       RET             #80

Routine R0053, 0 locals
    Action routine for:
        "scream to / at noun"

       RET             #81

Routine R0054, 0 locals
    Action routine for:
        "display creature held" REVERSE
        "display held to creature"

       GET_PARENT      G22 -> -(SP)
       JE              (SP)+,G0d [TRUE] L0001
       RET             #0c
L0001: JE              G23,G0d [FALSE] L0002
       CALL_VN         R0206 (#12,G22)
       RTRUE           
L0002: CALL_VS         R0203 (G23,#2d) -> -(SP)
       JZ              (SP)+ [FALSE] RFALSE
       RET             #0d

Routine R0055, 0 locals
    Action routine for:
        "smell"
        "smell noun"

       CALL_2S         R0161 (G22) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RTRUE           
L0001: RET             S033

Routine R0056, 0 locals
    Action routine for:
        "close off noun"
        "switch off noun"
        "switch noun off"
        "rotate noun off"
        "rotate off noun"

       CALL_2S         R0161 (G22) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RTRUE           
L0001: TEST_ATTR       G22,#15 [TRUE] L0002
       RET             #2e
L0002: TEST_ATTR       G22,#16 [TRUE] L0003
       RET             #30
L0003: CLEAR_ATTR      G22,#16
       STORE           G46,#32
       RTRUE           

Routine R0057, 0 locals
    Action routine for:
        "switch on noun"
        "switch noun on"
        "switch noun"
        "rotate noun on"
        "rotate on noun"

       CALL_2S         R0161 (G22) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RTRUE           
L0001: TEST_ATTR       G22,#15 [TRUE] L0002
       RET             #2d
L0002: TEST_ATTR       G22,#16 [FALSE] L0003
       RET             #2f
L0003: SET_ATTR        G22,#16
       STORE           G46,#31
       RTRUE           

Routine R0058, 0 locals
    Action routine for:
        "get multi"
        "pick up multi"
        "pick multi up"
        "remove multi"
        "carry multi"
        "peel noun"
        "peel off noun"

       CALL_2S         R0123 (#01) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       STORE           G46,S028
       RTRUE           

Routine R0059, 0 locals
    Action routine for:
        "attach noun"
        "attach noun to noun"

       RET             #6e

Routine R0060, 0 locals
    Action routine for:
        "tell creature about topic"

       JE              G22,G0d [FALSE] L0001
       RET             S035 OR "andxor"
L0001: CALL_VS         R0203 (G22,#30) -> -(SP)
       JZ              (SP)+ [FALSE] RFALSE
       RET             S036

Routine R0061, 0 locals
    Action routine for:
        "discard held at / against / on / onto noun"

       CALL_2S         R0183 (G22) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       CALL_2S         R0161 (G23) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RTRUE           
L0001: CALL_2S         R0184 (G22) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       JG              G23,#01 [FALSE] L0003
       STORE           G12,#1003
       CALL_VS         R0146 (G23,#0e) -> -(SP)
       JZ              (SP)+ [TRUE] L0002
       STORE           G12,#0f
       RTRUE           
L0002: STORE           G12,#0f
L0003: TEST_ATTR       G23,#0e [TRUE] L0004
       RET             S031
L0004: CALL_VS         R0203 (G23,#0f) -> -(SP)
       JZ              (SP)+ [FALSE] RFALSE
       RET             S032

Routine R0062, 0 locals
    Action routine for:
        "feel noun"

       CALL_2S         R0161 (G22) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RTRUE           
L0001: RET             S050

Routine R0063, 1 local
    Action routine for:
        "clear noun to noun"
        "transfer noun to noun"

       JIN             G22,G23 [TRUE] L0001
       STORE           L00,#01
L0001: JE              G23,G0d [FALSE] L0002
       CALL_VN         R0206 (#14,G22)
       STORE           G46,L00
       RTRUE           
L0002: JZ              L00 [TRUE] L0003
       GET_PARENT      G0d -> -(SP)
       JIN             G22,(SP)+ [FALSE] L0004
       JE              G23,#05 [FALSE] L0004
       JE              G24,#19 [FALSE] L0004
L0003: RET             #77
L0004: JIN             G22,G0d [TRUE] L0005
       CALL_1S         R0123 -> -(SP)
       JE              (SP)+,#01 [TRUE] RTRUE
L0005: JE              G23,#05 [FALSE] L0007
       JE              G24,#19 [FALSE] L0007
       CALL_VN         R0206 (#00,G22)
       JIN             G22,G00 [FALSE] L0006
       STORE           G46,#01
L0006: JUMP            L0010
L0007: TEST_ATTR       G23,#03 [FALSE] L0008
       CALL_VN         R0206 (#26,G22,G23)
       JUMP            L0009
L0008: CALL_VN         R0206 (#01,G22,G23)
L0009: JIN             G22,G23 [FALSE] L0010
       STORE           G46,#01
L0010: RTRUE           

Routine R0064, 0 locals
    Action routine for:
        "rotate noun"

       CALL_2S         R0161 (G22) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RTRUE           
L0001: TEST_ATTR       G22,#0d [FALSE] L0002
       RET             #35
L0002: TEST_ATTR       G22,#0c [FALSE] L0003
       RET             #38
L0003: TEST_ATTR       G22,#0e [FALSE] L0004
       RET             #3b
L0004: RET             #3c

Routine R0065, 0 locals
    Action routine for:
        "open noun with held"
        "unlock noun with held"
        "force noun with held"
        "force apart / open noun with held"
        "force noun apart / open with held"

       CALL_2S         R0161 (G22) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RTRUE           
L0001: TEST_ATTR       G22,#19 [TRUE] L0002
       CALL_VN         G5d (#59,"unlock")
       RTRUE           
L0002: TEST_ATTR       G22,#18 [TRUE] L0003
       CALL_VN         G5d (#5a,"unlock")
       RTRUE           
L0003: CALL_2S         R0183 (G23) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       CALL_VS         R0146 (G22,#12) -> -(SP)
       JE              (SP)+,G23 [TRUE] L0004
       RET             #5b
L0004: CLEAR_ATTR      G22,#18
       STORE           G46,#5c
       STORE           G47,"unlock"
       RTRUE           

Routine R0066, 0 locals
    Action routine for:
        "wait"

       CALL_1S         R0202 -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       RET             S049

Routine R0067, 0 locals
    Action routine for:
        "place on held"
        "wear held"

       GET_PARENT      G22 -> -(SP)
       JE              (SP)+,G0d [TRUE] L0001
       RET             #25
L0001: TEST_ATTR       G22,#10 [FALSE] L0002
       RET             #23
L0002: TEST_ATTR       G22,#0f [TRUE] L0003
       CALL_VN         G5d (#24,"wear")
       RTRUE           
L0003: SET_ATTR        G22,#10
       STORE           G46,#26
       RTRUE           

Routine R0068, 0 locals
    Action routine for:
        "blow held"

       CALL_2S         R0183 (G22) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       RET             #c8

Routine R0069, 0 locals
    Action routine for:
        "burn noun"
        "burn noun with held"

       CALL_2S         R0183 (G23) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       RET             S072

Routine R0070, 0 locals
    Action routine for:
        "buy noun"

       RET             S073

Routine R0071, 0 locals
    Action routine for:
        "empty noun"
        "empty out noun"
        "empty noun out"

       CALL_VN         R0206 (#3a,G22,#271a)
       RTRUE           

Routine R0072, 2 locals
    Action routine for:
        "empty noun to / into / on / onto noun"

       JE              G22,G23 [FALSE] L0001
       RET             S074
L0001: TEST_ATTR       G22,#04 [TRUE] L0002
       CALL_VN         G5d (#cd,G22)
       RTRUE           
L0002: TEST_ATTR       G22,#07 [TRUE] L0003
       CALL_VN         G5d (#73,G22)
       RTRUE           
L0003: JE              G23,#05 [FALSE] L0004
       JZ              G24 [TRUE] L0004
       CALL_2S         R0224 (G24) -> L01
       JUMP            L0005
L0004: STORE           L01,G23
L0005: GET_CHILD       G22 -> L00 [FALSE] L0006
L0006: JZ              L00 [FALSE] L0007
       CALL_VN         G5d (#ca,G22)
       RTRUE           
L0007: JZ              L00 [TRUE] L0010
       JZ              G3a [FALSE] L0008
       CALL_2N         R0137 (L00)
       PRINT           ": "
L0008: CALL_VN         R0206 (#25,L00,L01)
       JIN             L00,G22 [TRUE] RTRUE
       JIN             L00,G0d [TRUE] RTRUE
       GET_CHILD       G22 -> L00 [FALSE] L0009
L0009: JUMP            L0007
L0010: STORE           G46,#01
       RTRUE           

Routine R0073, 0 locals
    Action routine for:
        "enter"
        "in"

       CALL_VN         R0206 (#18,#271b)
       RTRUE           

Routine R0074, 0 locals
    Action routine for:
        "embrace creature"

       CALL_2S         R0161 (G22) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RTRUE           
L0001: CALL_VS         R0203 (G22,#3b) -> -(SP)
       JZ              (SP)+ [FALSE] RFALSE
       JE              G22,G0d [FALSE] L0002
       RET             S088 OR "box"
L0002: RET             S089

Routine R0075, 0 locals
    Action routine for:
        "bother"
        "bother topic"

       RET             S090

Routine R0076, 0 locals
    Action routine for:
        "no"

       RET             S075

Routine R0077, 0 locals
    Action routine for:
        "pray"

       RET             S076

Routine R0078, 0 locals
    Action routine for:
        "adjust noun"

       RET             #cb

Routine R0079, 0 locals
    Action routine for:
        "adjust noun to special"

       RET             #cc

Routine R0080, 0 locals
    Action routine for:
        "sing"

       RET             S077 OR "bluebox"

Routine R0081, 0 locals
    Action routine for:
        "nap"

       RET             S078

Routine R0082, 0 locals
    Action routine for:
        "sorry"

       RET             S079

Routine R0083, 0 locals
    Action routine for:
        "damn"
        "damn topic"

       RET             S091

Routine R0084, 0 locals
    Action routine for:
        "squash noun"

       CALL_2S         R0161 (G22) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RTRUE           
L0001: TEST_ATTR       G22,#0e [FALSE] L0002
       RET             S080
L0002: RET             #71

Routine R0085, 0 locals
    Action routine for:
        "dive"

       RET             S081

Routine R0086, 0 locals
    Action routine for:
        "swing noun"
        "swing on noun"

       RET             S082

Routine R0087, 0 locals
    Action routine for:
        "taste noun"

       CALL_2S         R0161 (G22) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RTRUE           
L0001: RET             S083

Routine R0088, 0 locals
    Action routine for:
        "think"

       RET             S084

Routine R0089, 0 locals
    Action routine for:
        "awake"
        "awake up"

       RET             S086

Routine R0090, 0 locals
    Action routine for:
        "awake creature"
        "awake creature up"
        "awake up creature"

       CALL_2S         R0161 (G22) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RTRUE           
L0001: CALL_VS         R0203 (G22,#4a) -> -(SP)
       JZ              (SP)+ [FALSE] RFALSE
       RET             S087

Routine R0091, 0 locals
    Action routine for:
        "wave noun"

       GET_PARENT      G22 -> -(SP)
       JE              (SP)+,G0d [TRUE] L0001
       CALL_VN         G5d (#6c,G22)
       RTRUE           
L0001: RET             #c9

Routine R0092, 0 locals
    Action routine for:
        "wave"

       RET             S085 OR "bother"

Routine R0093, 0 locals
    Action routine for:
        "y"

       RET             S075

Routine R0094, 0 locals
    Action routine for:
        "again"

       RTRUE           

Routine R0095, 2 locals
    Action routine for:
        "full"
        "full score"

       NEW_LINE        
       CALL_2N         G5d (#56)
       STORE           L00,#00
       SUB             G04,L01 -> L01
       JZ              L01 [TRUE] L0001
       CALL_2N         R0122 (L01)
       CALL_2N         G5d (S071)
L0001: NEW_LINE        
       CALL_2N         R0122 (G04)
       RET             #57

Routine R0096, 0 locals
    Action routine for:
        "brief"

       STORE           G0c,#01
       RET             #84

Routine R0097, 0 locals
    Action routine for:
        "long"

       STORE           G0c,#02
       RET             #85

Routine R0098, 0 locals
    Action routine for:
        "short"

       STORE           G0c,#03
       RET             #86

Routine R0099, 0 locals
    Action routine for:
        "notify"
        "notify on"

       STORE           G06,#01
       RET             #91

Routine R0100, 0 locals
    Action routine for:
        "notify off"

       STORE           G06,#00
       RET             #92

Routine R0101, 0 locals
    Action routine for:
        "oops"

       RET             S055

Routine R0102, 0 locals
    Action routine for:
        "oops special"

       RTRUE           

Routine R0103, 0 locals
    Action routine for:
        "q"

       CALL_2N         G5d (#22)
       CALL_1S         R0163 -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       STORE           G32,#ffff
L0001: RTRUE           

Routine R0104, 0 locals
    Action routine for:
        "restart"

       CALL_2N         G5d (#79)
       CALL_1S         R0163 -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RESTART         
       RET             #1c
L0001: RTRUE           

Routine R0105, 1 local
    Action routine for:
        "restore"

       RESTORE         -> L00
       RET             #1b

Routine R0106, 1 local
    Action routine for:
        "save"

       SAVE            -> L00
       JZ              L00 [FALSE] L0001
       RET             #1a
L0001: RET             S043

Routine R0107, 0 locals
    Action routine for:
        "score"

       CALL_2N         G5d (#58)
       CALL_1N         R0121
       RTRUE           

Routine R0108, 1 local

       NEW_LINE        
       SET_TEXT_STYLE  BOLDFACE
       PRINT_PADDR     S001
       SET_TEXT_STYLE  ROMAN
       PRINT_PADDR     S002
       STORE           L00,#00
       NEW_LINE        
       RTRUE           

Routine R0109, 0 locals
    Action routine for:
        "version"

       CALL_1N         R0108
       RTRUE           

Routine R0110, 0 locals
    Action routine for:
        "recording"
        "recording on"

       OUTPUT_STREAM   RECORD_ENABLE
       STORE           G68,#01
       PRINT_RET       "[Command recording on.]"

Routine R0111, 0 locals
    Action routine for:
        "recording off"

       JE              G68,#01 [FALSE] L0001
       OUTPUT_STREAM   #fffc
L0001: STORE           G68,#00
       PRINT_RET       "[Command recording off.]"

Routine R0112, 0 locals
    Action routine for:
        "replay"

       INPUT_STREAM    #01
       STORE           G68,#02
       PRINT_RET       "[Replaying commands.]"

Routine R0113, 3 locals
    Action routine for:
        "places"

       PRINT           "You have visited: "
       STORE           L00,#01
L0001: TEST_ATTR       L00,#0a [FALSE] L0002
       GET_PARENT      L00 -> -(SP)
       JZ              (SP)+ [FALSE] L0002
       INC             L01
L0002: INC             L00
       JG              L00,#0068 [TRUE] L0003
       JUMP            L0001
L0003: STORE           L00,#01
L0004: TEST_ATTR       L00,#0a [FALSE] L0007
       GET_PARENT      L00 -> -(SP)
       JZ              (SP)+ [FALSE] L0007
       CALL_2N         R0137 (L00)
       INC             L02
       JE              L02,L01 [FALSE] L0005
       PRINT           ".
"
       RTRUE           
L0005: SUB             L01,#01 -> -(SP)
       JE              L02,(SP)+ [FALSE] L0006
       PRINT           " and "
       JUMP            L0007
L0006: PRINT           ", "
L0007: INC             L00
       JG              L00,#0068 [TRUE] L0008
       JUMP            L0004
L0008: RTRUE           

Routine R0114, 3 locals
    Action routine for:
        "objects"

       PRINT           "Objects you have handled: "
       STORE           L00,#01
L0001: TEST_ATTR       L00,#0a [FALSE] L0012
       GET_PARENT      L00 -> L01
       JZ              L01 [TRUE] L0012
       JZ              L02 [FALSE] L0002
       NEW_LINE        
L0002: STORE           L02,#01
       PRINT           "- "
       CALL_2N         R0208 (L00)
       PRINT           "   "
       JE              L01,G0d [FALSE] L0005
       TEST_ATTR       L00,#10 [FALSE] L0003
       PRINT           "(worn)"
       JUMP            L0004
L0003: PRINT           "(held)"
L0004: JUMP            L0011
L0005: TEST_ATTR       L01,#0e [FALSE] L0006
       PRINT           "(given away)"
       JUMP            L0011
L0006: TEST_ATTR       L01,#0a [FALSE] L0007
       PRINT           "(in "
       CALL_2N         R0137 (L01)
       PRINT           ")"
       JUMP            L0011
L0007: TEST_ATTR       L01,#04 [FALSE] L0008
       PRINT           "(inside "
       CALL_2N         R0208 (L01)
       PRINT           ")"
       JUMP            L0011
L0008: TEST_ATTR       L01,#03 [FALSE] L0009
       PRINT           "(on "
       CALL_2N         R0208 (L01)
       PRINT           ")"
       JUMP            L0011
L0009: TEST_ATTR       L01,#05 [FALSE] L0010
       PRINT           "(in "
       CALL_2N         R0208 (L01)
       PRINT           ")"
       JUMP            L0011
L0010: PRINT           "(lost)"
L0011: NEW_LINE        
L0012: INC             L00
       JG              L00,#0068 [TRUE] L0013
       JUMP            L0001
L0013: JZ              L02 [FALSE] L0014
       PRINT_RET       "none."
L0014: RTRUE           

Routine R0115, 0 locals
    Action routine for:
        "script"
        "script on"

       LOADW           #10,#00 -> -(SP)
       AND             (SP)+,#01 -> G67
       JZ              G67 [TRUE] L0001
       PRINT_RET       "Transcripting is already on."
L0001: OUTPUT_STREAM   SCRIPTING_ENABLE
       LOADW           #10,#00 -> -(SP)
       AND             (SP)+,#01 -> -(SP)
       JZ              (SP)+ [FALSE] L0002
       PRINT_PADDR     S104
       NEW_LINE        
       RTRUE           
L0002: PRINT           "Start of a transcript of
"
       CALL_1N         R0108
       STORE           G67,#01
       RTRUE           

Routine R0116, 0 locals
    Action routine for:
        "noscript"
        "script off"

       LOADW           #10,#00 -> -(SP)
       AND             (SP)+,#01 -> G67
       JZ              G67 [FALSE] L0001
       PRINT_RET       "Transcripting is already off."
L0001: PRINT           "
End of transcript.
"
       OUTPUT_STREAM   #fffe
       LOADW           #10,#00 -> -(SP)
       AND             (SP)+,#01 -> -(SP)
       JZ              (SP)+ [TRUE] L0002
       PRINT_PADDR     S105
       NEW_LINE        
       RTRUE           
L0002: STORE           G67,#00
       RTRUE           

Routine R0117, 0 locals
    Action routine for:
        "verify"

       VERIFY          [TRUE] L0001
       PRINT_PADDR     S106
       NEW_LINE        
       RTRUE           
L0001: PRINT_PADDR     S107
       NEW_LINE        
       RTRUE           

Routine R0118, 1 local

       STORE           L00,#00
       PRINT           "
You can "
       JZ              G41 [TRUE] L0001
       PRINT           "also "
L0001: PRINT           "see "
       RTRUE           

Routine R0119, 1 local

       JZ              G40 [TRUE] L0001
       NEW_LINE        
L0001: TEST_ATTR       L00,#03 [FALSE] L0002
       PRINT           "On "
       JUMP            L0003
L0002: PRINT           "In "
L0003: CALL_2N         R0208 (L00)
       PRINT           " you can "
       JZ              G41 [TRUE] L0004
       PRINT           "also "
L0004: PRINT           "see "
       RTRUE           

Routine R0120, 9 locals

       CALL_2N         G5d (#0b)
       JE              G0c,#01 [FALSE] L0001
       TEST_ATTR       G00,#0a [FALSE] L0002
L0001: JE              G0c,#02 [FALSE] L0003
L0002: STORE           L03,#01
L0003: SET_TEXT_STYLE  BOLDFACE
       CALL_VS         R0157 (G0d,L07) -> L02
       STORE           L01,L02
       JE              L02,G00 [FALSE] L0004
       CALL_2N         R0138 (G00)
       JUMP            L0005
L0004: CALL_2N         R0207 (L02)
L0005: SET_TEXT_STYLE  ROMAN
       GET_PARENT      G0d -> L00
L0006: JE              L00,L02,#00 [TRUE] L0009
       TEST_ATTR       L00,#03 [FALSE] L0007
       PRINT           " (on "
       JUMP            L0008
L0007: PRINT           " (in "
L0008: CALL_2N         R0208 (L00)
       PRINT           ")"
       GET_PARENT      L00 -> L00
       JUMP            L0006
L0009: JE              L02,G0d,#00 [TRUE] L0038
       JZ              L03 [TRUE] L0012
       JE              L02,G00 [FALSE] L0010
       NEW_LINE        
       CALL_VN         R0147 (L02,#07)
       JUMP            L0011
L0010: GET_PROP        L02,#17 -> Gef
       PUSH            Gef
       JE              (SP)+,#00,#ffff [TRUE] L0011
       NEW_LINE        
       CALL_VN         R0147 (L02,#17)
L0011: JUMP            L0013
L0012: JE              L02,G00 [FALSE] L0013
       NEW_LINE        
L0013: STORE           G41,#00
       GET_CHILD       L02 -> -(SP) [FALSE] L0014
L0014: PULL            L00
       JZ              L00 [TRUE] L0027
L0015: TEST_ATTR       L00,#0c [TRUE] L0026
       TEST_ATTR       L00,#09 [TRUE] L0026
       JE              L00,G0d [TRUE] L0026
       SET_ATTR        L00,#1a
       GET_PROP_ADDR   L00,#0d -> Gef
       PUSH            Gef
       JZ              (SP)+ [TRUE] L0016
       CALL_VS         R0147 (L00,#0d,#00) -> -(SP)
       JZ              (SP)+ [TRUE] L0016
       CLEAR_ATTR      L00,#1a
       STORE           G41,#01
       JUMP            L0026
L0016: TEST_ATTR       L00,#04 [TRUE] L0017
       TEST_ATTR       L00,#17 [FALSE] L0020
L0017: TEST_ATTR       L00,#07 [FALSE] L0018
       STORE           L06,#06
       JUMP            L0019
L0018: STORE           L06,#11
L0019: JUMP            L0024
L0020: TEST_ATTR       L00,#15 [FALSE] L0023
       TEST_ATTR       L00,#16 [FALSE] L0021
       STORE           L06,#06
       JUMP            L0022
L0021: STORE           L06,#11
L0022: JUMP            L0024
L0023: STORE           L06,#06
L0024: CALL_VS         R0217 (L00,L06) -> -(SP)
       JZ              (SP)+ [TRUE] L0026
       TEST_ATTR       L00,#0a [FALSE] L0025
       JE              L06,#11 [FALSE] L0026
L0025: CLEAR_ATTR      L00,#1a
       NEW_LINE        
       CALL_VN         R0147 (L00,L06)
       STORE           G41,#01
L0026: GET_SIBLING     L00 -> L00 [TRUE] L0015
L0027: GET_PARENT      L02 -> -(SP)
       JZ              (SP)+ [FALSE] L0028
       STORE           L04,#1416
       STORE           L05,S108
       JUMP            L0029
L0028: STORE           L04,#141d
       STORE           L05,S109 OR "central"
L0029: STORE           G40,#01
       CALL_VS         R0141 (L04,L02,#01) -> -(SP)
       JZ              (SP)+ [TRUE] L0030
       PRINT_PADDR     L05
L0030: STORE           G40,#01
       GET_CHILD       L02 -> -(SP) [FALSE] L0031
L0031: PULL            L00
       JZ              L00 [TRUE] L0036
L0032: TEST_ATTR       L00,#0c [FALSE] L0035
       TEST_ATTR       L00,#03 [TRUE] L0033
       TEST_ATTR       L00,#04 [FALSE] L0035
       TEST_ATTR       L00,#06 [TRUE] L0033
       TEST_ATTR       L00,#07 [FALSE] L0035
L0033: GET_CHILD       L00 -> -(SP) [FALSE] L0034
L0034: JZ              (SP)+ [TRUE] L0035
       CALL_VS         R0128 (L00,G0d) -> -(SP)
       JZ              (SP)+ [FALSE] L0035
       CALL_VS         R0141 (#141d,L00) -> -(SP)
       JZ              (SP)+ [TRUE] L0035
       PRINT_PADDR     S110
       STORE           G40,#00
L0035: GET_SIBLING     L00 -> L00 [TRUE] L0032
L0036: JZ              G40 [FALSE] L0037
       NEW_LINE        
L0037: CALL_VS         R0157 (G0d,L02) -> L02
       JUMP            L0009
L0038: STORE           L08,G12
       STORE           G12,#1e
       CALL_1N         R0202
       STORE           G12,L08
       JE              L01,G00 [FALSE] L0039
       SET_ATTR        G00,#0a
L0039: RTRUE           

Routine R0121, 0 locals

       PRINT_RET       "."

Routine R0122, 2 locals

       PRINT           "  "
       STORE           L01,L00
       JL              L01,#00 [FALSE] L0001
       MUL             #fff6,L00 -> L01
L0001: JL              L01,#0a [FALSE] L0002
       PRINT           " "
L0002: JL              L01,#64 [FALSE] L0003
       PRINT           " "
L0003: JL              L01,#03e8 [FALSE] L0004
       PRINT           " "
L0004: PRINT_NUM       L00
       PRINT           " "
       RTRUE           

Routine R0123, 6 locals

       STORE           L02,G12
       JZ              L00 [FALSE] L0001
       STORE           G12,#14
       CALL_1S         R0201 -> L03
       STORE           G12,L02
       JZ              L03 [FALSE] RTRUE
L0001: JE              G22,G0d [FALSE] L0002
       CALL_2N         G5d (S026)
       RTRUE           
L0002: TEST_ATTR       G22,#0e [FALSE] L0003
       CALL_2N         G5d (#05)
       RTRUE           
L0003: CALL_VS         R0129 (G0d,G22) -> L04
       JZ              L04 [FALSE] L0004
       CALL_2S         R0162 (G22) -> L01
       JZ              L01 [TRUE] L0004
       CALL_VS         R0129 (G0d,L01) -> L04
L0004: JIN             G22,G0d [FALSE] L0005
       CALL_2N         G5d (#7f)
       RTRUE           
L0005: CALL_VS         R0161 (G22,#00,#01) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       CALL_VS         R0128 (G22,G0d) -> -(SP)
       JZ              (SP)+ [TRUE] L0006
       CALL_VN         G5d (#06,G22)
       RTRUE           
L0006: GET_PARENT      G22 -> L01
       JZ              L01 [TRUE] L0008
       JE              L01,L04 [TRUE] L0008
       TEST_ATTR       L01,#04 [TRUE] L0007
       TEST_ATTR       L01,#03 [FALSE] L0008
L0007: STORE           L05,L01
       STORE           G12,#1002
       CALL_VS         R0146 (L01,#0e) -> L03
       STORE           G12,L02
       JZ              L03 [FALSE] RTRUE
L0008: TEST_ATTR       G22,#0c [FALSE] L0009
       CALL_2N         G5d (#89)
       RTRUE           
L0009: TEST_ATTR       G22,#0d [FALSE] L0010
       CALL_2N         G5d (#8a)
       RTRUE           
L0010: CALL_2S         R0136 (G0d) -> -(SP)
       JZ              (SP)+ [TRUE] L0011
       CALL_2N         G5d (S027)
       RTRUE           
L0011: INSERT_OBJ      G22,G0d
       CLEAR_ATTR      G22,#09
       STORE           G16,#01
       JZ              L05 [TRUE] L0012
       STORE           G12,#1002
       CALL_VS         R0146 (L05,#0f) -> L01
       STORE           G12,L02
       JZ              L01 [TRUE] L0012
       RET             #02
L0012: JZ              L00 [FALSE] L0013
       STORE           G12,#14
       CALL_1S         R0202 -> L03
       STORE           G12,L02
       JZ              L03 [TRUE] L0013
       RET             #02
L0013: RFALSE          

Routine R0124, 2 locals

       GET_PROP        L00,#10 -> Gef
       STORE           L01,Gef
       JZ              L01 [FALSE] L0002
       GET_PROP_ADDR   L00,#09 -> Gef
       PUSH            Gef
       LOADW           (SP)+,#00 -> -(SP)
       JE              G03,(SP)+ [FALSE] L0001
       STORE           L01,#01
L0001: GET_PROP_ADDR   L00,#09 -> Gef
       PUSH            Gef
       LOADW           (SP)+,L01 -> -(SP)
       RET_POPPED      
L0002: CALL_VS         R0127 (L01,G3f) -> -(SP)
       JG              (SP)+,#00 [FALSE] L0003
       CALL_VS         R0215 (L00,#10) -> -(SP)
       RET_POPPED      
L0003: RET             L01

Routine R0125, 6 locals

       GET_PARENT      G0d -> -(SP)
       JE              (SP)+,G03 [TRUE] L0003
       GET_PARENT      G0d -> L03
       STORE           L05,G00
       CALL_VS         R0146 (L03,#0e) -> L04
       JE              L04,#03 [TRUE] L0001
       STORE           G00,L05
L0001: JZ              L04 [FALSE] L0002
       GET_PARENT      G0d -> -(SP)
       CALL_VN         G5d (#18,(SP)+)
       RTRUE           
L0002: JE              L04,#02,#03 [TRUE] RTRUE
L0003: CALL_VS         R0219 (G03,L00) -> -(SP)
       JZ              (SP)+ [TRUE] L0004
       GET_PROP        G03,L00 -> L01
L0004: CALL_VS         R0220 (L01,#04) -> -(SP)
       JZ              (SP)+ [TRUE] L0005
       PRINT_PADDR     L01
       NEW_LINE        
       RTRUE           
L0005: CALL_VS         R0127 (L01,G3f) -> -(SP)
       JG              (SP)+,#00 [FALSE] L0006
       CALL_VS         R0215 (G03,L00) -> L01
       JE              L01,#01 [TRUE] RTRUE
L0006: JZ              L01 [TRUE] L0009
       TEST_ATTR       L01,#17 [FALSE] L0009
       TEST_ATTR       L01,#09 [FALSE] L0007
       STORE           L01,#00
       JUMP            L0009
L0007: TEST_ATTR       L01,#07 [TRUE] L0008
       CALL_VN         G5d (#2c,L01)
       RTRUE           
L0008: CALL_2S         R0124 (L01) -> L01
       JE              L01,#01 [TRUE] RTRUE
L0009: JZ              L01 [FALSE] L0011
       CALL_VS         R0219 (G03,#08) -> -(SP)
       JZ              (SP)+ [TRUE] L0010
       CALL_VN         R0147 (G03,#08)
       RTRUE           
L0010: RET             S042 OR "archivist"
L0011: STORE           G12,#1006
       CALL_VS         R0146 (L01,#0e) -> -(SP)
       JZ              (SP)+ [TRUE] L0012
       STORE           G12,#18
       RTRUE           
L0012: STORE           G12,#18
       JE              L04,#01 [FALSE] L0013
       INSERT_OBJ      L03,L01
       STORE           L01,L03
L0013: STORE           L02,G00
       CALL_VN         R0150 (L01,#01)
       JZ              G32 [FALSE] RTRUE
       STORE           G12,#1006
       CALL_VS         R0146 (L02,#0f) -> -(SP)
       JZ              (SP)+ [TRUE] L0014
       STORE           G12,#18
       RTRUE           
L0014: STORE           G12,#18
       CALL_1S         R0202 -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       JZ              G3a [FALSE] RTRUE
       CALL_1N         R0120
       RTRUE           

Routine R0126, 1 local

       STORE           Gef,L00
       JE              Gef,"superbrie" [FALSE] L0001
       PRINT           "superbrief"
       RTRUE           
L0001: JE              Gef,"g" [FALSE] L0002
       PRINT           "again"
       RTRUE           
L0002: JE              Gef,"i" [FALSE] L0003
       PRINT_ADDR      "inventory"
       RTRUE           
L0003: JE              Gef,"l" [FALSE] L0004
       PRINT           "look"
       RTRUE           
L0004: JE              Gef,"q" [FALSE] L0005
       PRINT           "quit"
       RTRUE           
L0005: JE              Gef,"x" [FALSE] L0006
       PRINT_ADDR      "examine"
       RTRUE           
L0006: JE              Gef,"z" [FALSE] L0007
       PRINT           "wait"
       RTRUE           
L0007: JE              Gef,"transcrip" [FALSE] L0008
       PRINT           "transcript"
       RTRUE           
L0008: PRINT_ADDR      L00
       RTRUE           

Routine R0127, 4 locals

       JE              L00,L01 [FALSE] L0001
       RFALSE          
L0001: JL              L00,#00 [FALSE] L0002
       JL              L01,#00 [TRUE] L0002
       RTRUE           
L0002: JL              L00,#00 [TRUE] L0003
       JL              L01,#00 [FALSE] L0003
       RET             #ffff
L0003: AND             L00,#7fff -> L02
       AND             L01,#7fff -> L03
       JG              L02,L03 [FALSE] L0004
       RTRUE           
L0004: RET             #ffff

Routine R0128, 2 locals

       JZ              L01 [TRUE] RFALSE
L0001: JE              L00,L01 [TRUE] RTRUE
       GET_PARENT      L01 -> L01
       JZ              L01 [FALSE] L0001
       RFALSE          

Routine R0129, 4 locals

       STORE           L02,L00
L0001: JZ              L02 [TRUE] L0005
       STORE           L03,L01
L0002: JZ              L03 [TRUE] L0004
       JE              L03,L02 [FALSE] L0003
       RET             L02
L0003: GET_PARENT      L03 -> L03
       JUMP            L0002
L0004: GET_PARENT      L02 -> L02
       JUMP            L0001
L0005: RFALSE          

Routine R0130, 1 local

       JE              G4d,L00 [TRUE] L0001
       SPLIT_WINDOW    L00
       STORE           G4d,L00
L0001: RTRUE           

Routine R0131, 2 locals

       JZ              G4f [FALSE] L0002
       SET_WINDOW      #01
       JZ              G50 [TRUE] L0001
       JG              G53,#01 [FALSE] L0001
       SET_COLOUR      G53,G51
L0001: SET_TEXT_STYLE  REVERSE
L0002: JZ              L00 [FALSE] L0003
       STORE           L00,#01
       STORE           L01,#01
L0003: SET_CURSOR      L00,L01
       STORE           G4f,#01
       RTRUE           

Routine R0132, 0 locals

       JZ              G4f [TRUE] L0002
       JZ              G50 [TRUE] L0001
       JG              G53,#01 [FALSE] L0001
       SET_COLOUR      G52,G51
L0001: SET_TEXT_STYLE  ROMAN
       SET_WINDOW      #00
L0002: STORE           G4f,#00
       RTRUE           

Routine R0133, 0 locals

       RTRUE           

Routine R0134, 1 local

       JZ              G00 [TRUE] L0001
       GET_PARENT      G0d -> -(SP)
       JZ              (SP)+ [FALSE] L0002
L0001: RTRUE           
L0002: CALL_2N         R0130 (G4e)
       CALL_VN         R0131 (#01,#01)
       CALL_2N         R0145 (G4c)
       CALL_VN         R0131 (#01,#01)
       JG              G4c,#42 [FALSE] L0003
       PRINT_CHAR      ' '
L0003: CALL_2S         R0157 (G0d) -> L00
       JE              L00,G00 [FALSE] L0004
       CALL_2N         R0137 (G00)
       JUMP            L0005
L0004: CALL_2N         R0207 (L00)
L0005: CALL_1N         R0133
       CALL_1N         R0132
       RTRUE           

Routine R0135, 1 local

       CALL_VS         R0219 (L00,#15) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       CALL_VS         R0146 (L00,#15) -> -(SP)
       RET_POPPED      
L0001: RET             #64

Routine R0136, 3 locals

       JE              L00,G0d [FALSE] L0005
       GET_CHILD       L00 -> -(SP) [FALSE] L0001
L0001: PULL            L01
       JZ              L01 [TRUE] L0004
L0002: TEST_ATTR       L01,#10 [TRUE] L0003
       INC             L02
L0003: GET_SIBLING     L01 -> L01 [TRUE] L0002
L0004: JUMP            L0008
L0005: STORE           Gef,#00
       GET_CHILD       L00 -> -(SP) [FALSE] L0007
L0006: INC             Gef
       GET_SIBLING     (SP)+ -> -(SP) [TRUE] L0006
L0007: PULL            Gee
       STORE           L02,Gef
L0008: CALL_2S         R0135 (L00) -> -(SP)
       JL              L02,(SP)+ [TRUE] RFALSE
       RTRUE           

Routine R0137, 1 local

       JZ              L00 [FALSE] L0001
       PRINT           "nothing"
       RTRUE           
L0001: CALL_VS         R0284 (L00) -> -(SP)
       PULL            Gef
       JE              Gef,#03 [FALSE] L0002
       PRINT           "<routine "
       PRINT_NUM       L00
       PRINT           ">"
       RTRUE           
L0002: JE              Gef,#04 [FALSE] L0003
       PRINT           "<string ""
       PRINT_PADDR     L00
       PRINT           "">"
       RTRUE           
L0003: JE              Gef,#00 [FALSE] L0004
       PRINT           "<illegal object number "
       PRINT_NUM       L00
       PRINT           ">"
       RTRUE           
L0004: GET_PROP        L00,#0c -> Gef
       PUSH            Gef
       JZ              (SP)+ [TRUE] L0005
       CALL_VS         R0147 (L00,#0c,#01) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
L0005: PRINT_OBJ       L00
       RTRUE           

Routine R0138, 2 locals

       TEST_ATTR       L00,#0b [TRUE] L0005
       JE              L01,#01 [FALSE] L0001
       PRINT           "The "
       JUMP            L0005
L0001: JE              L01,#02 [FALSE] L0002
       PRINT           "the "
       JUMP            L0005
L0002: JE              L01,#03 [FALSE] L0005
       GET_PROP_ADDR   L00,#08 -> Gef
       PUSH            Gef
       JZ              (SP)+ [TRUE] L0003
       CALL_VN         R0147 (L00,#08,#01)
       PRINT           " "
       JUMP            L0005
L0003: TEST_ATTR       L00,#11 [FALSE] L0004
       PRINT           "some "
       JUMP            L0005
L0004: PRINT           "a "
L0005: CALL_2N         R0137 (L00)
       RTRUE           

Routine R0139, 1 local

       JE              L00,#02 [FALSE] L0001
       RET             S008 OR "aft"
L0001: RET             S007

Routine R0140, 4 locals

       AND             G5e,#04 -> L02
       TEST_ATTR       L00,#10 [FALSE] L0001
       JE              G12,#19 [FALSE] L0001
       PRINT           " (worn)"
L0001: TEST_ATTR       L00,#04 [FALSE] L0020
       GET_CHILD       L00 -> -(SP) [FALSE] L0002
L0002: CALL_VS         R0142 (#01,(SP)+) -> L01
       TEST_ATTR       L00,#07 [TRUE] L0004
       TEST_ATTR       L00,#06 [TRUE] L0004
       PRINT           " (which is closed)"
       JZ              L02 [TRUE] L0003
       NEW_LINE        
L0003: JUMP            L0019
L0004: TEST_ATTR       L00,#08 [FALSE] L0007
       TEST_ATTR       L00,#06 [TRUE] L0005
       JZ              L01 [FALSE] L0007
L0005: PRINT           " (which is "
       TEST_ATTR       L00,#07 [FALSE] L0006
       PRINT           "open"
       STORE           L03,#01
       JUMP            L0007
L0006: PRINT           "closed"
       STORE           L03,#02
L0007: JZ              L01 [FALSE] L0012
       PRINT_CHAR      ' '
       STORE           Gef,L03
       JE              Gef,#00 [FALSE] L0008
       PRINT           "(which is"
       JUMP            L0010
L0008: JE              Gef,#01 [FALSE] L0009
       PRINT           "but"
       JUMP            L0010
L0009: JE              Gef,#02 [FALSE] L0010
       PRINT           "and"
L0010: PRINT           " empty)"
       JZ              L02 [TRUE] L0011
       NEW_LINE        
L0011: JUMP            L0019
L0012: JZ              L02 [FALSE] L0015
       JZ              L03 [TRUE] L0013
       PRINT           " and"
       JUMP            L0014
L0013: PRINT           " (which"
L0014: PRINT           " contains "
       JUMP            L0017
L0015: JZ              L03 [TRUE] L0016
       PRINT_CHAR      ')'
L0016: NEW_LINE        
L0017: AND             G5e,#fffd -> G5e
       GET_CHILD       L00 -> -(SP) [FALSE] L0018
L0018: CALL_VN         R0142 (#00,(SP)+)
       JZ              L02 [FALSE] L0019
       PRINT_CHAR      ')'
L0019: JUMP            L0025
L0020: TEST_ATTR       L00,#03 [FALSE] L0024
       JZ              L02 [TRUE] L0022
       NEW_LINE        
       GET_CHILD       L00 -> -(SP) [FALSE] L0021
L0021: CALL_VN         R0142 (#00,(SP)+)
       JUMP            L0023
L0022: CALL_VS         R0141 (S112,L00,#02) -> -(SP)
       JZ              (SP)+ [TRUE] L0023
       PRINT_CHAR      ')'
L0023: JUMP            L0025
L0024: JZ              L02 [TRUE] L0025
       NEW_LINE        
L0025: RTRUE           

Routine R0141, 8 locals

       STORE           L03,G5e
       STORE           L05,G62
       STORE           L06,G60
       STORE           L07,G43
       STORE           G5e,L02
       SUB             G5f,#01 -> G62
       MUL             #02,G62 -> -(SP)
       ADD             #02,(SP)+ -> G60
       GET_CHILD       L01 -> -(SP) [FALSE] L0001
L0001: CALL_VS         R0142 (L00,(SP)+) -> L04
       STORE           G5e,L03
       STORE           G62,L05
       STORE           G60,L06
       STORE           G43,L07
       RET             L04

Routine R0142, 8 locals

       JZ              L01 [TRUE] RFALSE
       GET_PARENT      L01 -> -(SP)
       GET_CHILD       (SP)+ -> -(SP) [FALSE] L0001
L0001: JE              L01,(SP)+ [FALSE] L0002
       INC             G62
L0002: JE              L00,#01 [TRUE] L0003
       ADD             G60,#02 -> G60
L0003: JZ              L02 [FALSE] L0004
       STORE           L02,"cube"
L0004: STORE           L03,L01
       JUMP            L0006
L0005: GET_SIBLING     L03 -> L03 [FALSE] L0006
L0006: JZ              L03 [TRUE] L0018
       PUSH            L02
       DEC             L02
       JZ              (SP)+ [TRUE] L0018
       CALL_2S         R0143 (L03) -> L06
       JE              L00,#01 [FALSE] L0010
       JZ              L06 [TRUE] L0009
       JZ              L07 [FALSE] L0007
       TEST_ATTR       L03,#11 [FALSE] L0008
L0007: DEC             G62
       RET             #02
L0008: STORE           L07,#01
L0009: JUMP            L0005
L0010: JZ              L06 [TRUE] L0017
       JZ              L05 [FALSE] L0014
       CALL_VS         R0220 (L00,#04) -> -(SP)
       JZ              (SP)+ [TRUE] L0011
       PRINT_PADDR     L00
       JUMP            L0012
L0011: JZ              L00 [TRUE] L0012
       GET_PARENT      L01 -> -(SP)
       CALL_2N         L00 ((SP)+)
L0012: AND             G5e,#02 -> -(SP)
       JZ              (SP)+ [TRUE] L0013
       CALL_VS         R0142 (#01,L01) -> -(SP)
       CALL_2S         R0139 ((SP)+) -> -(SP)
       PRINT_PADDR     (SP)+
L0013: JZ              L00 [TRUE] L0014
       AND             G5e,#04 -> -(SP)
       JZ              (SP)+ [TRUE] L0014
       NEW_LINE        
L0014: JZ              L05 [TRUE] L0016
       JZ              L04 [TRUE] L0015
       AND             G5e,#04 -> -(SP)
       JZ              (SP)+ [FALSE] L0015
       PRINT           ", "
L0015: CALL_2N         R0144 (L05)
       STORE           L04,#01
L0016: STORE           L05,L03
L0017: JUMP            L0005
L0018: JE              L00,#01 [FALSE] L0019
       DEC             G62
       RET             L07
L0019: JZ              L05 [TRUE] L0021
       JZ              L04 [TRUE] L0020
       AND             G5e,#04 -> -(SP)
       JZ              (SP)+ [FALSE] L0020
       PRINT           " and "
L0020: CALL_2N         R0144 (L05)
       STORE           L04,#01
L0021: DEC             G62
       SUB             G60,#02 -> G60
       RET             L04

Routine R0143, 1 local

       GET_PARENT      G0d -> -(SP)
       JE              L00,(SP)+ [TRUE] L0002
       JG              G62,#00 [TRUE] L0001
       AND             G5e,#01 -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       TEST_ATTR       L00,#1a [FALSE] L0002
L0001: JE              G12,#19 [TRUE] RTRUE
       TEST_ATTR       L00,#09 [TRUE] L0002
       TEST_ATTR       L00,#0c [FALSE] RTRUE
L0002: RFALSE          

Routine R0144, 3 locals

       JZ              G61 [TRUE] L0001
       STORE           G61,#00
       JUMP            L0002
L0001: AND             G5e,#04 -> -(SP)
       JZ              (SP)+ [TRUE] L0002
       CALL_2N         R0145 (G60)
L0002: GET_PROP        L00,#16 -> Gef
       PUSH            Gef
       JZ              (SP)+ [TRUE] L0003
       STORE           L01,#01
       STORE           G43,#01
       CALL_VS         R0147 (L00,#16,#01) -> L02
L0003: JZ              L02 [FALSE] L0005
       CALL_VN         R0138 (L00,#03)
       JZ              L01 [TRUE] L0004
       STORE           G43,#02
       CALL_VS         R0147 (L00,#16,#01) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
L0004: CALL_2N         R0140 (L00)
       JUMP            L0006
L0005: AND             G5e,#04 -> -(SP)
       JZ              (SP)+ [TRUE] L0006
       NEW_LINE        
L0006: RTRUE           

Routine R0145, 1 local

L0001: JG              L00,#0a [FALSE] L0002
       PRINT_TABLE     #37a9,#0a,#01
       SUB             L00,#0a -> L00
       JUMP            L0001
L0002: JG              L00,#00 [FALSE] RTRUE
       PRINT_TABLE     #37a9,L00,#01
       RTRUE           

Routine R0146, 3 locals

       PUSH            Ge9
       JZ              L02 [FALSE] L0001
       STORE           Ge9,G12
       JUMP            L0002
L0001: STORE           Ge9,L02
L0002: JL              L01,#40 [TRUE] L0003
       CALL_VS         R0217 (L00,L01) -> -(SP)
       JZ              (SP)+ [TRUE] L0004
L0003: CALL_VS         R0215 (L00,L01) -> L02
L0004: PULL            Ge9
       RET             L02

Routine R0147, 4 locals

       CALL_VS         R0218 (L00,L01) -> -(SP)
       JG              (SP)+,#02 [TRUE] L0001
       CALL_VS         R0214 (L00,L01) -> L03
       CALL_VS         R0220 (L03,#03) -> -(SP)
       JZ              (SP)+ [TRUE] L0002
L0001: CALL_VS         R0146 (L00,L01) -> -(SP)
       RET_POPPED      
L0002: CALL_VS         R0220 (L03,#04) -> -(SP)
       JZ              (SP)+ [TRUE] L0003
       PRINT_PADDR     L03
       JZ              L02 [FALSE] L0003
       NEW_LINE        
L0003: RTRUE           

Routine R0148, 5 locals

L0001: LOADW           #1894,L00 -> L04
       JZ              L04 [TRUE] L0015
       CALL_VS         R0128 (G0d,L04) -> -(SP)
       JZ              (SP)+ [TRUE] L0002
       JUMP            L0014
L0002: GET_PROP_ADDR   L04,#09 -> Gef
       JZ              Gef [TRUE] L0003
       GET_PROP_LEN    Gef -> Gef
L0003: STORE           L03,Gef
       TEST_ATTR       L04,#01 [FALSE] L0004
       JUMP            L0012
L0004: JE              L03,#02 [FALSE] L0006
       GET_PROP        L04,#09 -> Gef
       PUSH            Gef
       CALL_VS         R0127 ((SP)+,G3f) -> -(SP)
       JG              (SP)+,#00 [FALSE] L0006
       CALL_VS         R0146 (L04,#09) -> -(SP)
       JZ              (SP)+ [TRUE] L0005
       JUMP            L0013
L0005: JUMP            L0012
L0006: GET_PROP_ADDR   L04,#09 -> Gef
       STORE           L01,Gef
       DIV             L03,#02 -> L03
       SUB             L03,#01 -> L03
L0007: LOADW           L01,L03 -> L02
       JIN             L02,"Class" [FALSE] L0009
       CALL_VS         R0220 (G00,L02) -> -(SP)
       JZ              (SP)+ [TRUE] L0008
       JUMP            L0013
L0008: JUMP            L0011
L0009: JE              L02,G00 [TRUE] L0010
       JIN             L02,G00 [FALSE] L0011
L0010: JUMP            L0013
L0011: DEC_CHK         L03,#00 [FALSE] L0007
L0012: REMOVE_OBJ      L04
       JUMP            L0014
L0013: JIN             L04,G00 [TRUE] L0014
       INSERT_OBJ      L04,G00
L0014: INC             L00
       JUMP            L0001
L0015: STORE           G34,#01
       RTRUE           

Routine R0149, 0 locals

       CALL_2S         R0157 (G0d) -> -(SP)
       RET_POPPED      

Routine R0150, 8 locals

       STORE           L02,G00
       STORE           L03,G03
       CALL_1S         R0149 -> L07
       INSERT_OBJ      G0d,L00
       CALL_2S         R0151 (L00) -> G03
       STORE           G00,G03
       CALL_1N         R0148
L0001: CALL_1S         R0149 -> L06
       JE              L06,G00 [FALSE] L0002
       JE              L06,L07 [TRUE] L0002
       CALL_VS         R0219 (G00,#06) -> -(SP)
       JZ              (SP)+ [TRUE] L0002
       GET_PARENT      G0d -> L05
       CALL_VN         R0215 (G00,#06)
       GET_PARENT      G0d -> -(SP)
       JE              (SP)+,L05 [TRUE] L0002
       JUMP            L0001
L0002: STORE           L04,G0c
       JZ              L01 [FALSE] L0003
       STORE           G0c,#02
L0003: JE              L01,#00,#02 [FALSE] L0004
       JZ              G32 [FALSE] L0004
       CALL_1N         R0120
L0004: STORE           G0c,L04
       RTRUE           

Routine R0151, 2 locals

L0001: GET_PARENT      L00 -> L01
       JZ              L01 [FALSE] L0002
       RET             L00
L0002: STORE           L00,L01
       JUMP            L0001

Routine R0152, 6 locals

       GET_PROP_ADDR   L00,#1a -> Gef
       STORE           L04,Gef
       JZ              L04 [TRUE] L0007
       LOADW           L04,#00 -> -(SP)
       CALL_VS         R0127 ((SP)+,G3f) -> -(SP)
       JG              (SP)+,#00 [FALSE] L0001
       CALL_VN         R0146 (L00,#1a)
       JUMP            L0007
L0001: GET_PROP_ADDR   L00,#1a -> Gef
       JZ              Gef [TRUE] L0002
       GET_PROP_LEN    Gef -> Gef
L0002: STORE           L03,Gef
       LOG_SHIFT       L03,#ffff -> L03
       JZ              L03 [TRUE] RTRUE
       DEC             L03
L0003: LOADW           L04,L02 -> L01
       JZ              L01 [TRUE] L0006
       STORE           L05,G35
       CALL_2N         R0154 (L01)
       JG              G35,L05 [FALSE] L0004
       TEST_ATTR       L01,#1b [FALSE] L0004
       CALL_2N         R0152 (L01)
L0004: GET_CHILD       L01 -> -(SP) [FALSE] L0005
L0005: CALL_2N         R0153 ((SP)+)
L0006: INC_CHK         L02,L03 [FALSE] L0003
L0007: RTRUE           

Routine R0153, 4 locals

L0001: JZ              L00 [TRUE] L0008
       JL              G35,#32 [TRUE] L0002
       RTRUE           
L0002: CALL_VN         R0154 (L00,L01)
       JZ              L02 [FALSE] L0003
       TEST_ATTR       L00,#1b [FALSE] L0003
       CALL_2N         R0152 (L00)
L0003: GET_CHILD       L00 -> L03 [FALSE] L0004
L0004: JZ              L03 [TRUE] L0006
       TEST_ATTR       L00,#03 [TRUE] L0005
       TEST_ATTR       L00,#06 [TRUE] L0005
       TEST_ATTR       L00,#04 [FALSE] L0006
       TEST_ATTR       L00,#07 [FALSE] L0006
L0005: CALL_VN         R0153 (L03,L01,L02)
L0006: GET_SIBLING     L00 -> L00 [FALSE] L0007
L0007: JUMP            L0001
L0008: RTRUE           

Routine R0154, 3 locals

       JZ              L01 [FALSE] L0001
       SCAN_TABLE      L00,#178c,G35 -> L02 [FALSE] L0001
       RTRUE           
L0001: JL              G35,#32 [TRUE] L0002
       RTRUE           
L0002: STOREW          #178c,G35,L00
       INC             G35
       RTRUE           

Routine R0155, 10 locals

       STORE           G33,L01
       JE              G59,L00 [FALSE] L0003
       JZ              G34 [FALSE] L0003
       JE              G39,#02 [TRUE] L0001
       JZ              G5a [TRUE] L0002
L0001: JE              G39,#02 [FALSE] L0003
       JE              G5a,G38 [FALSE] L0003
L0002: RTRUE           
L0003: STORE           G34,#00
       STORE           L06,G35
       STORE           G35,#00
       JE              G39,#02 [FALSE] L0005
       STORE           G5a,G38
       CALL_1S         G38 -> -(SP)
       JZ              (SP)+ [TRUE] L0004
       JUMP            L0013
L0004: JUMP            L0006
L0005: STORE           G5a,#00
       STORE           L08,#01
L0006: CALL_VN         R0154 (#05,L08)
       CALL_2S         R0157 (L00) -> L02
       GET_PARENT      L02 -> -(SP)
       JZ              (SP)+ [TRUE] L0007
       CALL_VN         R0154 (L02,L08)
L0007: STORE           L09,L02
       TEST_ATTR       L00,#06 [TRUE] L0009
       GET_CHILD       L00 -> -(SP) [FALSE] L0008
L0008: CALL_VN         R0153 ((SP)+,L08,#01)
L0009: GET_CHILD       L09 -> -(SP) [FALSE] L0010
L0010: CALL_VN         R0153 ((SP)+,L08,#01)
       STORE           L04,G35
       DEC_CHK         L04,L07 [TRUE] L0013
       STORE           L03,L07
L0011: LOADW           #178c,L03 -> L05
       TEST_ATTR       L05,#1b [FALSE] L0012
       CALL_2N         R0152 (L05)
L0012: INC_CHK         L03,L04 [FALSE] L0011
L0013: STORE           G37,#00
       STORE           G59,L00
       RTRUE           

Routine R0156, 3 locals

       CALL_VN         R0155 (L00,L01)
       JE              G37,L00 [TRUE] L0001
       LOG_SHIFT       G35,#01 -> L02
       COPY_TABLE      #178c,#17f0,L02
       STORE           G37,L00
L0001: STORE           G36,G35
       RET             G36

Routine R0157, 3 locals

       JUMP            L0002
L0001: STORE           L00,L02
L0002: GET_PARENT      L00 -> L02
       JE              L02,#00,L01 [TRUE] L0003
       TEST_ATTR       L00,#04 [FALSE] L0004
       TEST_ATTR       L00,#06 [TRUE] L0004
       TEST_ATTR       L00,#07 [TRUE] L0004
L0003: RET             L00
L0004: JUMP            L0001

Routine R0158, 2 locals

       JUMP            L0002
L0001: STORE           L00,L01
L0002: GET_PARENT      L00 -> L01
       JZ              L01 [TRUE] L0003
       TEST_ATTR       L00,#04 [FALSE] L0004
       TEST_ATTR       L00,#07 [TRUE] L0004
L0003: RET             L00
L0004: JUMP            L0001

Routine R0159, 3 locals

       JZ              L01 [FALSE] L0001
       STORE           L01,G0d
L0001: CALL_VN         R0155 (L01,#06)
       SCAN_TABLE      L00,#178c,G35 -> L02 [FALSE] L0002
       RTRUE           
L0002: RFALSE          

Routine R0160, 3 locals

L0001: JE              L01,L00 [TRUE] L0007
       JZ              G57 [TRUE] L0004
       TEST_ATTR       L01,#04 [TRUE] L0004
       TEST_ATTR       L01,#03 [TRUE] L0004
       JZ              L02 [FALSE] RTRUE
       TEST_ATTR       L01,#0e [FALSE] L0002
       CALL_VN         G5d (#66,G58,L01)
       RTRUE           
L0002: TEST_ATTR       L01,#06 [FALSE] L0003
       CALL_VN         G5d (#67,G58,L01)
       RTRUE           
L0003: CALL_2N         G5d (#68)
       RTRUE           
L0004: TEST_ATTR       L01,#04 [FALSE] L0006
       TEST_ATTR       L01,#07 [TRUE] L0006
       JZ              L02 [FALSE] L0005
       CALL_VN         G5d (#43,L01)
L0005: RTRUE           
L0006: GET_PARENT      L01 -> L01
       JUMP            L0001
L0007: RFALSE          

Routine R0161, 5 locals

       STORE           G58,L00
       STORE           G57,L02
       CALL_VN         R0155 (G0d,#06)
       CALL_VS         R0129 (G0d,L00) -> L03
       JZ              L03 [FALSE] L0004
       STORE           L03,L00
L0001: JZ              L03 [TRUE] L0002
       CALL_2S         R0162 (L03) -> L04
       JZ              L04 [FALSE] L0002
       GET_PARENT      L03 -> L03
       JUMP            L0001
L0002: JZ              L04 [TRUE] L0003
       CALL_VS         R0161 (L04,L01,L02) -> -(SP)
       JZ              (SP)+ [TRUE] L0003
       RTRUE           
L0003: JUMP            L0006
L0004: JE              G0d,L03 [TRUE] L0006
       STORE           G57,#00
       GET_PARENT      G0d -> -(SP)
       CALL_VS         R0160 (L03,(SP)+,L01) -> -(SP)
       JZ              (SP)+ [TRUE] L0005
       RTRUE           
L0005: STORE           G57,L02
L0006: JE              L00,L03 [TRUE] L0007
       GET_PARENT      L00 -> -(SP)
       CALL_VS         R0160 (L03,(SP)+,L01) -> -(SP)
       JZ              (SP)+ [TRUE] L0007
       RTRUE           
L0007: RFALSE          

Routine R0162, 5 locals

       STORE           L01,#01
L0001: TEST_ATTR       L01,#1b [FALSE] L0004
       GET_PROP_ADDR   L01,#1a -> Gef
       PUSH            Gef
       JZ              (SP)+ [TRUE] L0004
       GET_PROP_ADDR   L01,#1a -> Gef
       STORE           L03,Gef
       LOADW           L03,#00 -> -(SP)
       CALL_VS         R0220 ((SP)+,#03) -> -(SP)
       JZ              (SP)+ [TRUE] L0002
       JUMP            L0004
L0002: GET_PROP_ADDR   L01,#1a -> Gef
       JZ              Gef [TRUE] L0003
       GET_PROP_LEN    Gef -> Gef
L0003: STORE           L02,Gef
       LOG_SHIFT       L02,#ffff -> L02
       SCAN_TABLE      L00,L03,L02 -> L04 [FALSE] L0004
       RET             L01
L0004: INC             L01
       JG              L01,#0068 [TRUE] L0005
       JUMP            L0001
L0005: RFALSE          

Routine R0163, 1 local

L0001: CALL_VN         R0170 (#01,#01)
       LOADB           #197f,#01 -> L00
       STOREB          #197f,#01,#00
       JE              L00,#01 [FALSE] L0002
       LOADW           #197f,#01 -> L00
       JE              L00,"yes","y" [TRUE] RTRUE
       JE              L00,"no","n" [TRUE] RFALSE
L0002: CALL_2N         G5d (#78)
       JUMP            L0001

Routine R0164, 3 locals

       JG              G20,#00 [FALSE] L0001
       JL              G20,#31 [FALSE] L0001
       SUB             G20,#01 -> -(SP)
       TEST_ATTR       L00,(SP)+ [TRUE] RTRUE
       RFALSE          
L0001: STORE           L01,G22
       STORE           G22,L00
       CALL_1S         G20 -> L02
       STORE           G22,L01
       RET             L02

Routine R0165, 7 locals

       ADD             L00,#03 -> L01
       JUMP            L0002
L0001: ADD             L01,#03 -> L01
L0002: LOADB           L01,#00 -> -(SP)
       JE              (SP)+,#0f [TRUE] L0006
       LOADB           L01,#00 -> L02
       JG              L02,#09 [FALSE] L0003
       STORE           L04,L01
       JUMP            L0005
L0003: INC             L06
       JZ              L03 [FALSE] L0004
       STORE           L03,L01
       JUMP            L0005
L0004: STORE           L05,L01
L0005: JUMP            L0001
L0006: JZ              L03 [TRUE] L0007
       JZ              G22 [FALSE] L0007
       LOADB           L03,#02 -> -(SP)
       CALL_VS         R0191 ((SP)+,#00,#01) -> G22
L0007: JZ              L05 [TRUE] L0008
       JZ              G23 [FALSE] L0008
       LOADB           L05,#02 -> -(SP)
       CALL_VS         R0191 ((SP)+,L04,#02) -> G23
L0008: JZ              L03 [TRUE] L0011
       JZ              G22 [TRUE] L0011
       JE              L06,#01 [FALSE] L0009
       RTRUE           
L0009: JE              L06,#02 [FALSE] L0010
       JZ              L05 [TRUE] L0010
       JZ              G23 [TRUE] L0010
       RTRUE           
L0010: JUMP            L0012
L0011: JE              L06,#02 [FALSE] L0012
       JZ              L05 [TRUE] L0012
       JZ              G23 [TRUE] L0012
       LOADB           L03,#02 -> -(SP)
       JE              (SP)+,#09 [FALSE] L0012
       RTRUE           
L0012: CALL_VN         R0166 (L00,L03)
       RFALSE          

Routine R0166, 6 locals

       CALL_2N         G5d (#7d)
       CALL_2N         R0126 (G18)
       ADD             L00,#03 -> L03
       JUMP            L0002
L0001: ADD             L03,#03 -> L03
L0002: LOADB           L03,#00 -> -(SP)
       JE              (SP)+,#0f [TRUE] L0017
       LOADB           L03,#00 -> -(SP)
       AND             (SP)+,#0f -> L04
       ADD             L03,#01 -> -(SP)
       LOADW           (SP)+,#00 -> L05
       LOADB           L03,#00 -> -(SP)
       JE              (SP)+,#62,#42 [FALSE] L0003
       STORE           L02,#00
L0003: JE              L04,#02 [FALSE] L0005
       JZ              L02 [FALSE] L0004
       PRINT           " "
       PRINT_ADDR      L05
L0004: INC             L02
       JUMP            L0016
L0005: PRINT           " "
       JZ              L01 [FALSE] L0011
       JE              L04,#03 [FALSE] L0006
       JE              L05,#1133 [FALSE] L0006
       PRINT_PADDR     S006
       JUMP            L0010
L0006: JZ              G23 [FALSE] L0009
       JE              L04,#01 [FALSE] L0007
       LOADB           L03,#02 -> -(SP)
       JE              (SP)+,#06 [FALSE] L0007
       PRINT_PADDR     S005
       JUMP            L0008
L0007: PRINT_PADDR     S004
L0008: JUMP            L0010
L0009: CALL_2N         R0137 (G23)
L0010: JUMP            L0016
L0011: JZ              G22 [TRUE] L0014
       CALL_VS         R0284 (G22) -> -(SP)
       JE              (SP)+,#03 [TRUE] L0014
       STORE           L01,#00
       JZ              G2d [TRUE] L0012
       PRINT           "all"
       JUMP            L0013
L0012: CALL_2N         R0137 (G22)
L0013: JUMP            L0016
L0014: JE              L04,#01 [FALSE] L0015
       LOADB           L03,#02 -> -(SP)
       JE              (SP)+,#06 [FALSE] L0015
       PRINT_PADDR     S005
       JUMP            L0016
L0015: PRINT_PADDR     S004
L0016: JUMP            L0001
L0017: CALL_2N         G5d (#7e)
       RTRUE           

Routine R0167, 2 locals

       PRINT           "Do you mean "
       STORE           L01,#01
L0001: JG              L01,L00 [TRUE] L0004
       JG              L01,#01 [FALSE] L0003
       JE              L01,L00 [FALSE] L0002
       PRINT           " or "
       JUMP            L0003
L0002: PRINT           ", "
L0003: LOADW           #18d6,L01 -> -(SP)
       CALL_2N         R0208 ((SP)+)
       INC             L01
       JUMP            L0001
L0004: PRINT           "?"
       RTRUE           

Routine R0168, 1 local

       JE              G0e,G0d [FALSE] RTRUE
       TEST_ATTR       L00,#0e [TRUE] RTRUE
       TEST_ATTR       L00,#02 [FALSE] L0001
       JE              G12,#03,#02,#30 [TRUE] RTRUE
       JE              G12,#04 [TRUE] RTRUE
L0001: RFALSE          

Routine R0169, 3 locals

       STORE           G1a,L00
       STORE           G1b,#00
L0001: INC             L00
       INC             G1b
       ADD             L01,#04 -> L01
       LOADB           #197f,#01 -> -(SP)
       JG              L00,(SP)+ [FALSE] L0002
       RFALSE          
L0002: LOADW           L01,#00 -> -(SP)
       JE              (SP)+,L02 [FALSE] L0003
       RTRUE           
L0003: JUMP            L0001

Routine R0170, 3 locals

       SET_TEXT_STYLE  ROMAN
       BUFFER_MODE     #00
       JZ              L00 [FALSE] L0001
       CALL_2N         G5d (#5e)
L0001: JZ              L01 [FALSE] L0002
       CALL_1N         R0134
L0002: STOREB          #192e,#01,#00
       JZ              G50 [TRUE] L0003
       JG              G54,#01 [FALSE] L0003
       SET_COLOUR      G54,G51
L0003: READ            #192e,#197f -> L02
       BUFFER_MODE     #01
       JZ              G50 [TRUE] L0004
       JG              G54,#01 [FALSE] L0004
       SET_COLOUR      G52,G51
L0004: LOADB           #197f,#01 -> G11
       ADD             G11,G11 -> -(SP)
       ADD             (SP)+,#01 -> L02
       STOREW          #197f,L02,#00
       INC             L02
       STOREW          #197f,L02,#00
       RTRUE           

Routine R0171, 3 locals

       LOADW           #3757,#00 -> L02
       LOG_SHIFT       L02,#ffff -> L02
       ADD             #3757,#02 -> -(SP)
       SCAN_TABLE      L00,(SP)+,L02,#84 -> L01 [TRUE] L0001
       RFALSE          
L0001: LOADW           L01,#01 -> -(SP)
       RET_POPPED      

Routine R0172, 8 locals

       STORE           L01,G0f
       STORE           G0f,L00
       CALL_1S         R0177 -> L02
       STORE           G0f,L01
       CALL_2S         R0171 (L02) -> L02
       JL              L02,#01 [TRUE] L0001
       RET             L02
L0001: MUL             L00,#04 -> -(SP)
       ADD             (SP)+,#01 -> L01
       LOADB           #197f,L01 -> L02
       ADD             L02,#192e -> L03
       SUB             L01,#01 -> -(SP)
       LOADB           #197f,(SP)+ -> L04
       STORE           L01,#00
L0002: JL              L01,L04 [FALSE] L0006
       LOADB           L03,L01 -> L07
       JL              L07,#30 [TRUE] L0003
       JG              L07,#39 [FALSE] L0004
L0003: JUMP            L0008
L0004: SUB             L07,#30 -> L05
       JG              L04,#04 [TRUE] L0005
       MUL             L06,#0a -> -(SP)
       ADD             (SP)+,L05 -> L06
L0005: INC             L01
       JUMP            L0002
L0006: JG              L04,#04 [FALSE] L0007
       RET             "cube"
L0007: RET             L06
L0008: RET             #fc18

Routine R0173, 3 locals

       LOADB           L00,#01 -> -(SP)
       ADD             (SP)+,#02 -> L02
       COPY_TABLE      L00,L01,L02
       RTRUE           

Routine R0174, 3 locals

       LOADB           L00,#01 -> L02
       LOG_SHIFT       L02,#02 -> L02
       ADD             L02,#02 -> L02
       COPY_TABLE      L00,L01,L02
       RTRUE           

Routine R0175, 3 locals

       LOADW           L00,#00 -> -(SP)
       AND             (SP)+,#0400 -> L01
       ADD             L00,#02 -> L00
L0001: LOADB           L00,#00 -> L02
       JE              L02,#0f [FALSE] L0002
       RET             L01
L0002: JE              L02,#42,#62 [FALSE] L0003
       ADD             L01,#02 -> L01
       JUMP            L0004
L0003: JE              L02,#72,#52 [TRUE] L0004
       INC             L01
L0004: ADD             L00,#03 -> L00
       JUMP            L0001

Routine R0176, 1 local

       CALL_1S         R0177 -> L00
       DEC             G0f
       RET             L00

Routine R0177, 2 locals

       JG              G0f,#00 [FALSE] L0001
       LOADB           #197f,#01 -> -(SP)
       JG              G0f,(SP)+ [FALSE] L0002
L0001: INC             G0f
       RFALSE          
L0002: MUL             G0f,#02 -> -(SP)
       SUB             (SP)+,#01 -> L00
       INC             G0f
       LOADW           #197f,L00 -> L01
       JE              L01,"," [FALSE] L0003
       STORE           L01,"comma,"
L0003: JE              L01,"." [FALSE] L0004
       STORE           L01,"then"
L0004: RET             L01

Routine R0178, 2 locals

       JE              G15,#01 [FALSE] L0001
       RET             #0384
L0001: TEST_ATTR       L00,#09 [FALSE] L0002
       RET             #c8
L0002: STORE           L01,#01f4
       TEST_ATTR       L00,#0c [FALSE] L0003
       STORE           L01,#012c
       JUMP            L0007
L0003: JE              G12,#14 [FALSE] L0004
       JIN             L00,G0e [TRUE] L0005
L0004: JE              G21,#05 [FALSE] L0006
       GET_PARENT      L00 -> -(SP)
       JE              (SP)+,G00,G0e [TRUE] L0005
       JZ              G23 [TRUE] L0006
       GET_PARENT      L00 -> -(SP)
       JE              (SP)+,G23 [TRUE] L0006
L0005: STORE           L01,#0190
       JUMP            L0007
L0006: JE              G21,#01,#03,#04 [FALSE] L0007
       JIN             L00,G0e [TRUE] L0007
       STORE           L01,#0190
       JE              G21,#04 [FALSE] L0007
       JIN             L00,G23 [FALSE] L0007
       SUB             L01,#0a -> L01
L0007: JE              G12,#09 [FALSE] L0008
       JIN             G0e,L00 [TRUE] L0008
       SUB             L01,#32 -> L01
L0008: JE              L00,#05 [TRUE] L0009
       ADD             L01,#0a -> L01
L0009: RET             L01

Routine R0179, 14 locals

       JG              G0f,G11 [FALSE] L0001
       RFALSE          
L0001: LOADW           L00,#00 -> -(SP)
       JE              (SP)+,"a","the","an" [FALSE] L0002
       ADD             G0f,#01 -> G0f
       ADD             L00,#04 -> L00
       JUMP            L0001
L0002: LOADW           L00,#00 -> -(SP)
       LOADB           (SP)+,#06 -> -(SP)
       AND             (SP)+,#80 -> -(SP)
       JZ              (SP)+ [FALSE] L0003
       RFALSE          
L0003: STORE           L04,G0f
       STORE           L02,#00
L0004: JL              L02,G35 [FALSE] L0014
       LOADW           #178c,L02 -> L06
       JZ              G2b [TRUE] L0005
       JE              L06,#05 [FALSE] L0005
       JZ              G24 [TRUE] L0005
       JUMP            L0013
L0005: STORE           G0f,L04
       STORE           L05,L00
       LOADW           L00,#00 -> L09
       JZ              G20 [TRUE] L0006
       CALL_2S         R0164 (L06) -> -(SP)
       JZ              (SP)+ [TRUE] L0013
L0006: STORE           L0d,#00
       GET_PROP        L06,#1b -> Gef
       STORE           L0d,Gef
       JZ              L0d [TRUE] L0007
       CALL_VS         R0220 (L0d,#03) -> -(SP)
       JZ              (SP)+ [TRUE] L0007
       CALL_VS         R0215 (L06,#1b) -> L0d
       STORE           G0f,L04
       JL              L0d,#00 [TRUE] L0007
       JUMP            L0010
L0007: STORE           L0d,#00
       GET_PROP_ADDR   L06,#01 -> L0a
       JG              G0f,G11 [TRUE] L0010
       JZ              L0a [TRUE] L0010
       STORE           L0d,#00
       GET_PROP_LEN    L0a -> L0b
       LOG_SHIFT       L0b,#ffff -> L0b
L0008: CALL_2S         R0182 (L05) -> -(SP)
       JZ              (SP)+ [FALSE] L0010
       SCAN_TABLE      L09,L0a,L0b -> L03 [TRUE] L0009
       JUMP            L0010
L0009: INC             L0d
       ADD             L05,#04 -> L05
       LOADW           L05,#00 -> L09
       JUMP            L0008
L0010: JZ              L0d [TRUE] L0013
       JL              L0d,L08 [TRUE] L0013
       CALL_2S         R0178 (L06) -> L03
       JE              L03,L0c [FALSE] L0011
       JE              L0d,L08 [FALSE] L0011
       JL              L07,G30 [FALSE] L0011
       INC             L07
       STOREW          #18d6,L07,L06
       JUMP            L0013
L0011: JG              L03,L0c [TRUE] L0012
       JG              L0d,L08 [FALSE] L0013
L0012: STORE           L08,L0d
       STORE           L0c,L03
       STORE           L07,#01
       STOREW          #18d6,#01,L06
L0013: INC             L02
       JUMP            L0004
L0014: SUB             L08,#01 -> -(SP)
       MUL             (SP)+,#04 -> -(SP)
       ADD             L00,(SP)+ -> L02
       JUMP            L0016
L0015: SUB             L02,#04 -> L02
L0016: JL              L02,L00 [TRUE] L0018
       LOADW           L02,#00 -> L03
       JZ              L03 [TRUE] L0017
       LOADB           L03,#06 -> -(SP)
       AND             (SP)+,#04 -> -(SP)
       JZ              (SP)+ [TRUE] L0017
       STORE           G2a,#1005
L0017: JUMP            L0015
L0018: STORE           G0f,L04
       STOREB          #18d6,#00,L07
       STOREB          #18d6,#01,L08
       JZ              L01 [TRUE] L0019
L0019: JE              L07,#01 [FALSE] L0020
       LOADW           #18d6,#01 -> L0d
       RET             L0d
L0020: JG              L07,#01 [FALSE] L0021
       SUB             #00,L07 -> -(SP)
       RET_POPPED      
L0021: RFALSE          

Routine R0180, 11 locals

       STORE           G2a,#00
       STOREB          #18d6,#00,#00
       LOADW           L00,#00 -> -(SP)
       JE              (SP)+,"all" [FALSE] L0001
       LOADW           L00,#02 -> -(SP)
       JE              (SP)+,"in" [FALSE] L0001
       INC             G0f
       RFALSE          
L0001: LOADW           L00,#00 -> -(SP)
       JE              (SP)+,"all","but","except" [FALSE] L0003
       LOADW           L00,#00 -> -(SP)
       JE              (SP)+,"all" [FALSE] L0002
       STORE           G2d,#01
       STORE           L0a,#01
L0002: INC             G0f
       ADD             L00,#04 -> L00
       JUMP            L0001
L0003: LOADW           L00,#00 -> L08
       JE              L08,"it","him","her" [TRUE] L0004
       JE              L08,"them" [FALSE] L0013
L0004: STORE           Gef,L08
       JE              Gef,"it" [FALSE] L0005
       STORE           L02,G3b
       JUMP            L0008
L0005: JE              Gef,"him" [FALSE] L0006
       STORE           L02,G3c
       JUMP            L0008
L0006: JE              Gef,"her" [FALSE] L0007
       STORE           L02,G3d
       JUMP            L0008
L0007: JE              Gef,"them" [FALSE] L0008
       STORE           L02,G3e
L0008: JZ              L02 [FALSE] L0010
       STORE           G44,#01
       JE              G29,#02 [FALSE] L0009
       CALL_VN         G5d (#8f,L08)
       RET             #fffe
L0009: JUMP            L0011
L0010: CALL_2S         R0159 (L02) -> -(SP)
       JZ              (SP)+ [FALSE] L0011
       STORE           G44,#01
       JE              G29,#02 [FALSE] L0011
       CALL_VN         G5d (#90,L08,L02)
       RET             #fffe
L0011: JZ              G20 [TRUE] L0012
       CALL_2S         R0164 (L02) -> -(SP)
       JZ              (SP)+ [FALSE] L0012
       RFALSE          
L0012: INC             G0f
       RET             L02
L0013: CALL_2S         R0172 (G0f) -> L08
       STORE           G30,#0a
       CALL_VS         R0179 (L00,L01) -> L02
       JG              L08,#00 [FALSE] L0016
       JZ              L02 [TRUE] L0014
       LOADB           #18d6,#01 -> -(SP)
       JE              (SP)+,#01 [FALSE] L0016
L0014: ADD             G0f,#01 -> G0f
       STORE           G30,L08
       STORE           L08,G2a
       JG              G30,#01 [FALSE] L0015
       STORE           G2a,#1005
L0015: ADD             L00,#04 -> -(SP)
       CALL_VS         R0179 ((SP)+,L01) -> L02
       LOADB           #18d6,#01 -> -(SP)
       JZ              (SP)+ [FALSE] L0016
       STORE           G2a,L08
L0016: LOADB           #18d6,#01 -> L04
       STORE           L05,#00
       JE              G2a,#1005 [FALSE] L0017
       STORE           L05,#01
L0017: JL              L02,#00 [FALSE] L0018
       LOADW           #18d6,#01 -> -(SP)
       TEST_ATTR       (SP)+,#09 [FALSE] L0018
       STORE           L02,#00
L0018: JL              L02,#00 [FALSE] L0030
       JZ              L05 [FALSE] L0019
       JZ              L0a [TRUE] L0020
L0019: STORE           G44,#01
       STORE           G2a,#1005
       ADD             G0f,L04 -> G0f
       RFALSE          
L0020: JE              G29,#01 [FALSE] L0021
       STORE           G44,#02
       ADD             G0f,L04 -> G0f
       RTRUE           
L0021: SUB             #00,L02 -> -(SP)
       CALL_2N         R0167 ((SP)+)
       CALL_VN         R0173 (#192e,#19d5)
       CALL_VN         R0174 (#197f,#1a26)
       NEW_LINE        
       NEW_LINE        
       CALL_1N         R0170
       ADD             #197f,#02 -> L07
       ADD             #197f,#06 -> L08
       LOADW           L07,#00 -> -(SP)
       JZ              (SP)+ [TRUE] L0029
       LOADW           L07,#00 -> -(SP)
       LOADB           (SP)+,#06 -> -(SP)
       AND             (SP)+,#81 -> -(SP)
       JE              (SP)+,#80 [FALSE] L0029
       STORE           L03,G0f
       CALL_VN         R0174 (#197f,#1a7c)
       STORE           L06,#00
L0022: LOADB           #1a7c,#01 -> -(SP)
       JL              L06,(SP)+ [FALSE] L0028
       ADD             L06,L06 -> -(SP)
       ADD             (SP)+,#01 -> -(SP)
       LOADW           #1a7c,(SP)+ -> -(SP)
       STOREW          L07,#00,(SP)+
       ADD             L03,L03 -> -(SP)
       SUB             (SP)+,#01 -> -(SP)
       LOADW           #1a26,(SP)+ -> L09
       STOREB          #197f,#01,#02
       LOADW           L07,#00 -> -(SP)
       JE              L09,(SP)+ [FALSE] L0023
       STORE           L09,#00
       STOREB          #197f,#01,#01
L0023: STOREW          L08,#00,L09
       STORE           G0f,#01
       CALL_VS         R0179 (L07,L01) -> L02
       JG              L02,#00 [TRUE] L0025
       LOADW           L07,#00 -> L09
       ADD             L03,L03 -> -(SP)
       SUB             (SP)+,#01 -> -(SP)
       LOADW           #1a26,(SP)+ -> -(SP)
       STOREW          L07,#00,(SP)+
       STOREB          #197f,#01,#02
       LOADW           L07,#00 -> -(SP)
       JE              L09,(SP)+ [FALSE] L0024
       STORE           L09,#00
       STOREB          #197f,#01,#01
L0024: STOREW          L08,#00,L09
       STORE           G0f,#01
       CALL_VS         R0179 (L07,L01) -> L02
L0025: JE              L02,#05 [FALSE] L0026
       LOADB           #197f,#01 -> -(SP)
       LOADB           #18d6,#01 -> -(SP)
       JL              (SP)+,(SP)+ [FALSE] L0026
       LOADB           #18d6,#01 -> -(SP)
       STOREB          #197f,#01,(SP)+
       RET             #ffff
L0026: STORE           G0f,L03
       JG              L02,#00 [FALSE] L0027
       CALL_VN         R0173 (#19d5,#192e)
       CALL_VN         R0174 (#1a26,#197f)
       LOADB           #197f,#01 -> G11
       JUMP            L0018
L0027: INC             L06
       JUMP            L0022
L0028: CALL_2N         G5d (S063)
       RET             #fffe
L0029: RET             #ffff
L0030: JG              L02,#00 [FALSE] L0031
       ADD             G0f,L04 -> G0f
       RET             L02
L0031: RFALSE          

Routine R0181, 2 locals

       JZ              G28 [FALSE] L0001
       STORE           G22,L00
       STORE           G26,L01
       JUMP            L0002
L0001: JE              G28,#01 [FALSE] L0002
       STORE           G23,L00
       STORE           G27,L01
L0002: INC             G28
       RTRUE           

Routine R0182, 1 local

       LOADW           L00,#00 -> -(SP)
       PULL            Gef
       JE              Gef,".",",","and" [TRUE] RTRUE
       JE              Gef,"then" [TRUE] RTRUE
       RFALSE          

Routine R0183, 2 locals

       JE              G0e,G0d [FALSE] RFALSE
       JZ              L00 [TRUE] RFALSE
       JIN             L00,G0d [TRUE] RFALSE
       CALL_2N         R0193 (L00)
       JZ              G48 [TRUE] L0001
       CALL_VN         G5d (#87,L00)
       RTRUE           
L0001: CALL_VN         G5d (#63,L00)
       STORE           L01,G3a
       STORE           G3a,#01
       CALL_VN         R0205 (#14,L00)
       STORE           G3a,L01
       JIN             L00,G0d [FALSE] RTRUE
       RFALSE          

Routine R0184, 2 locals

       JE              G0e,G0d [FALSE] RFALSE
       JZ              L00 [TRUE] RFALSE
       JIN             L00,G0d [FALSE] RFALSE
       TEST_ATTR       L00,#10 [FALSE] RFALSE
       CALL_2N         R0193 (L00)
       JZ              G48 [TRUE] L0001
       CALL_VN         G5d (#88,L00)
       RTRUE           
L0001: JZ              G3a [FALSE] L0002
       CALL_VN         G5d (#64,L00)
L0002: STORE           L01,G3a
       STORE           G3a,#01
       CALL_VN         R0205 (#29,L00)
       STORE           G3a,L01
       JIN             L00,G0d [FALSE] RTRUE
       TEST_ATTR       L00,#10 [TRUE] RTRUE
       RFALSE          

Routine R0185, 4 locals

       JZ              L01 [FALSE] L0001
       LOADW           #18ec,#00 -> L02
L0001: ADD             #18ec,#02 -> -(SP)
       SCAN_TABLE      L00,(SP)+,L02 -> L03 [TRUE] RTRUE
       RFALSE          

Routine R0186, 2 locals

       CALL_1S         R0176 -> -(SP)
       JE              (SP)+,"comma,","and" [FALSE] L0002
       LOADB           #197f,#01 -> -(SP)
       ADD             G0f,#01 -> -(SP)
       JG              (SP)+,(SP)+ [FALSE] L0001
       RET             #ffff
L0001: MUL             #04,G0f -> -(SP)
       ADD             L00,(SP)+ -> -(SP)
       LOADW           (SP)+,#00 -> L01
       JZ              L01 [TRUE] L0002
       LOADB           L01,#06 -> -(SP)
       AND             (SP)+,#01 -> -(SP)
       JZ              (SP)+ [FALSE] L0002
       INC             G0f
       RFALSE          
L0002: RTRUE           

Routine R0187, 12 locals

       STORE           G21,#ffff
       ADD             #197f,#02 -> L0a
       JL              L02,#00 [FALSE] L0001
       STORE           L06,L00
       STORE           L08,L01
       SUB             G0f,#01 -> -(SP)
       MUL             #04,(SP)+ -> -(SP)
       ADD             L0a,(SP)+ -> L01
       STORE           L00,#00
       JUMP            L0002
L0001: LOADB           L00,#00 -> L06
       ADD             L00,#01 -> -(SP)
       LOADW           (SP)+,#00 -> L08
L0002: AND             L06,#0f -> L07
       JE              L07,#02,#05 [TRUE] L0003
       CALL_VN         R0155 (G0e,#00)
L0003: STORE           G20,#00
       JE              L07,#03 [FALSE] L0004
       STORE           G20,L08
       STORE           L07,#01
       STORE           L08,#00
       JUMP            L0009
L0004: JE              L07,#04 [FALSE] L0005
       ADD             #01,L08 -> G20
       STORE           L07,#01
       STORE           L08,#00
       JUMP            L0009
L0005: JE              L07,#05 [FALSE] L0008
       STORE           L07,#01
       STORE           G38,L08
       STORE           G39,#01
       CALL_1S         G38 -> -(SP)
       JE              (SP)+,#01 [FALSE] L0006
       STORE           L08,#02
       JUMP            L0007
L0006: STORE           L08,#00
L0007: STORE           G39,#02
       CALL_VN         R0155 (G0e,#00)
       STORE           G44,#03
       JUMP            L0009
L0008: JE              L07,#06 [FALSE] L0009
       CALL_1S         L08 -> -(SP)
       RET_POPPED      
L0009: JE              L07,#02 [FALSE] L0011
       LOADW           L01,#00 -> -(SP)
       JE              (SP)+,L08 [FALSE] L0010
       INC             G0f
       RFALSE          
L0010: RET             #ffff
L0011: JE              L07,#01 [FALSE] L0060
       STORE           G21,L08
       JE              L08,#02,#03,#04 [TRUE] L0012
       JE              L08,#05 [FALSE] L0013
L0012: STORE           G2b,L08
L0013: JE              L08,#00,#01,#06 [FALSE] L0023
       CALL_1S         R0176 -> -(SP)
       JE              (SP)+,"all","but","except" [FALSE] L0015
       ADD             G0f,#01 -> -(SP)
       MUL             (SP)+,#02 -> -(SP)
       SUB             (SP)+,#01 -> -(SP)
       LOADW           #197f,(SP)+ -> L02
       JE              L02,"but" [FALSE] L0014
       RET             #ffff
L0014: STORE           G44,#01
       JE              G29,#02 [FALSE] L0015
       CALL_2N         G5d (S057)
       RET             #ffff
L0015: CALL_VS         R0180 (L01,#01) -> L02
       JE              L02,#fffe [FALSE] L0016
       RET             #ffff
L0016: JE              L02,#ffff [FALSE] L0017
       RET             "cube"
L0017: JZ              L02 [FALSE] L0019
       LOADB           #18d6,#00 -> G2f
       JE              G2f,#01 [FALSE] L0018
       LOADW           #18d6,#01 -> L02
       JUMP            L0019
L0018: STORE           G2c,L01
       RET             #ffff
L0019: SUB             G0f,#01 -> -(SP)
       MUL             #04,(SP)+ -> -(SP)
       ADD             L0a,(SP)+ -> L01
       JE              L08,#06 [FALSE] L0021
       CALL_2S         R0168 (L02) -> -(SP)
       JZ              (SP)+ [FALSE] L0021
       STORE           G44,#01
       JE              G29,#02 [FALSE] L0020
       CALL_2N         R0193 (L02)
       CALL_2N         G5d (S056)
L0020: RET             #ffff
L0021: JE              L08,#01 [FALSE] L0022
       JE              G0e,G0d [FALSE] L0022
       JIN             L02,G0e [TRUE] L0022
       STORE           G44,#01
       JE              G29,#02 [FALSE] L0022
       TEST_ATTR       L02,#0c [TRUE] L0022
       TEST_ATTR       L02,#0d [TRUE] L0022
       TEST_ATTR       L02,#0e [TRUE] L0022
       CALL_2S         R0183 (L02) -> -(SP)
       JZ              (SP)+ [TRUE] L0022
       RET             #ffff
L0022: RET             L02
L0023: JE              L08,#02,#03,#04 [TRUE] L0024
       JE              L08,#05 [FALSE] L0051
L0024: STORE           L09,G0f
       CALL_VS         R0180 (L01,#00) -> L02
       JE              L02,#fffe [FALSE] L0025
       RET             #ffff
L0025: JE              L02,#ffff [FALSE] L0026
       RET             "cube"
L0026: JZ              L02 [TRUE] L0027
       JZ              G2d [TRUE] L0046
L0027: JE              G2a,#1005 [FALSE] L0037
       STORE           G2d,#01
       LOADW           #18ec,#00 -> L0b
       STORE           L03,#00
L0028: LOADB           #18d6,#00 -> -(SP)
       JL              L03,(SP)+ [FALSE] L0030
       ADD             L03,#01 -> -(SP)
       LOADW           #18d6,(SP)+ -> L05
       CALL_2S         R0185 (L05) -> -(SP)
       JZ              (SP)+ [FALSE] L0029
       LOADW           #18ec,#00 -> -(SP)
       ADD             (SP)+,#01 -> L04
       JL              L04,#20 [FALSE] L0029
       STOREW          #18ec,#00,L04
       STOREW          #18ec,L04,L05
L0029: INC             L03
       JUMP            L0028
L0030: SUB             G0f,#01 -> -(SP)
       MUL             #04,(SP)+ -> -(SP)
       ADD             L0a,(SP)+ -> L01
       CALL_1S         R0176 -> -(SP)
       JE              (SP)+,"but","except" [FALSE] L0034
       ADD             G0f,#01 -> G0f
       LOADW           #18ec,#00 -> G35
       LOG_SHIFT       G35,#01 -> -(SP)
       ADD             #18ec,#02 -> -(SP)
       COPY_TABLE      (SP)+,#178c,(SP)+
       ADD             L01,#04 -> -(SP)
       CALL_VS         R0180 ((SP)+,#00) -> L02
       STORE           G34,#01
       JG              L02,#00 [TRUE] L0032
       JE              G29,#02 [FALSE] L0031
       CALL_VN         G5d (#42,G0f)
L0031: RET             #ffff
L0032: CALL_VS         R0185 (L02,#01,L0b) -> -(SP)
       JZ              (SP)+ [FALSE] L0033
       STORE           G2e,L02
L0033: SUB             G0f,#01 -> -(SP)
       MUL             #04,(SP)+ -> -(SP)
       ADD             L0a,(SP)+ -> L01
       CALL_1S         R0176 -> -(SP)
       JE              (SP)+,"one" [FALSE] L0034
       ADD             G0f,#01 -> G0f
L0034: CALL_2S         R0186 (L0a) -> L03
       JZ              L03 [FALSE] L0035
       SUB             G0f,#01 -> -(SP)
       MUL             #04,(SP)+ -> -(SP)
       ADD             L0a,(SP)+ -> L01
       STORE           G2d,#00
       JUMP            L0024
L0035: JE              L03,#ffff [FALSE] L0036
       RET             L03
L0036: RET             #02
L0037: LOADW           L01,#00 -> -(SP)
       JE              (SP)+,"all" [FALSE] L0045
       SUB             G0f,#02 -> -(SP)
       MUL             #04,(SP)+ -> -(SP)
       ADD             L0a,(SP)+ -> L01
       LOADW           L01,#00 -> -(SP)
       JE              (SP)+,"but","except" [FALSE] L0039
       JE              G29,#02 [FALSE] L0038
       CALL_2N         G5d (S061 OR "awake")
L0038: RET             #ffff
L0039: MUL             #04,L09 -> -(SP)
       ADD             L0a,(SP)+ -> L01
       LOADW           L01,#00 -> -(SP)
       JE              (SP)+,"but","except" [FALSE] L0040
       STORE           G2e,L02
       JUMP            L0041
L0040: JG              L02,#00 [FALSE] L0041
       RET             L02
L0041: CALL_2N         R0188 (L08)
       STORE           G2d,#01
       LOADW           #18ec,#00 -> -(SP)
       JZ              (SP)+ [FALSE] L0043
       JE              G29,#02 [FALSE] L0042
       CALL_VN         G5d (#42,G0f)
       RET             #ffff
L0042: RET             #02
L0043: LOADW           #18ec,#00 -> -(SP)
       JE              (SP)+,#01 [FALSE] L0044
       LOADW           #18ec,#01 -> L02
       RET             L02
L0044: RET             #02
L0045: STORE           G2c,L01
       RET             #ffff
L0046: CALL_2S         R0185 (L02) -> -(SP)
       JZ              (SP)+ [FALSE] L0047
       SUB             G0f,#01 -> -(SP)
       MUL             #04,(SP)+ -> -(SP)
       ADD             L0a,(SP)+ -> L01
       LOADW           #18ec,#00 -> -(SP)
       ADD             (SP)+,#01 -> L04
       STOREW          #18ec,#00,L04
       STOREW          #18ec,L04,L02
L0047: CALL_2S         R0186 (L0a) -> L03
       JZ              L03 [FALSE] L0048
       SUB             G0f,#01 -> -(SP)
       MUL             #04,(SP)+ -> -(SP)
       ADD             L0a,(SP)+ -> L01
       JUMP            L0024
L0048: JE              L03,#ffff [FALSE] L0049
       RET             L03
L0049: LOADW           #18ec,#00 -> -(SP)
       JZ              (SP)+ [FALSE] L0050
       RET             #ffff
L0050: RET             #02
L0051: JE              L08,#09 [FALSE] L0057
       STORE           G1b,#00
       JZ              L00 [TRUE] L0055
       STORE           L03,#03
       JUMP            L0053
L0052: ADD             L03,#03 -> L03
L0053: LOADB           L00,L03 -> -(SP)
       JL              (SP)+,#42 [TRUE] L0055
       ADD             L00,L03 -> -(SP)
       ADD             (SP)+,#01 -> -(SP)
       LOADW           (SP)+,#00 -> -(SP)
       CALL_VS         R0169 (G0f,L01,(SP)+) -> -(SP)
       JZ              (SP)+ [TRUE] L0054
       JUMP            L0055
L0054: JUMP            L0052
L0055: JZ              G1b [FALSE] L0056
       CALL_VN         R0169 (G0f,L01,#ffff)
L0056: ADD             G0f,G1b -> G0f
       RTRUE           
L0057: JE              L08,#07 [FALSE] L0059
       CALL_2S         R0172 (G0f) -> G1f
       CALL_1S         R0177 -> G1d
       JE              G1f,#fc18 [FALSE] L0058
       STORE           G1f,G1d
L0058: RTRUE           
L0059: JE              L08,#08 [FALSE] L0060
       PUSH            G0f
       INC             G0f
       CALL_2S         R0172 ((SP)+) -> G1f
       RTRUE           
L0060: RTRUE           

Routine R0188, 7 locals

       STOREW          #18ec,#00,#00
       STORE           L01,#00
L0001: JL              L01,G35 [FALSE] L0014
       LOADW           #178c,L01 -> L04
       STORE           L03,#00
       STORE           Gef,L00
       JE              Gef,#03,#04 [FALSE] L0004
       JIN             L04,G0e [FALSE] L0002
       TEST_ATTR       L04,#10 [TRUE] L0002
       PUSH            #01
       JUMP            L0003
L0002: PUSH            #00
L0003: PULL            L03
       JUMP            L0011
L0004: JE              Gef,#02 [FALSE] L0009
       GET_PARENT      L04 -> L05
       CALL_2S         R0158 (G0d) -> L06
       STORE           L03,#00
       JE              L05,L06 [TRUE] L0006
       JZ              L05 [TRUE] L0007
       JIN             L05,L06 [FALSE] L0007
       TEST_ATTR       L05,#0c [TRUE] L0005
       TEST_ATTR       L05,#0d [FALSE] L0007
L0005: TEST_ATTR       L05,#09 [TRUE] L0007
       TEST_ATTR       L05,#04 [TRUE] L0006
       TEST_ATTR       L05,#03 [FALSE] L0007
L0006: TEST_ATTR       L04,#0c [TRUE] L0007
       TEST_ATTR       L04,#09 [TRUE] L0007
       TEST_ATTR       L04,#0d [TRUE] L0007
       TEST_ATTR       L04,#0e [TRUE] L0007
       STORE           L03,#01
L0007: JE              G39,#02 [FALSE] L0008
       STORE           L03,#01
L0008: JUMP            L0011
L0009: JE              Gef,#05 [FALSE] L0011
       GET_PARENT      L04 -> L05
       CALL_2S         R0158 (G0d) -> L06
       STORE           L03,#00
       JZ              L05 [TRUE] L0011
       TEST_ATTR       L05,#04 [TRUE] L0010
       TEST_ATTR       L05,#03 [FALSE] L0011
L0010: TEST_ATTR       L04,#0c [TRUE] L0011
       TEST_ATTR       L04,#09 [TRUE] L0011
       TEST_ATTR       L04,#0d [TRUE] L0011
       TEST_ATTR       L04,#0e [TRUE] L0011
       STORE           L03,#01
L0011: JE              G12,#14 [FALSE] L0012
       JIN             L04,G0d [FALSE] L0012
       STORE           L03,#00
L0012: JZ              L03 [TRUE] L0013
       LOADW           #18ec,#00 -> -(SP)
       ADD             (SP)+,#01 -> L02
       STOREW          #18ec,#00,L02
       STOREW          #18ec,L02,L04
L0013: INC             L01
       JUMP            L0001
L0014: RTRUE           

Routine R0189, 5 locals

       MUL             #04,L00 -> -(SP)
       SUB             #197f,#02 -> -(SP)
       ADD             (SP)+,(SP)+ -> L04
       LOADB           L04,#03 -> L02
       LOADB           #197f,#01 -> -(SP)
       JG              L01,(SP)+ [FALSE] L0001
       LOADB           #192e,#00 -> L03
       JUMP            L0002
L0001: MUL             #04,L01 -> -(SP)
       SUB             #197f,#02 -> -(SP)
       ADD             (SP)+,(SP)+ -> L04
       LOADB           L04,#03 -> -(SP)
       LOADB           L04,#02 -> -(SP)
       ADD             (SP)+,(SP)+ -> L03
L0002: STORE           L04,L02
L0003: JL              L04,L03 [FALSE] L0005
       LOADB           #192e,L04 -> -(SP)
       JZ              (SP)+ [FALSE] L0004
       JUMP            L0005
L0004: LOADB           #192e,L04 -> -(SP)
       PRINT_CHAR      (SP)+
       INC             L04
       JUMP            L0003
L0005: RTRUE           

Routine R0190, 1 local

       STORE           L00,#00
L0001: LOADB           G2c,#02 -> -(SP)
       JL              L00,(SP)+ [FALSE] L0002
       LOADB           G2c,#03 -> -(SP)
       ADD             L00,(SP)+ -> -(SP)
       LOADB           #192e,(SP)+ -> -(SP)
       PRINT_CHAR      (SP)+
       INC             L00
       JUMP            L0001
L0002: RTRUE           

Routine R0191, 12 locals

       JE              L02,#01 [FALSE] L0001
       STORE           L03,G22
       JUMP            L0003
L0001: STORE           L03,G23
       JZ              L03 [FALSE] L0002
       STORE           L03,G22
L0002: STORE           L04,G22
L0003: STORE           L05,#00
L0004: JL              L05,G35 [FALSE] L0012
       LOADW           #178c,L05 -> L06
       JE              L06,G0d [TRUE] L0005
       TEST_ATTR       L06,#09 [TRUE] L0005
       CALL_VS         R0159 (L06,G0d) -> -(SP)
       JZ              (SP)+ [FALSE] L0006
L0005: JUMP            L0011
L0006: TEST_ATTR       L06,#17 [FALSE] L0007
       JE              L06,L04 [TRUE] L0007
       STOREW          #1afa,#04,L06
       INC             L07
L0007: TEST_ATTR       L06,#04 [FALSE] L0008
       JE              L06,L04 [TRUE] L0008
       STOREW          #1afa,#02,L06
       INC             L08
L0008: TEST_ATTR       L06,#0e [FALSE] L0009
       JE              L06,L04 [TRUE] L0009
       STOREW          #1afa,#00,L06
       INC             L09
L0009: JIN             L06,G0e [FALSE] L0010
       JE              L06,L04 [TRUE] L0010
       STOREW          #1afa,#01,L06
       INC             L0a
L0010: TEST_ATTR       L06,#0c [TRUE] L0011
       JE              L06,L04 [TRUE] L0011
       STOREW          #1afa,#03,L06
       INC             L0b
L0011: INC             L05
       JUMP            L0004
L0012: STORE           L06,#00
       STORE           Gef,L00
       JE              Gef,#01 [FALSE] L0014
       JE              L0a,#01 [FALSE] L0013
       LOADW           #1afa,#01 -> L06
L0013: JUMP            L0021
L0014: JE              Gef,#06 [FALSE] L0016
       JE              L09,#01 [FALSE] L0015
       LOADW           #1afa,#00 -> L06
L0015: JUMP            L0021
L0016: JE              Gef,#09 [FALSE] L0017
       JUMP            L0021
L0017: JZ              L06 [FALSE] L0018
       JE              L08,#01 [FALSE] L0018
       JE              G12,#20,#0a [FALSE] L0018
       LOADW           #1afa,#02 -> L06
L0018: JZ              L06 [FALSE] L0020
       JE              L07,#01 [FALSE] L0020
       JE              G12,#1d,#21,#20 [TRUE] L0019
       JE              G12,#0a [FALSE] L0020
L0019: LOADW           #1afa,#04 -> L06
L0020: JZ              L06 [FALSE] L0021
       JE              L0b,#01 [FALSE] L0021
       LOADW           #1afa,#03 -> L06
L0021: JE              L06,L03 [FALSE] L0022
       STORE           L06,#00
L0022: JZ              L06 [TRUE] L0024
       PRINT           "(assuming "
       JZ              L01 [TRUE] L0023
       ADD             L01,#01 -> -(SP)
       LOADW           (SP)+,#00 -> -(SP)
       PRINT_ADDR      (SP)+
       PRINT           " "
L0023: CALL_2N         R0208 (L06)
       PRINT           ")
"
L0024: RET             L06

Routine R0192, 11 locals

       ADD             G19,#01 -> G0f
       MUL             #04,G19 -> -(SP)
       ADD             #197f,#02 -> -(SP)
       ADD             (SP)+,(SP)+ -> L01
       SUB             L00,#01 -> G10
       STORE           G28,#00
       STORE           G22,#00
       STORE           G1a,#00
       STORE           G1b,#00
       STORE           G26,#00
       STORE           G27,#00
       STORE           G1e,#00
       STORE           G1d,#00
       STORE           G1f,#00
       STOREW          #18ec,#00,#00
       STORE           G2b,#00
       STORE           G2c,#00
       STORE           G2d,#00
       STORE           G2e,#00
       STORE           G25,#00
       STORE           G24,#00
       LOADW           L00,#00 -> -(SP)
       AND             (SP)+,#03ff -> G12
       STORE           G13,G12
       LOADW           L00,#00 -> -(SP)
       AND             (SP)+,#0400 -> -(SP)
       JZ              (SP)+ [FALSE] L0001
       PUSH            #00
       JUMP            L0002
L0001: PUSH            #01
L0002: PULL            G14
       STORE           G44,#00
L0003: ADD             G10,#03 -> G10
       LOADW           L01,#02 -> L0a
       STORE           G39,#00
       LOADB           G10,#00 -> -(SP)
       AND             (SP)+,#0f -> L07
       JE              L07,#0f [FALSE] L0014
       CALL_2S         R0182 (L01) -> -(SP)
       JZ              (SP)+ [TRUE] L0011
       LOADB           #197f,#01 -> -(SP)
       JG              (SP)+,G0f [FALSE] L0006
       JZ              L0a [FALSE] L0006
       JE              G29,#02 [FALSE] L0004
       ADD             L01,#04 -> G2c
       CALL_2N         G5d (#75)
       JUMP            L0005
L0004: STORE           G44,#01
L0005: RET             G0f
L0006: LOADB           #197f,#01 -> -(SP)
       JG              (SP)+,G0f [FALSE] L0010
       LOADB           L0a,#06 -> -(SP)
       AND             (SP)+,#01 -> -(SP)
       JZ              (SP)+ [FALSE] L0010
       STORE           L08,G0f
       INC             G0f
       CALL_VS         R0215 (#05,#1b) -> -(SP)
       JZ              (SP)+ [TRUE] L0007
       RET             #64
L0007: JE              G29,#02 [FALSE] L0008
       CALL_2N         G5d (S057)
       JUMP            L0009
L0008: STORE           G44,#01
L0009: RET             L08
L0010: INC             G0f
       RET             #64
L0011: LOADB           #197f,#01 -> -(SP)
       ADD             #01,(SP)+ -> -(SP)
       JE              G0f,(SP)+ [FALSE] L0012
       RET             #64
L0012: JE              G29,#02 [FALSE] L0013
       CALL_2N         G5d (S061 OR "awake")
L0013: SUB             G0f,G19 -> -(SP)
       RET_POPPED      
L0014: LOADB           #197f,#01 -> -(SP)
       ADD             #01,(SP)+ -> -(SP)
       JL              G0f,(SP)+ [TRUE] L0016
       JE              L07,#06 [TRUE] L0016
       JE              G29,#02 [FALSE] L0015
       SUB             L00,#01 -> -(SP)
       CALL_2S         R0165 ((SP)+) -> -(SP)
       JZ              (SP)+ [TRUE] L0015
       RET             #64
L0015: SUB             G0f,G19 -> -(SP)
       RET_POPPED      
L0016: STORE           L08,G0f
       STORE           L09,G25
       CALL_VS         R0187 (G10,L01) -> L02
       STORE           Gef,L02
       JE              Gef,#ff00 [FALSE] L0017
       CALL_VS         R0187 (#01,#00,#ffff) -> L02
       JUMP            L0023
L0017: JE              Gef,#ff01 [FALSE] L0018
       CALL_VS         R0187 (#01,#01,#ffff) -> L02
       JUMP            L0023
L0018: JE              Gef,#ff02 [FALSE] L0019
       CALL_VS         R0187 (#01,#02,#ffff) -> L02
       JUMP            L0023
L0019: JE              Gef,#ff03 [FALSE] L0020
       CALL_VS         R0187 (#01,#03,#ffff) -> L02
       JUMP            L0023
L0020: JE              Gef,#ff04 [FALSE] L0021
       CALL_VS         R0187 (#01,#04,#ffff) -> L02
       JUMP            L0023
L0021: JE              Gef,#ff05 [FALSE] L0022
       CALL_VS         R0187 (#01,#05,#ffff) -> L02
       JUMP            L0023
L0022: JE              Gef,#ff06 [FALSE] L0023
       CALL_VS         R0187 (#01,#06,#ffff) -> L02
L0023: SUB             G0f,#01 -> -(SP)
       MUL             #04,(SP)+ -> -(SP)
       ADD             #197f,#02 -> -(SP)
       ADD             (SP)+,(SP)+ -> L01
       STORE           Gef,L02
       JE              Gef,#ffff [FALSE] L0041
       JE              L07,#06 [FALSE] L0026
       JE              G29,#02 [FALSE] L0025
       JE              G39,#02 [FALSE] L0024
       STORE           G39,#03
       CALL_1N         G38
       JUMP            L0025
L0024: CALL_2N         G5d (S061 OR "awake")
L0025: SUB             L08,#01 -> -(SP)
       RET_POPPED      
L0026: LOADB           G10,#00 -> -(SP)
       JE              (SP)+,#62,#72 [FALSE] L0027
       JUMP            L0003
L0027: JZ              G2c [TRUE] L0039
       JE              G29,#02 [FALSE] L0037
       LOADW           G2c,#00 -> L06
       JZ              G38 [TRUE] L0028
       STORE           G39,#03
       CALL_1N         G38
       JUMP            L0036
L0028: JZ              L06 [TRUE] L0034
       STORE           G26,#ffff
       GET_PROP_ADDR   G00,#01 -> L05
       JZ              L05 [TRUE] L0029
       GET_PROP_LEN    L05 -> L04
       LOG_SHIFT       L04,#ffff -> L04
       SCAN_TABLE      L06,L05,L04 -> L03 [FALSE] L0029
       STORE           G26,#01
L0029: JE              G26,#ffff [TRUE] L0030
       CALL_2N         G5d (#74)
       JUMP            L0033
L0030: JE              L06,"all" [TRUE] L0031
       JE              G2a,#1005 [FALSE] L0032
L0031: CALL_2N         G5d (S057)
       JUMP            L0033
L0032: CALL_2N         G5d (S065)
L0033: JUMP            L0036
L0034: LOADB           G2c,#02 -> -(SP)
       JZ              (SP)+ [FALSE] L0035
       CALL_2N         G5d (S061 OR "awake")
       JUMP            L0036
L0035: CALL_2N         G5d (#75)
L0036: JUMP            L0038
L0037: JE              G44,#03 [TRUE] L0038
       STORE           G44,#01
       ADD             G0f,#01 -> G0f
L0038: JUMP            L0040
L0039: JE              G29,#02 [FALSE] L0040
       LOADB           G10,#00 -> -(SP)
       JE              (SP)+,#42,#52 [FALSE] L0040
       CALL_2N         G5d (S061 OR "awake")
L0040: SUB             G0f,G19 -> -(SP)
       RET_POPPED      
L0041: JE              Gef,#00 [FALSE] L0044
       LOADB           G10,#00 -> -(SP)
       AND             (SP)+,#0f -> L07
L0042: JE              L07,#0f [TRUE] L0043
       JE              L07,#06 [TRUE] L0043
       LOADB           G10,#00 -> -(SP)
       JE              (SP)+,#52,#42 [TRUE] L0043
       ADD             G10,#03 -> G10
       LOADB           G10,#00 -> -(SP)
       AND             (SP)+,#0f -> L07
       JUMP            L0042
L0043: JUMP            L0056
L0044: JE              Gef,#02 [FALSE] L0047
       LOADW           #18ec,#00 -> -(SP)
       JZ              (SP)+ [FALSE] L0045
       CALL_VN         R0181 (#00,#00)
       STORE           G44,#01
       JUMP            L0046
L0045: LOADW           #18ec,#01 -> -(SP)
       LOADW           #18ec,#01 -> -(SP)
       CALL_VN         R0181 ((SP)+,(SP)+)
L0046: JUMP            L0056
L0047: JE              Gef,#01 [FALSE] L0050
       JE              G1f,#fc18 [FALSE] L0049
       JE              G29,#02 [FALSE] L0048
       CALL_2N         G5d (S059 OR "avnotes")
L0048: SUB             G0f,G19 -> -(SP)
       RET_POPPED      
L0049: CALL_VN         R0181 (G1f,#01)
       JUMP            L0056
L0050: JE              Gef,"cube" [FALSE] L0051
       RET             #ffff
L0051: JE              L02,#05 [FALSE] L0054
       JE              G22,#05 [FALSE] L0053
       JE              G29,#02 [FALSE] L0052
       CALL_2N         G5d (S058)
L0052: STORE           G44,#01
       SUB             G0f,G19 -> -(SP)
       RET_POPPED      
L0053: JUMP            L0055
L0054: STORE           G25,L09
       LOADB           #3730,G25 -> G24
L0055: CALL_VN         R0181 (L02,L02)
L0056: JUMP            L0003

Routine R0193, 1 local

       JE              L00,#00,G0d,#05 [FALSE] L0001
       RTRUE           
L0001: TEST_ATTR       L00,#11 [FALSE] L0002
       STORE           G3e,L00
       JUMP            L0007
L0002: TEST_ATTR       L00,#0e [FALSE] L0006
       TEST_ATTR       L00,#12 [FALSE] L0003
       STORE           G3d,L00
       JUMP            L0005
L0003: TEST_ATTR       L00,#13 [FALSE] L0004
       STORE           G3b,L00
       JUMP            L0005
L0004: STORE           G3c,L00
L0005: JUMP            L0007
L0006: STORE           G3b,L00
L0007: RTRUE           

Routine R0194, 1 local

       STORE           G63,L00
       STORE           G64,#00
       STORE           G65,#00
       STORE           G66,#00
       RTRUE           

Routine R0195, 15 locals

       CALL_2N         R0194 (#ffff)
       STOREW          #18ec,#00,#00
       STORE           G25,#00
       STORE           G24,#00
       STORE           G12,#ffff
       STORE           G13,G12
       STORE           G15,#00
       STOREB          #18d6,#01,#00
       STORE           G0e,G0d
       STORE           G22,#00
       STORE           G23,#00
       STORE           G1a,#00
       STORE           G1b,#00
       STORE           G31,#00
       STORE           L0c,#00
       STORE           G38,#00
       STORE           G20,#00
       STORE           G21,#ffff
       STORE           G2d,#00
       STORE           G19,#01
       ADD             #197f,#02 -> -(SP)
       CALL_2S         R0182 ((SP)+) -> -(SP)
       JZ              (SP)+ [FALSE] L0001
       LOADB           #197f,#01 -> -(SP)
       JL              (SP)+,#01 [FALSE] L0002
L0001: CALL_2N         G5d (S060)
       RET             #ffff
L0002: ADD             G19,G19 -> -(SP)
       SUB             (SP)+,#01 -> -(SP)
       LOADW           #197f,(SP)+ -> G18
L0003: JZ              G18 [FALSE] L0004
       JZ              G18 [FALSE] L0004
       JUMP            L0007
L0004: ADD             G18,#06 -> L00
       LOADB           L00,#00 -> -(SP)
       AND             (SP)+,#01 -> -(SP)
       JZ              (SP)+ [FALSE] L0016
       STORE           G0f,G19
       CALL_VS         R0215 (#05,#1b) -> L02
       JZ              L02 [TRUE] L0006
       ADD             G0f,L02 -> G0f
       SUB             G0f,#01 -> L02
       CALL_1S         R0177 -> L04
       JE              L04,#00,"comma,","then" [FALSE] L0005
       STORE           G12,#18
       STORE           G13,G12
       STORE           G22,#05
       STORE           G26,#05
       JUMP            L0045
L0005: CALL_VN         G5d (#65,L02)
       RTRUE           
L0006: CALL_VN         R0155 (G0e,#00)
       ADD             #197f,#02 -> -(SP)
       CALL_VS         R0179 ((SP)+,#00) -> L05
       JG              L05,#00 [FALSE] L0007
       JE              G19,#01 [FALSE] L0007
       LOADB           #18d6,#01 -> -(SP)
       ADD             G0f,(SP)+ -> G0f
       CALL_1S         R0177 -> L04
       JE              L04,"comma," [FALSE] L0007
       JUMP            L0010
L0007: JE              G0e,G0d [TRUE] L0008
       JUMP            L0044
L0008: LOADW           #197f,#03 -> -(SP)
       JE              (SP)+,"," [FALSE] L0009
       CALL_2N         G5d (S064)
       RTRUE           
L0009: CALL_2N         G5d (S062)
       RTRUE           
L0010: TEST_ATTR       L05,#0e [TRUE] L0011
       TEST_ATTR       L05,#02 [TRUE] L0011
       CALL_VN         G5d (#6b,L05)
       RTRUE           
L0011: STORE           G0e,L05
       STORE           G19,G0f
       ADD             G19,G19 -> -(SP)
       SUB             (SP)+,#01 -> -(SP)
       LOADW           #197f,(SP)+ -> G18
       CALL_VS         R0219 (G0e,#04) -> -(SP)
       JZ              (SP)+ [TRUE] L0015
       STORE           G2f,#00
       CALL_VS         R0215 (G0e,#04) -> L02
       JE              L02,#00,#01 [TRUE] L0013
       JZ              G2f [FALSE] L0012
       CALL_VS         R0127 (L02,G49) -> -(SP)
       JL              (SP)+,#00 [TRUE] L0012
       CALL_VS         R0127 (L02,G4b) -> -(SP)
       JL              (SP)+,#00 [FALSE] L0012
       SUB             L02,G49 -> -(SP)
       MOD             (SP)+,G4a -> -(SP)
       JZ              (SP)+ [TRUE] L0013
L0012: STORE           G31,G18
       SUB             #00,L02 -> L02
L0013: JE              L02,#01 [FALSE] L0014
       INC             G0f
       JUMP            L0045
L0014: JZ              L02 [TRUE] L0015
       STORE           G18,L02
       STORE           L0c,#01
       SUB             G19,L0c -> G19
       JUMP            L0003
L0015: JUMP            L0002
L0016: LOADB           L00,#00 -> -(SP)
       AND             (SP)+,#02 -> G15
       LOADB           L00,#01 -> -(SP)
       SUB             #ff,(SP)+ -> L02
       LOADW           #0e,#00 -> -(SP)
       LOADW           (SP)+,L02 -> L01
       STORE           L07,#00
       STORE           L08,#00
       STORE           G29,#01
       ADD             L01,#01 -> L04
       STORE           L02,#00
L0017: LOADB           L01,#00 -> -(SP)
       JL              L02,(SP)+ [FALSE] L0028
       CALL_2S         R0192 (L04) -> L06
       JE              G12,#05 [FALSE] L0018
       JE              L06,#64 [FALSE] L0018
       STORE           L05,G22
       STORE           G0f,G1a
       JUMP            L0010
L0018: JZ              L06 [FALSE] L0019
       JUMP            L0025
L0019: JG              L06,L07 [FALSE] L0021
       JE              L09,#03 [TRUE] L0020
       JE              L06,#64 [FALSE] L0024
L0020: JE              L06,#64 [TRUE] L0024
L0021: JG              L06,L07 [TRUE] L0022
       JE              G44,#03 [TRUE] L0024
L0022: JE              L06,L07 [FALSE] L0023
       JG              L09,#00 [FALSE] L0023
       JZ              G44 [FALSE] L0023
       JZ              G1a [TRUE] L0024
L0023: JE              L06,L07 [FALSE] L0025
       JZ              L08 [TRUE] L0025
       CALL_2S         R0175 (L08) -> -(SP)
       CALL_2S         R0175 (L04) -> -(SP)
       JL              (SP)+,(SP)+ [FALSE] L0025
L0024: STORE           L07,L06
       STORE           L08,L04
       STORE           L09,G44
       STORE           L0a,G23
       JE              L07,#64 [FALSE] L0025
       JUMP            L0028
L0025: ADD             L04,#02 -> L03
L0026: LOADB           L03,#00 -> -(SP)
       JE              (SP)+,#0f [TRUE] L0027
       ADD             L03,#03 -> L03
       JUMP            L0026
L0027: ADD             L03,#01 -> L04
       INC             L02
       JUMP            L0017
L0028: STORE           G29,#02
       JE              L07,#64 [FALSE] L0029
       JZ              L09 [FALSE] L0029
       JUMP            L0045
L0029: JZ              L0c [TRUE] L0030
       ADD             G19,L0c -> G19
       STORE           L0c,#00
L0030: JZ              G31 [TRUE] L0031
       STORE           G18,G31
       STORE           G31,#00
       JUMP            L0003
L0031: JE              G0d,G0e [TRUE] L0032
       JUMP            L0044
L0032: LOADB           #197f,#01 -> -(SP)
       JL              L07,(SP)+ [FALSE] L0042
       JZ              L07 [FALSE] L0033
       CALL_2N         G5d (S061 OR "awake")
       JUMP            L0041
L0033: JE              L09,#02 [FALSE] L0034
       SUB             G0f,#01 -> -(SP)
       CALL_VN         G5d (#65,(SP)+)
       JUMP            L0041
L0034: JG              L09,#00 [FALSE] L0035
       STORE           G23,L0a
       CALL_2S         R0192 (L08) -> L06
       JUMP            L0041
L0035: MUL             G0f,#03 -> -(SP)
       SUB             (SP)+,#01 -> -(SP)
       LOADB           L08,(SP)+ -> -(SP)
       AND             (SP)+,#0f -> L02
       JZ              G2c [TRUE] L0036
       LOADW           G2c,#00 -> -(SP)
       JZ              (SP)+ [FALSE] L0036
       CALL_2N         G5d (#75)
       JUMP            L0041
L0036: JE              L02,#0f [FALSE] L0039
       ADD             G0f,G0f -> -(SP)
       SUB             (SP)+,#01 -> -(SP)
       LOADW           #197f,(SP)+ -> -(SP)
       JE              (SP)+,"all" [FALSE] L0037
       CALL_2N         G5d (S057)
       JUMP            L0038
L0037: CALL_2N         G5d (S065)
L0038: JUMP            L0041
L0039: JE              L02,#02,#01 [FALSE] L0040
       SUB             L08,#01 -> -(SP)
       CALL_2N         R0166 ((SP)+)
       JUMP            L0041
L0040: SUB             G0f,#01 -> -(SP)
       CALL_VN         G5d (#65,(SP)+)
L0041: STORE           G12,#00
       RTRUE           
L0042: CALL_2S         R0192 (L08) -> L06
       JE              L06,#ffff [TRUE] RFALSE
       JE              L06,#64 [FALSE] L0043
       JUMP            L0045
L0043: STORE           G12,#ffff
       RTRUE           
L0044: STORE           G12,#1004
       STORE           G1a,G19
       LOADB           #197f,#01 -> -(SP)
       SUB             (SP)+,G1a -> -(SP)
       ADD             (SP)+,#01 -> G1b
       STORE           G23,G0e
       STORE           G0f,G1a
       CALL_2S         R0172 (G0f) -> G1e
       CALL_1S         R0177 -> G1d
L0045: SUB             G0f,#01 -> -(SP)
       SUB             #00,(SP)+ -> G1c
       JZ              G14 [TRUE] L0046
       STORE           L02,G23
       STORE           G23,G22
       STORE           G22,L02
       STORE           G26,G22
       STORE           G27,G23
L0046: JE              G12,#30 [FALSE] L0047
       JE              G22,G0d [FALSE] L0047
       JE              G0e,G0d [TRUE] L0047
       STORE           G22,G0e
       STORE           G0e,G0d
       STORE           G12,#03
L0047: JE              G12,#04 [FALSE] L0048
       JE              G22,G0d [TRUE] L0048
       JE              G0e,G0d [FALSE] L0048
       STORE           G0e,G22
       STORE           G22,G23
       STORE           G23,G0d
       STORE           G12,#17
L0048: JZ              G1a [TRUE] L0055
       JE              G12,#02,#03,#30 [TRUE] L0049
       JE              G12,#1004 [FALSE] L0055
L0049: JE              #00,G22,G23 [FALSE] L0055
       STORE           L02,#00
L0050: JL              L02,G1b [FALSE] L0055
       ADD             G1a,L02 -> -(SP)
       MUL             #02,(SP)+ -> -(SP)
       SUB             (SP)+,#01 -> -(SP)
       LOADW           #197f,(SP)+ -> L05
       JE              G12,#1004 [TRUE] L0051
       JE              L05,"a","an","the" [TRUE] L0054
L0051: JZ              G22 [FALSE] L0052
       STORE           G22,L05
       JUMP            L0053
L0052: STORE           G23,L05
L0053: JUMP            L0055
L0054: INC             L02
       JUMP            L0050
L0055: JE              G0e,G0d [TRUE] L0062
       STORE           Ge9,G12
       JE              L09,#02 [TRUE] L0056
       JZ              G2d [TRUE] L0057
L0056: CALL_2N         G5d (S069 OR "bartender")
       RTRUE           
L0057: LOADW           #18ec,#00 -> -(SP)
       JG              (SP)+,#01 [FALSE] L0058
       CALL_2N         G5d (S070)
       RTRUE           
L0058: CALL_VS         R0146 (G0e,#14) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       CALL_VS         R0146 (G0d,#14) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       JE              G12,#1004 [FALSE] L0059
       STORE           G12,#02
       STORE           G23,G0e
       STORE           G27,G0e
       CALL_1S         R0201 -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       CALL_VS         R0203 (G0e,G12) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       CALL_2N         G5d (#1f)
       JUMP            L0060
L0059: CALL_VS         R0203 (G0e,#1000) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       CALL_VN         G5d (#62,G0e)
L0060: JL              G1c,#00 [FALSE] L0061
       SUB             #00,G1c -> -(SP)
       RET_POPPED      
L0061: RET             G1c
L0062: STORE           G13,#ffff
       LOADW           #18ec,#00 -> -(SP)
       JZ              (SP)+ [FALSE] L0064
       JG              G26,#01 [FALSE] L0063
       CALL_2N         R0193 (G22)
L0063: CALL_2N         R0194 (#fffe)
       CALL_1N         R0197
       JUMP            L0080
L0064: JE              G2b,#05 [FALSE] L0065
       TEST_ATTR       G23,#04 [FALSE] L0065
       TEST_ATTR       G23,#07 [TRUE] L0065
       CALL_VN         G5d (#69,G23)
       JUMP            L0080
L0065: STORE           L06,#00
       STORE           L0b,G12
       STORE           L0d,G24
       STORE           L0e,G25
       STORE           L05,#01
L0066: LOADW           #18ec,#00 -> -(SP)
       JG              L05,(SP)+ [TRUE] L0079
       STORE           G12,L0b
       LOADW           #18ec,L05 -> G26
       STORE           G22,G26
       JE              G22,G2e [FALSE] L0067
       JUMP            L0078
L0067: STORE           Gef,G2b
       JE              Gef,#04 [FALSE] L0069
       JE              G22,G23 [FALSE] L0068
       JZ              G2d [TRUE] L0068
       JUMP            L0078
L0068: JUMP            L0070
L0069: JE              Gef,#05 [FALSE] L0070
       JIN             G22,G23 [TRUE] L0070
       JZ              G2d [TRUE] L0070
       JUMP            L0078
L0070: JZ              G12 [FALSE] L0071
       JIN             G22,G0d [TRUE] L0071
       JZ              G2d [TRUE] L0071
       JUMP            L0078
L0071: JE              G12,#14 [FALSE] L0072
       GET_PARENT      G0d -> -(SP)
       JE              G22,(SP)+ [FALSE] L0072
       JZ              G2d [TRUE] L0072
       JUMP            L0078
L0072: JE              #05,G22,G23 [FALSE] L0073
       STORE           G24,L0d
       STORE           G25,L0e
       JUMP            L0074
L0073: STORE           G24,#00
       STORE           G25,#00
L0074: JZ              G2d [FALSE] L0075
       LOADW           #18ec,#00 -> -(SP)
       JG              (SP)+,#01 [FALSE] L0076
L0075: CALL_2N         R0137 (G22)
       PRINT           ": "
L0076: JG              G26,#01 [FALSE] L0077
       CALL_2N         R0193 (G22)
L0077: CALL_2N         R0194 (#fffe)
       CALL_1N         R0197
       INC             L06
L0078: INC             L05
       JUMP            L0066
L0079: JZ              L06 [FALSE] L0080
       CALL_VN         G5d (#42,G0f)
L0080: RET             G1c

Routine R0196, 0 locals

       LOADW           #221f,G12 -> -(SP)
       CALL_1S         (SP)+ -> -(SP)
       RET_POPPED      

Routine R0197, 2 locals

       JE              G63,#fffe [FALSE] L0001
       STORE           G63,G12
       STORE           G64,G22
       STORE           G65,G23
       STORE           G66,G24
L0001: JZ              G15 [FALSE] L0002
       CALL_1S         R0201 -> -(SP)
       JZ              (SP)+ [FALSE] L0005
L0002: JL              G12,#1000 [FALSE] L0005
       PUSH            G46
       PUSH            G47
       STORE           G46,#00
       CALL_1S         R0196 -> L01
       JE              L01,#00,#01 [TRUE] L0003
       CALL_2N         G5d (L01)
L0003: JZ              G46 [TRUE] L0004
       CALL_1S         R0202 -> -(SP)
       JZ              (SP)+ [FALSE] L0004
       JE              G46,#00,#01 [TRUE] L0004
       JZ              G3a [FALSE] L0004
       CALL_VN         G5d (G46,G47)
L0004: PULL            G47
       PULL            G46
       STORE           L00,#01
L0005: RET             L00

Routine R0198, 1 local

       GET_CHILD       G0d -> -(SP) [FALSE] L0001
L0001: PULL            L00
       JZ              L00 [TRUE] L0004
L0002: TEST_ATTR       L00,#0a [TRUE] L0003
       SET_ATTR        L00,#0a
L0003: GET_SIBLING     L00 -> L00 [TRUE] L0002
L0004: RTRUE           

Routine R0199, 6 locals

       JZ              G36 [TRUE] RFALSE
       SUB             G36,#01 -> L04
L0001: LOADW           #17f0,L02 -> L03
       TEST_ATTR       L03,#1b [FALSE] L0003
       CALL_VS         R0217 (L03,L00) -> -(SP)
       JZ              (SP)+ [TRUE] L0003
       CALL_VS         R0218 (L03,L00) -> -(SP)
       JG              (SP)+,#02 [TRUE] L0002
       CALL_VS         R0214 (L03,L00) -> -(SP)
       JE              (SP)+,#ffff,#00 [TRUE] L0003
L0002: CALL_VS         R0146 (L03,L00) -> -(SP)
       JZ              (SP)+ [TRUE] L0003
       JZ              L01 [TRUE] L0003
       RTRUE           
L0003: INC_CHK         L02,L04 [FALSE] L0001
       RET             L05

Routine R0200, 0 locals

       CALL_VN         R0156 (G0d,#02)
       TEST_ATTR       G00,#1b [FALSE] L0001
       GET_PROP_ADDR   G00,#1c -> Gef
       PUSH            Gef
       JZ              (SP)+ [TRUE] L0001
       CALL_VN         R0146 (G00,#1c)
L0001: CALL_2N         R0199 (#1c)
       RTRUE           

Routine R0201, 0 locals

       CALL_VN         R0156 (G0d,#03)
       CALL_VS         R0146 (G0d,#14) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       CALL_VS         R0199 (#18,#01) -> -(SP)
       JE              (SP)+,#01 [TRUE] RTRUE
       GET_PROP_ADDR   G03,#0e -> Gef
       PUSH            Gef
       JZ              (SP)+ [TRUE] L0001
       CALL_VS         R0146 (G03,#0e) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
L0001: JG              G26,#01 [FALSE] L0002
       GET_PROP_ADDR   G26,#0e -> Gef
       PUSH            Gef
       JZ              (SP)+ [TRUE] L0002
       CALL_VS         R0146 (G26,#0e) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
L0002: RFALSE          

Routine R0202, 0 locals

       CALL_VN         R0156 (G0d,#04)
       CALL_VS         R0199 (#19,#01) -> -(SP)
       JE              (SP)+,#01 [TRUE] RTRUE
       GET_PROP_ADDR   G03,#0f -> Gef
       PUSH            Gef
       JZ              (SP)+ [TRUE] L0001
       CALL_VS         R0146 (G03,#0f) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
L0001: JG              G26,#01 [FALSE] L0002
       GET_PROP_ADDR   G26,#0f -> Gef
       PUSH            Gef
       JZ              (SP)+ [TRUE] L0002
       CALL_VS         R0146 (G26,#0f) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
L0002: RFALSE          

Routine R0203, 2 locals

       CALL_VS         R0146 (L00,#05,L01) -> -(SP)
       RET_POPPED      

Routine R0204, 3 locals

       JL              L00,#2711 [TRUE] L0002
       JG              L00,#271c [TRUE] L0002
       SUB             L00,#2711 -> L02
       ADD             L02,#01 -> G25
       ADD             L02,#10 -> G24
       JE              L01,#01 [FALSE] L0001
       STORE           G26,#05
       STORE           G22,G26
       JUMP            L0002
L0001: STORE           G27,#05
       STORE           G23,G27
L0002: RTRUE           

Routine R0205, 11 locals

       STORE           L03,G12
       STORE           L04,G22
       STORE           L05,G23
       STORE           L08,G26
       STORE           L09,G27
       STORE           L06,G25
       STORE           L07,G24
       STORE           G12,L00
       STORE           G22,L01
       STORE           G23,L02
       STORE           G26,L01
       STORE           G27,L02
       STORE           G25,#00
       STORE           G24,#00
       CALL_VN         R0204 (G22,#01)
       CALL_VN         R0204 (G23,#02)
       CALL_1S         R0197 -> L0a
       STORE           G12,L03
       STORE           G22,L04
       STORE           G23,L05
       STORE           G25,L06
       STORE           G24,L07
       STORE           G26,L08
       STORE           G27,L09
       RET             L0a

Routine R0206, 5 locals

       STORE           L03,G26
       STORE           L04,G27
       STORE           G26,L01
       STORE           G27,L02
       CALL_VN         R0205 (L00,L01,L02)
       STORE           G26,L03
       STORE           G27,L04
       RTRUE           

Routine R0207, 2 locals

       CALL_VS         R0138 (L00,#01) -> L01
       RTRUE           

Routine R0208, 2 locals

       CALL_VS         R0138 (L00,#02) -> L01
       RTRUE           

Routine R0209, 1 local

       CALL_VN         R0210 (L00,L00)
       RTRUE           

Routine R0210, 3 locals

       JZ              L01 [FALSE] L0001
       ADD             #8000,L00 -> L01
L0001: SCAN_TABLE      L01,#1854,G5b -> L02 [FALSE] RFALSE
       SUB             L02,#1854 -> L02
       LOG_SHIFT       L02,#ffff -> L02
       JG              L01,#00 [FALSE] L0002
       PUT_PROP        L00,#0a,#00
L0002: JG              L02,G5c [TRUE] L0003
       DEC             G5c
L0003: ADD             L02,#01 -> L02
L0004: JL              L02,G5b [FALSE] L0005
       LOADW           #1854,L02 -> -(SP)
       SUB             L02,#01 -> -(SP)
       STOREW          #1854,(SP)+,(SP)+
       INC             L02
       JUMP            L0004
L0005: DEC             G5b
       RTRUE           

Routine R0211, 2 locals

       STORE           G5c,#00
L0001: JL              G5c,G5b [FALSE] L0006
       JL              G32,#01 [TRUE] L0002
       RTRUE           
L0002: LOADW           #1854,G5c -> L00
       JL              L00,#00 [FALSE] L0003
       AND             L00,#7fff -> -(SP)
       CALL_VN         R0146 ((SP)+,#0b)
       JUMP            L0005
L0003: GET_PROP        L00,#0a -> Gef
       STORE           L01,Gef
       JZ              L01 [FALSE] L0004
       CALL_2N         R0209 (L00)
       CALL_VN         R0146 (L00,#0b)
       JUMP            L0005
L0004: DEC             L01
       PUT_PROP        L00,#0a,L01
L0005: INC             G5c
       JUMP            L0001
L0006: RTRUE           

Routine R0212, 0 locals

       RTRUE           

Routine R0213, 4 locals

       CALL_VS         R0217 (L00,L01) -> L03
       JZ              L03 [FALSE] L0001
       RTRUE           
L0001: STOREW          L03,#00,L02
       RTRUE           

Routine R0214, 3 locals

       CALL_VS         R0217 (L00,L01) -> L02
       JZ              L02 [FALSE] L0001
       GET_PROP        L00,L01 -> -(SP)
       RET_POPPED      
L0001: LOADW           L02,#00 -> -(SP)
       RET_POPPED      

Routine R0215, 15 locals

       JL              L00,#01 [TRUE] L0001
       SUB             #0167,#ff -> -(SP)
       JG              L00,(SP)+ [FALSE] L0007
L0001: CALL_2S         R0282 (L00) -> -(SP)
       PULL            Gef
       JE              Gef,#02 [FALSE] L0003
       JE              L01,#45 [FALSE] L0002
       STORE           L0b,Gea
       STORE           Gea,Geb
       STORE           Geb,L00
       STORE           Ge9,G12
       CALL_VS2        L00 (L02,L03,L04,L05,L06,L07) -> L08
       STORE           Geb,Gea
       STORE           Gea,L0b
       RET             L08
L0002: JUMP            L0013
L0003: JE              Gef,#03 [FALSE] L0006
       JE              L01,#46 [FALSE] L0004
       PRINT_PADDR     L00
       RTRUE           
L0004: JE              L01,#47 [FALSE] L0005
       OUTPUT_STREAM   REDIRECT_ENABLE,L02
       PRINT_PADDR     L00
       OUTPUT_STREAM   #fffd
       LOADW           L02,#00 -> -(SP)
       RET_POPPED      
L0005: JUMP            L0013
L0006: JUMP            L0013
L0007: CHECK_ARG_COUNT #03 [FALSE] L0008
       INC             L09
       CHECK_ARG_COUNT #04 [FALSE] L0008
       INC             L09
       CHECK_ARG_COUNT #05 [FALSE] L0008
       INC             L09
       CHECK_ARG_COUNT #06 [FALSE] L0008
       INC             L09
       CHECK_ARG_COUNT #07 [FALSE] L0008
       INC             L09
       CHECK_ARG_COUNT #08 [FALSE] L0008
       INC             L09
L0008: JG              L01,#00 [FALSE] L0011
       JL              L01,#40 [FALSE] L0011
       GET_PROP_ADDR   L00,L01 -> L08
       JZ              L08 [FALSE] L0009
       SUB             L01,#01 -> -(SP)
       MUL             #02,(SP)+ -> -(SP)
       LOADW           #0a,#00 -> -(SP)
       ADD             (SP)+,(SP)+ -> L08
       STORE           L0d,#02
       JUMP            L0010
L0009: GET_PROP_LEN    L08 -> L0d
L0010: JUMP            L0017
L0011: JL              L01,#40 [TRUE] L0012
       JL              L01,#45 [FALSE] L0012
       JIN             L00,"Class" [FALSE] L0012
       CALL_VS2        R0216 (L00,L01,L09,L02,L03,L04,L05) -> -(SP)
       RET_POPPED      
L0012: CALL_VS         R0217 (L00,L01) -> L08
       JZ              L08 [FALSE] L0014
L0013: RTRUE           
L0014: SUB             L08,#01 -> -(SP)
       LOADB           #00,(SP)+ -> L0d
       AND             L01,#c000 -> -(SP)
       JE              (SP)+,#4000 [FALSE] L0017
       AND             L0d,#c0 -> -(SP)
       PULL            Gef
       JE              Gef,#00 [FALSE] L0015
       STORE           L0d,#01
       JUMP            L0017
L0015: JE              Gef,#40 [FALSE] L0016
       STORE           L0d,#02
       JUMP            L0017
L0016: JE              Gef,#80 [FALSE] L0017
       AND             L0d,#3f -> L0d
L0017: MUL             #02,L0e -> -(SP)
       JL              (SP)+,L0d [FALSE] L0029
       LOADW           L08,L0e -> -(SP)
       JE              (SP)+,#ffff [TRUE] RFALSE
       LOADW           L08,L0e -> -(SP)
       CALL_2S         R0282 ((SP)+) -> -(SP)
       PULL            Gef
       JE              Gef,#02 [FALSE] L0026
       STORE           L0b,Gea
       STORE           Gea,Geb
       STORE           Geb,L00
       STORE           L0c,Ge9
       STORE           Gef,L09
       JE              Gef,#00 [FALSE] L0018
       LOADW           L08,L0e -> -(SP)
       CALL_1S         (SP)+ -> L0a
       JUMP            L0024
L0018: JE              Gef,#01 [FALSE] L0019
       LOADW           L08,L0e -> -(SP)
       CALL_2S         (SP)+ (L02) -> L0a
       JUMP            L0024
L0019: JE              Gef,#02 [FALSE] L0020
       LOADW           L08,L0e -> -(SP)
       CALL_VS         (SP)+ (L02,L03) -> L0a
       JUMP            L0024
L0020: JE              Gef,#03 [FALSE] L0021
       LOADW           L08,L0e -> -(SP)
       CALL_VS         (SP)+ (L02,L03,L04) -> L0a
       JUMP            L0024
L0021: JE              Gef,#04 [FALSE] L0022
       LOADW           L08,L0e -> -(SP)
       CALL_VS2        (SP)+ (L02,L03,L04,L05) -> L0a
       JUMP            L0024
L0022: JE              Gef,#05 [FALSE] L0023
       LOADW           L08,L0e -> -(SP)
       CALL_VS2        (SP)+ (L02,L03,L04,L05,L06) -> L0a
       JUMP            L0024
L0023: JE              Gef,#06 [FALSE] L0024
       LOADW           L08,L0e -> -(SP)
       CALL_VS2        (SP)+ (L02,L03,L04,L05,L06,L07) -> L0a
L0024: STORE           Geb,Gea
       STORE           Gea,L0b
       STORE           Ge9,L0c
       JZ              L0a [TRUE] L0025
       RET             L0a
L0025: JUMP            L0028
L0026: JE              Gef,#03 [FALSE] L0027
       LOADW           L08,L0e -> -(SP)
       PRINT_PADDR     (SP)+
       NEW_LINE        
       RTRUE           
L0027: LOADW           L08,L0e -> -(SP)
       RET_POPPED      
L0028: INC             L0e
       JUMP            L0017
L0029: RFALSE          

Routine R0216, 8 locals

       STORE           Gef,L01
       JE              Gef,#40 [FALSE] L0008
       STORE           Gef,#00
       GET_CHILD       L00 -> -(SP) [FALSE] L0002
L0001: INC             Gef
       GET_SIBLING     (SP)+ -> -(SP) [TRUE] L0001
L0002: PULL            Gee
       PUSH            Gef
       JG              (SP)+,#01 [FALSE] RFALSE
       GET_CHILD       L00 -> L07 [FALSE] L0003
L0003: REMOVE_OBJ      L07
       CALL_VS         R0219 (L07,#40) -> -(SP)
       JZ              (SP)+ [TRUE] L0007
       JZ              L02 [FALSE] L0004
       CALL_VN         R0215 (L07,#40)
L0004: JE              L02,#01 [FALSE] L0005
       CALL_VN         R0215 (L07,#40,L03)
L0005: JE              L02,#02 [FALSE] L0006
       CALL_VN2        R0215 (L07,#40,L03,L04)
L0006: JL              L02,#03 [TRUE] L0007
       CALL_VN2        R0215 (L07,#40,L03,L04,L05)
L0007: RET             L07
L0008: JE              Gef,#41 [FALSE] L0015
       CALL_VS         R0220 (L03,L00) -> -(SP)
       JZ              (SP)+ [FALSE] L0009
       RFALSE          
L0009: GET_CHILD       L00 -> -(SP) [FALSE] L0010
L0010: CALL_VN         R0281 (L03,(SP)+)
       CALL_VS         R0219 (L03,#40) -> -(SP)
       JZ              (SP)+ [TRUE] L0014
       JE              L02,#01 [FALSE] L0011
       CALL_VN         R0215 (L03,#40)
L0011: JE              L02,#02 [FALSE] L0012
       CALL_VN         R0215 (L03,#40,L04)
L0012: JE              L02,#03 [FALSE] L0013
       CALL_VN2        R0215 (L03,#40,L04,L05)
L0013: JL              L02,#04 [TRUE] L0014
       CALL_VN2        R0215 (L03,#40,L04,L05,L06)
L0014: RFALSE          
L0015: JE              Gef,#42 [FALSE] L0019
       CALL_VS         R0220 (L03,L00) -> -(SP)
       JZ              (SP)+ [FALSE] L0016
       RFALSE          
L0016: CALL_VS         R0219 (L03,#42) -> -(SP)
       JZ              (SP)+ [TRUE] L0017
       CALL_VN         R0215 (L03,#42)
L0017: GET_CHILD       L00 -> -(SP) [FALSE] L0018
L0018: CALL_VN         R0281 (L03,(SP)+)
       INSERT_OBJ      L03,L00
       RFALSE          
L0019: JE              Gef,#43 [FALSE] L0022
       STORE           Gef,#00
       GET_CHILD       L00 -> -(SP) [FALSE] L0021
L0020: INC             Gef
       GET_SIBLING     (SP)+ -> -(SP) [TRUE] L0020
L0021: PULL            Gee
       PUSH            Gef
       SUB             (SP)+,#01 -> -(SP)
       RET_POPPED      
L0022: JE              Gef,#44 [FALSE] L0025
       CALL_VS         R0220 (L03,L00) -> -(SP)
       JZ              (SP)+ [FALSE] L0023
       RFALSE          
L0023: CALL_VS         R0220 (L04,L00) -> -(SP)
       JZ              (SP)+ [FALSE] L0024
       RFALSE          
L0024: CALL_VN         R0281 (L03,L04)
       RFALSE          
L0025: RTRUE           

Routine R0217, 5 locals

       JZ              L00 [TRUE] RFALSE
       JL              L01,#40 [FALSE] L0001
       JG              L01,#00 [FALSE] L0001
       GET_PROP_ADDR   L00,L01 -> -(SP)
       RET_POPPED      
L0001: AND             L01,#8000 -> -(SP)
       JZ              (SP)+ [TRUE] L0004
       AND             L01,#ff -> -(SP)
       LOADW           #1379,(SP)+ -> L04
       GET_PROP_ADDR   L04,#03 -> Gef
       PUSH            Gef
       JZ              (SP)+ [TRUE] RFALSE
       CALL_VS         R0220 (L00,L04) -> -(SP)
       JZ              (SP)+ [TRUE] RFALSE
       AND             L01,#7f00 -> -(SP)
       DIV             (SP)+,#0100 -> L01
       GET_PROP        L04,#03 -> Gef
       STORE           L02,Gef
L0002: JG              L01,#00 [FALSE] L0003
       DEC             L01
       LOADB           L02,#02 -> -(SP)
       ADD             L02,(SP)+ -> -(SP)
       ADD             (SP)+,#03 -> L02
       JUMP            L0002
L0003: ADD             L02,#03 -> -(SP)
       RET_POPPED      
L0004: AND             L01,#4000 -> -(SP)
       JZ              (SP)+ [TRUE] L0006
       AND             L01,#ff -> -(SP)
       LOADW           #1379,(SP)+ -> L04
       AND             L01,#3f00 -> -(SP)
       DIV             (SP)+,#0100 -> L01
       CALL_VS         R0220 (L00,L04) -> -(SP)
       JZ              (SP)+ [TRUE] RFALSE
       LOADW           #00,#05 -> L02
       JE              L04,#02 [FALSE] L0005
       MUL             #02,L01 -> -(SP)
       ADD             L02,(SP)+ -> -(SP)
       SUB             (SP)+,#02 -> -(SP)
       RET_POPPED      
L0005: MUL             L04,#0e -> -(SP)
       ADD             L02,#7c -> -(SP)
       ADD             (SP)+,(SP)+ -> -(SP)
       DIV             (SP)+,#02 -> -(SP)
       LOADW           #00,(SP)+ -> L02
       LOADB           #00,L02 -> -(SP)
       MUL             #02,(SP)+ -> -(SP)
       ADD             L02,(SP)+ -> -(SP)
       ADD             (SP)+,#01 -> -(SP)
       CALL_VS         R0285 ((SP)+,#ffff) -> -(SP)
       ADD             (SP)+,#06 -> L02
       CALL_VS         R0285 (L02,L01) -> -(SP)
       RET_POPPED      
L0006: GET_PROP_ADDR   L00,#03 -> Gef
       PUSH            Gef
       JZ              (SP)+ [TRUE] RFALSE
       JIN             L00,"Class" [FALSE] L0007
       JL              L01,#40 [TRUE] RFALSE
       JL              L01,#48 [FALSE] RFALSE
L0007: JE              Geb,L00 [FALSE] L0008
       OR              L01,#8000 -> L03
L0008: GET_PROP        L00,#03 -> Gef
       STORE           L02,Gef
L0009: LOADW           L02,#00 -> -(SP)
       JZ              (SP)+ [TRUE] L0011
       LOADW           L02,#00 -> -(SP)
       JE              (SP)+,L01,L03 [FALSE] L0010
       ADD             L02,#03 -> -(SP)
       RET_POPPED      
L0010: LOADB           L02,#02 -> -(SP)
       ADD             L02,(SP)+ -> -(SP)
       ADD             (SP)+,#03 -> L02
       JUMP            L0009
L0011: RFALSE          

Routine R0218, 3 locals

       JL              L01,#40 [FALSE] L0001
       JG              L01,#00 [FALSE] L0001
       GET_PROP_ADDR   L00,L01 -> L02
       GET_PROP_LEN    L02 -> -(SP)
       RET_POPPED      
L0001: CALL_VS         R0217 (L00,L01) -> L02
       JZ              L02 [TRUE] RFALSE
       AND             L01,#c000 -> -(SP)
       JE              (SP)+,#4000 [FALSE] L0004
       SUB             L02,#01 -> -(SP)
       LOADB           (SP)+,#00 -> -(SP)
       AND             (SP)+,#c0 -> -(SP)
       PULL            Gef
       JE              Gef,#00 [FALSE] L0002
       RTRUE           
L0002: JE              Gef,#40 [FALSE] L0003
       RET             #02
L0003: JE              Gef,#80 [FALSE] L0004
       SUB             L02,#01 -> -(SP)
       LOADB           (SP)+,#00 -> -(SP)
       AND             (SP)+,#3f -> -(SP)
       RET_POPPED      
L0004: SUB             L02,#01 -> -(SP)
       LOADB           (SP)+,#00 -> -(SP)
       RET_POPPED      

Routine R0219, 3 locals

       JL              L00,#01 [TRUE] L0001
       SUB             #0167,#ff -> -(SP)
       JG              L00,(SP)+ [FALSE] L0004
L0001: JE              L01,#46,#47,#45 [FALSE] RFALSE
       CALL_2S         R0282 (L00) -> -(SP)
       PULL            Gef
       JE              Gef,#02 [FALSE] L0002
       JE              L01,#45 [TRUE] RTRUE
       JUMP            L0003
L0002: JE              Gef,#03 [FALSE] L0003
       JE              L01,#46,#47 [TRUE] RTRUE
L0003: RFALSE          
L0004: JL              L01,#40 [FALSE] L0005
       GET_PROP_ADDR   L00,L01 -> L02
       JZ              L02 [FALSE] RTRUE
       RFALSE          
L0005: CALL_VS         R0217 (L00,L01) -> -(SP)
       JZ              (SP)+ [FALSE] RTRUE
       JL              L01,#48 [FALSE] L0006
       JIN             L00,"Class" [TRUE] RTRUE
L0006: RFALSE          

Routine R0220, 5 locals

       JL              L00,#01 [TRUE] L0001
       SUB             #0167,#ff -> -(SP)
       JG              L00,(SP)+ [FALSE] L0002
L0001: JE              L01,#03,#04 [FALSE] RFALSE
       SUB             L01,#01 -> -(SP)
       CALL_2S         R0282 (L00) -> -(SP)
       JE              (SP)+,(SP)+ [TRUE] RTRUE
       RFALSE          
L0002: JE              L01,#01 [FALSE] L0003
       JG              L00,#04 [FALSE] RTRUE
       JIN             L00,"Class" [TRUE] RTRUE
       RFALSE          
L0003: JE              L01,#02 [FALSE] L0004
       JG              L00,#04 [FALSE] RFALSE
       JIN             L00,"Class" [TRUE] RFALSE
       RTRUE           
L0004: JE              L01,#03,#04 [FALSE] L0005
       RFALSE          
L0005: JIN             L01,"Class" [TRUE] L0006
       RFALSE          
L0006: GET_PROP_ADDR   L00,#02 -> L03
       JZ              L03 [TRUE] RFALSE
       GET_PROP_LEN    L03 -> L04
       STORE           L02,#00
L0007: DIV             L04,#02 -> -(SP)
       JL              L02,(SP)+ [FALSE] L0008
       LOADW           L03,L02 -> -(SP)
       JE              (SP)+,L01 [TRUE] RTRUE
       INC             L02
       JUMP            L0007
L0008: RFALSE          

Routine R0221, 0 locals

       STORE           G01,G04
       STORE           G02,G08
       RTRUE           

Routine R0222, 0 locals

       INC             G08
       CALL_1N         R0211
       JL              G32,#01 [FALSE] RTRUE
       CALL_1N         R0200
       JL              G32,#01 [FALSE] RTRUE
       JZ              G16 [FALSE] L0002
       GET_CHILD       G0d -> -(SP) [FALSE] L0001
L0001: JE              (SP)+,G17,#00 [TRUE] L0003
L0002: CALL_1N         R0198
       STORE           G16,#00
       GET_CHILD       G0d -> G17 [FALSE] L0003
L0003: RTRUE           

Routine R0223, 3 locals

       PRINT           "Inform error: "
       CALL_VS         R0220 (L00,#04) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       PRINT_PADDR     L00
       PRINT           " - "
       JUMP            L0002
L0001: PRINT_NUM       L00
       NEW_LINE        
       RTRUE           
L0002: PRINT           " ("
       PRINT_NUM       L01
       PRINT           ", "
       PRINT_NUM       L02
       PRINT_RET       ")"

Routine R0224, 1 local

       SUB             L00,#10 -> -(SP)
       ADD             (SP)+,#2711 -> -(SP)
       RET_POPPED      

Routine R0225, 3 locals

       STORE           L00,#05
L0001: GET_PROP_ADDR   L00,#18 -> L02
       JZ              L02 [FALSE] L0004
       GET_PROP_ADDR   L00,#19 -> L02
       JZ              L02 [FALSE] L0004
       GET_PROP_ADDR   L00,#1c -> L02
       JZ              L02 [FALSE] L0004
       GET_PROP_ADDR   L00,#1a -> L02
       JZ              L02 [FALSE] L0004
L0002: GET_PROP_ADDR   L00,#09 -> L02
       JZ              L02 [TRUE] L0003
       PUSH            L01
       INC             L01
       STOREW          #1894,(SP)+,L00
L0003: INC_CHK         L00,G3f [FALSE] L0001
       RTRUE           
L0004: SET_ATTR        L00,#1b
       JUMP            L0002

Routine R0226, 9 locals

       LOADB           #21,#00 -> G4c
       LOADW           #08,#00 -> G49
       LOADB           G49,#00 -> L00
       ADD             L00,#01 -> -(SP)
       LOADB           G49,(SP)+ -> G4a
       ADD             G49,L00 -> -(SP)
       ADD             (SP)+,#04 -> G49
       SUB             G49,#02 -> -(SP)
       LOADW           (SP)+,#00 -> -(SP)
       MUL             (SP)+,G4a -> -(SP)
       ADD             G49,(SP)+ -> G4b
       STOREB          #197f,#00,#14
       STOREB          #192e,#00,#4e
       SUB             #0167,#ff -> G3f
       LOADB           #01,#00 -> -(SP)
       AND             (SP)+,#02 -> -(SP)
       DIV             (SP)+,#02 -> G07
       STORE           G0d,#06
       STORE           G32,#00
       STORE           G08,#ffff
       STORE           G04,#00
       NEW_LINE        
       CALL_1N         R0225
       CALL_1S         R0232 -> L01
       GET_CHILD       G0d -> -(SP) [FALSE] L0001
L0001: PULL            L00
       JZ              L00 [TRUE] L0003
L0002: SET_ATTR        L00,#0a
       CLEAR_ATTR      L00,#09
       GET_SIBLING     L00 -> L00 [TRUE] L0002
L0003: STORE           G16,#00
       JE              L01,#02 [TRUE] L0004
       CALL_1N         R0108
       NEW_LINE        
L0004: GET_PARENT      G0d -> -(SP)
       JZ              (SP)+ [FALSE] L0005
       STORE           L00,G00
       STORE           G00,#00
       CALL_2N         R0150 (L00)
L0005: NEW_LINE        
       INC             G08
L0006: JZ              G32 [FALSE] L0026
       LOADB           #21,#00 -> G4c
       CALL_1N         R0221
       JG              L03,#00 [FALSE] L0007
       NEW_LINE        
L0007: STORE           L05,G04
       LOADB           #197f,#01 -> -(SP)
       JZ              (SP)+ [FALSE] L0008
       CALL_1N         R0170
       STORE           L08,#00
L0008: STORE           L07,G2c
L0009: CALL_1S         R0195 -> L03
       JE              G12,#54 [FALSE] L0011
       JZ              L06 [TRUE] L0010
       JG              L07,#00 [FALSE] L0010
       CALL_VN         R0173 (#19d5,#192e)
       CALL_VN         R0174 (#1a26,#197f)
       LOADB           #197f,#01 -> G11
       STOREW          L07,#00,G1d
       STORE           L06,#00
       JUMP            L0009
L0010: CALL_2N         G5d (S066)
L0011: JE              G12,#4e [FALSE] L0014
       JZ              L08 [TRUE] L0012
       CALL_2N         G5d (S067)
       STOREB          #197f,#01,#00
       JUMP            L0006
L0012: JZ              L06 [TRUE] L0013
       CALL_VN         R0173 (#19d5,#192e)
       CALL_VN         R0174 (#1a26,#197f)
       LOADB           #197f,#01 -> G11
       JUMP            L0009
L0013: CALL_2N         G5d (S068)
       JUMP            L0016
L0014: LOADB           #197f,#01 -> -(SP)
       JZ              (SP)+ [FALSE] L0015
       STORE           L06,#00
       JUMP            L0016
L0015: STORE           L06,#01
       CALL_VN         R0173 (#192e,#19d5)
       CALL_VN         R0174 (#197f,#1a26)
L0016: JG              L03,#00 [TRUE] L0017
       SUB             #00,L03 -> L03
       JUMP            L0018
L0017: LOADB           #197f,#01 -> L03
L0018: JL              G12,#00 [TRUE] L0019
       JZ              G15 [FALSE] L0019
       JG              L03,#00 [FALSE] L0019
       CALL_1N         R0222
L0019: JE              L05,G04 [TRUE] L0020
       JE              G06,#01 [FALSE] L0020
       CALL_VN         G5d (#7a,L05)
L0020: LOADB           #197f,#01 -> L04
       JG              L04,L03 [FALSE] L0024
       MUL             #02,L04 -> -(SP)
       ADD             (SP)+,#01 -> L02
       STORE           L00,#01
       MUL             #02,L03 -> -(SP)
       ADD             (SP)+,#01 -> L01
       JUMP            L0022
L0021: INC             L00
       INC             L01
L0022: JL              L01,L02 [FALSE] L0023
       LOADW           #197f,L01 -> -(SP)
       STOREW          #197f,L00,(SP)+
       JUMP            L0021
L0023: SUB             L04,L03 -> -(SP)
       STOREB          #197f,#01,(SP)+
       STORE           L08,#01
       JUMP            L0025
L0024: STOREB          #197f,#01,#00
L0025: JUMP            L0006
       STOREB          #197f,#01,#00
       STORE           L03,#00
       JUMP            L0006
L0026: CALL_1N         R0221
       NEW_LINE        
       JE              G32,#ffff [FALSE] L0027
       QUIT            
L0027: SET_TEXT_STYLE  BOLDFACE
       PRINT           "
  *** "
       JE              G32,#02 [FALSE] L0028
       CALL_2N         G5d (#3f)
       JUMP            L0029
L0028: JE              G32,#01 [FALSE] L0029
       CALL_2N         G5d (#40)
L0029: PRINT           " ***

"
       SET_TEXT_STYLE  ROMAN
       CALL_2N         R0206 (#58)
L0030: CALL_2N         G5d (#21)
       CALL_2N         R0170 (#01)
       LOADW           #197f,#01 -> G18
       JE              G18,"restart" [FALSE] L0031
       RESTART         
L0031: JE              G18,"restore" [FALSE] L0032
       CALL_2N         R0206 (#56)
L0032: JE              G18,"quit" [FALSE] L0033
       QUIT            
L0033: JE              G18,"full" [FALSE] L0034
       CALL_2N         R0206 (#50)
L0034: JUMP            L0030

Routine R0227, 0 locals
    Action routine for:
        "clean noun on noun"
        "clean noun onto noun"
        "clean noun at noun"

       JZ              G23 [TRUE] L0001
       PRINT           "Shining "
       CALL_2N         R0208 (G22)
       PRINT           " on "
       CALL_2N         R0208 (G23)
       PRINT_PADDR     S115
       JUMP            L0002
L0001: PRINT           "You shine "
       CALL_2N         R0208 (G22)
       PRINT           ".
"
L0002: RTRUE           

Routine R0228, 0 locals
    Action routine for:
        "light noun with noun"
        "light noun"

       PRINT           "You try to light "
       CALL_2N         R0208 (G22)
       PRINT_PADDR     S116
       RTRUE           

Routine R0229, 0 locals
    Action routine for:
        "ignite noun with noun"
        "ignite noun"

       PRINT           "You try to ignite "
       CALL_2N         R0208 (G22)
       PRINT_PADDR     S117
       RTRUE           

Routine R0230, 0 locals
    Action routine for:
        "talk noun"
        "talk to noun"

       TEST_ATTR       G22,#02 [FALSE] L0001
       PRINT           "You try to talk to "
       CALL_2N         R0208 (G22)
       PRINT_PADDR     S118
       JUMP            L0002
L0001: PRINT           "You talk to "
       CALL_2N         R0208 (G22)
       PRINT_PADDR     S119
L0002: RTRUE           

Routine R0231, 0 locals
    Action routine for:
        "hack noun"

       PRINT_RET       "You can't hack that.
"

Routine R0232, 0 locals

       PRINT_PADDR     S120
       STORE           G00,#0008
       INSERT_OBJ      "Electronic Badge",G0d
       STORE           G69,G69
       RTRUE           

Routine R0233, 0 locals

       JE              Ge9,#00,#17,#01 [FALSE] L0001
       PRINT_PADDR     S122
       RTRUE           
L0001: RFALSE          

Routine R0234, 0 locals

       JE              G12,#03 [FALSE] L0001
       JE              G22,Geb [FALSE] L0001
       JE              G23,"help" [FALSE] L0001
       PRINT_PADDR     S128
       RTRUE           
L0001: JE              G12,#69 [FALSE] L0002
       PRINT_PADDR     S129
       RTRUE           
L0002: RFALSE          

Routine R0235, 0 locals

       JE              Ge9,#32,#14,#23 [TRUE] L0001
       JE              Ge9,#22,#06 [FALSE] L0002
L0001: PRINT           "You are now dead!
"
       STORE           G32,#01
       RTRUE           
L0002: RFALSE          

Routine R0236, 0 locals

       JE              Ge9,#1f [FALSE] L0003
       JE              G22,Geb [FALSE] L0002
       TEST_ATTR       "Cracked Bluebox Casing",#09 [FALSE] L0001
       PRINT_PADDR     S134
       CLEAR_ATTR      "Cracked Bluebox Casing",#09
       RTRUE           
L0001: PRINT_PADDR     S135
       RTRUE           
L0002: RFALSE          
L0003: JE              Ge9,#12 [FALSE] L0007
       JE              G22,Geb [FALSE] L0006
       PRINT_PADDR     S136
       TEST_ATTR       "Cracked Bluebox Casing",#09 [FALSE] L0004
       PRINT_PADDR     S137
       JUMP            L0005
L0004: PRINT_PADDR     S138
L0005: RTRUE           
L0006: RFALSE          
L0007: RFALSE          

Routine R0237, 0 locals

       JE              Ge9,#12 [FALSE] L0002
       JE              G22,Geb [FALSE] L0001
       PRINT_PADDR     S140
       RTRUE           
L0001: RFALSE          
L0002: RFALSE          

Routine R0238, 0 locals

       JE              Ge9,#12 [FALSE] L0002
       JE              G18,"examine" [FALSE] L0001
       PRINT_PADDR     S143
       RTRUE           
L0001: RFALSE          
L0002: RFALSE          

Routine R0239, 0 locals

       JE              Ge9,#66 [FALSE] L0001
       PRINT_PADDR     S147
       RTRUE           
L0001: JE              Ge9,#03 [FALSE] L0004
       JE              G23,"5n4ck3","snackey","snack" [TRUE] L0002
       JE              G23,"vending","machine" [FALSE] L0003
L0002: PRINT_PADDR     S148
       RTRUE           
L0003: PRINT_PADDR     S149
       NEW_LINE        
       RTRUE           
L0004: RFALSE          

Routine R0240, 0 locals

       CALL_VS         R0214 (#17,#4a) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       PRINT           "Smoldering Ruins of Gas Station"
       RTRUE           
L0001: RFALSE          

Routine R0241, 0 locals

       JIN             "Oil Slick",Geb [FALSE] L0001
       CALL_2N         R0154 (#0018)
L0001: RFALSE          

Routine R0242, 0 locals

       JE              Ge9,#65,#67 [FALSE] L0003
       JE              G00,#17 [FALSE] L0002
       JIN             "Tattered Matchbook",G0d [FALSE] L0001
       PRINT_PADDR     S152
       REMOVE_OBJ      "Tattered Matchbook"
       PUT_PROP        "Gas Station",#0c,S153
       PUT_PROP        "Gas Station",#07,S154
       PUT_PROP        "Gas Station",#10,#003f
       PUT_PROP        "Vegas Strip South",#11,#17
       REMOVE_OBJ      Geb
       CALL_VN         R0213 (#17,#4a,#01)
       RTRUE           
L0001: PRINT_PADDR     S155
       RTRUE           
L0002: RFALSE          
L0003: RFALSE          

Routine R0243, 0 locals

       JE              Ge9,#17 [FALSE] L0002
       JE              G23,#0036 [FALSE] L0001
       GET_PARENT      "Technical Manual for Vintage Synthesizer" -> -(SP)
       JE              (SP)+,G0d [FALSE] L0001
       PRINT_PADDR     S160
       REMOVE_OBJ      "Technical Manual for Vintage Synthesizer"
       RTRUE           
L0001: PRINT_PADDR     S161
       NEW_LINE        
       RTRUE           
L0002: JE              Ge9,#66 [FALSE] L0003
       PRINT_PADDR     S162
       RTRUE           
L0003: JE              Ge9,#03 [FALSE] L0006
       JE              G23,"5n4ck3","snackey","snack" [TRUE] L0004
       JE              G23,"vending","machine" [FALSE] L0005
L0004: PRINT_PADDR     S163
       RTRUE           
L0005: PRINT_PADDR     S164
       NEW_LINE        
       RTRUE           
L0006: RFALSE          

Routine R0244, 0 locals

       JE              Ge9,#1f,#20 [FALSE] L0003
       JE              G22,Geb [FALSE] L0002
       TEST_ATTR       "Casino Chip #3",#09 [FALSE] L0001
       PRINT_PADDR     S166
       CLEAR_ATTR      "Casino Chip #3",#09
       RTRUE           
L0001: PRINT_PADDR     S167
       RTRUE           
L0002: RFALSE          
L0003: JE              Ge9,#12 [FALSE] L0007
       JE              G22,Geb [FALSE] L0006
       TEST_ATTR       "Casino Chip #3",#09 [FALSE] L0004
       PRINT_PADDR     S168
       JUMP            L0005
L0004: PRINT_PADDR     S169
L0005: NEW_LINE        
       RTRUE           
L0006: RFALSE          
L0007: RFALSE          

Routine R0245, 1 local

L0001: CALL_1S         R0177 -> -(SP)
       PULL            Gef
       JE              Gef,"chip","3","poker" [TRUE] L0002
       JE              Gef,"casino","token","#3" [TRUE] L0002
       JE              Gef,"three","chip3","chip#3" [FALSE] L0003
L0002: INC             L00
       JUMP            L0001
L0003: RET             L00

Routine R0246, 0 locals

       CALL_VS         R0214 (Geb,#004b) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       PRINT_PADDR     S172
       JUMP            L0002
L0001: PRINT_PADDR     S173
L0002: RTRUE           

Routine R0247, 0 locals

       JE              Ge9,#1001 [FALSE] L0003
       JE              G22,#0039 [FALSE] L0003
       CALL_VS         R0214 (Geb,#4b) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       PRINT_PADDR     S174
       JUMP            L0002
L0001: INSERT_OBJ      "NiMH Battery",Geb
       CALL_VN         R0213 (Geb,#4b,#01)
       PRINT_PADDR     S175
L0002: RTRUE           
L0003: RFALSE          

Routine R0248, 0 locals

       JIN             "Manhole Cover",Geb [FALSE] L0001
       CALL_VS         R0214 (#0022,#004c) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       RET             #003d
L0001: PRINT_PADDR     S177
       RET             Geb

Routine R0249, 0 locals

       CALL_VS         R0214 (Geb,#004c) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       PRINT_PADDR     S178
       JUMP            L0002
L0001: PRINT_PADDR     S179
L0002: RTRUE           

Routine R0250, 0 locals

       JE              G12,#20 [TRUE] L0001
       JE              G12,#21 [FALSE] L0006
L0001: CALL_VS         R0214 (Geb,#4c) -> -(SP)
       JZ              (SP)+ [TRUE] L0002
       PRINT           "It's already open.
"
       RTRUE           
L0002: JE              G23,#13 [FALSE] L0003
       CALL_VN         R0213 (Geb,#4c,#01)
       PRINT_PADDR     S180
       RTRUE           
L0003: JZ              G23 [FALSE] L0004
       JIN             "Crowbar",G0d [FALSE] L0004
       CALL_VN         R0213 (Geb,#4c,#01)
       PRINT_PADDR     S181
       RTRUE           
L0004: JZ              G23 [TRUE] L0005
       JE              G23,#13 [TRUE] L0005
       PRINT           "You try to open "
       CALL_2N         R0208 (G22)
       PRINT           " with "
       CALL_2N         R0208 (G23)
       PRINT_PADDR     S182
       RTRUE           
L0005: PRINT_PADDR     S183
       RTRUE           
L0006: RFALSE          

Routine R0251, 0 locals

       JE              Ge9,#1f [FALSE] L0003
       JE              G22,Geb [FALSE] L0002
       TEST_ATTR       "Casino Chip #1",#09 [FALSE] L0001
       PRINT_PADDR     S189
       CLEAR_ATTR      "Casino Chip #1",#09
       RTRUE           
L0001: PRINT_PADDR     S190
       RTRUE           
L0002: RFALSE          
L0003: JE              Ge9,#12 [FALSE] L0007
       JE              G22,Geb [FALSE] L0006
       TEST_ATTR       "Casino Chip #1",#09 [FALSE] L0004
       PRINT_PADDR     S191
       JUMP            L0005
L0004: PRINT_PADDR     S192
L0005: NEW_LINE        
       RTRUE           
L0006: RFALSE          
L0007: RFALSE          

Routine R0252, 1 local

L0001: CALL_1S         R0177 -> -(SP)
       PULL            Gef
       JE              Gef,"chip","1","poker" [TRUE] L0002
       JE              Gef,"casino","token","#1" [TRUE] L0002
       JE              Gef,"one","chip1","chip#1" [FALSE] L0003
L0002: INC             L00
       JUMP            L0001
L0003: RET             L00

Routine R0253, 0 locals

       JE              Ge9,#66 [FALSE] L0001
       PRINT_PADDR     S198
       RTRUE           
L0001: JE              Ge9,#03 [FALSE] L0004
       JE              G23,"5n4ck3","snackey","snack" [TRUE] L0002
       JE              G23,"vending","machine" [FALSE] L0003
L0002: PRINT_PADDR     S199
       RTRUE           
L0003: PRINT_PADDR     S200
       NEW_LINE        
       RTRUE           
L0004: RFALSE          

Routine R0254, 0 locals

       JE              Ge9,#1f,#20 [FALSE] L0003
       JE              G22,Geb [FALSE] L0002
       TEST_ATTR       "Casino Chip #2",#09 [FALSE] L0001
       PRINT_PADDR     S203
       CLEAR_ATTR      "Casino Chip #2",#09
       RTRUE           
L0001: PRINT_PADDR     S204
       RTRUE           
L0002: RFALSE          
L0003: JE              Ge9,#12 [FALSE] L0007
       JE              G22,Geb [FALSE] L0006
       TEST_ATTR       "Casino Chip #2",#09 [FALSE] L0004
       PRINT_PADDR     S205
       JUMP            L0005
L0004: PRINT_PADDR     S206
L0005: NEW_LINE        
       RTRUE           
L0006: RFALSE          
L0007: RFALSE          

Routine R0255, 1 local

L0001: CALL_1S         R0177 -> -(SP)
       PULL            Gef
       JE              Gef,"chip","2","poker" [TRUE] L0002
       JE              Gef,"casino","token","#2" [TRUE] L0002
       JE              Gef,"two","chip2","chip#2" [FALSE] L0003
L0002: INC             L00
       JUMP            L0001
L0003: RET             L00

Routine R0256, 0 locals

       JE              Ge9,#66 [FALSE] L0001
       PRINT_PADDR     S210
       RTRUE           
L0001: JE              Ge9,#03 [FALSE] L0004
       JE              G23,"5n4ck3","snackey","snack" [TRUE] L0002
       JE              G23,"vending","machine" [FALSE] L0003
L0002: PRINT_PADDR     S211
       RTRUE           
L0003: PRINT_PADDR     S212
       NEW_LINE        
       RTRUE           
L0004: RFALSE          

Routine R0257, 0 locals

       JE              Ge9,#12,#20,#1f [FALSE] L0001
       PRINT_PADDR     S216
       RTRUE           
L0001: RFALSE          

Routine R0258, 0 locals

       JE              Ge9,#17 [FALSE] L0002
       JE              G23,#0042 [FALSE] L0001
       GET_PARENT      "Encrypted Data Chip" -> -(SP)
       JE              (SP)+,G0d [FALSE] L0001
       PRINT_PADDR     S220
       REMOVE_OBJ      "Encrypted Data Chip"
       INSERT_OBJ      "Technical Manual for Vintage Synthesizer",G0d
       RTRUE           
L0001: PRINT_PADDR     S221
       NEW_LINE        
       RTRUE           
L0002: JE              Ge9,#66 [FALSE] L0003
       PRINT_PADDR     S222
       RTRUE           
L0003: JE              Ge9,#03 [FALSE] L0008
       JE              G23,"5n4ck3","snackey","snack" [TRUE] L0004
       JE              G23,"vending","machine" [FALSE] L0005
L0004: PRINT_PADDR     S223
       RTRUE           
L0005: JE              G23,"technical","manual","tech" [TRUE] L0006
       JE              G23,S190 OR "synthesiz" [FALSE] L0007
L0006: PRINT_PADDR     S224
       RTRUE           
L0007: PRINT_PADDR     S225
       NEW_LINE        
       RTRUE           
L0008: RFALSE          

Routine R0259, 0 locals

       JE              Ge9,#14 [FALSE] L0001
       GET_PARENT      Geb -> -(SP)
       JE              (SP)+,#20 [FALSE] L0001
       CALL_VS         R0214 (#20,#4b) -> -(SP)
       JZ              (SP)+ [TRUE] L0001
       INSERT_OBJ      Geb,G0d
       CALL_VN         R0213 (#20,#4b,#00)
       PRINT_PADDR     S228
       RTRUE           
L0001: RFALSE          

Routine R0260, 0 locals

       JE              Ge9,#1f [FALSE] L0003
       JE              G22,Geb [FALSE] L0002
       TEST_ATTR       "Casino Chip #5",#09 [FALSE] L0001
       PRINT_PADDR     S231
       CLEAR_ATTR      "Casino Chip #5",#09
       RTRUE           
L0001: PRINT_PADDR     S232
       RTRUE           
L0002: RFALSE          
L0003: JE              Ge9,#12 [FALSE] L0007
       JE              G22,Geb [FALSE] L0006
       TEST_ATTR       "Casino Chip #5",#09 [FALSE] L0004
       PRINT_PADDR     S233
       JUMP            L0005
L0004: PRINT_PADDR     S234
L0005: NEW_LINE        
       RTRUE           
L0006: RFALSE          
L0007: RFALSE          

Routine R0261, 1 local

L0001: CALL_1S         R0177 -> -(SP)
       PULL            Gef
       JE              Gef,"chip","5","poker" [TRUE] L0002
       JE              Gef,"casino","token","#5" [TRUE] L0002
       JE              Gef,"five","chip5","chip#5" [FALSE] L0003
L0002: INC             L00
       JUMP            L0001
L0003: RET             L00

Routine R0262, 0 locals

       JE              Ge9,#17 [FALSE] L0002
       JE              G23,#24 [FALSE] L0001
       GET_PARENT      "Bottle of Red Pills" -> -(SP)
       JE              (SP)+,G0d [FALSE] L0001
       PRINT_PADDR     S240
       RTRUE           
L0001: PRINT_PADDR     S241
       RTRUE           
L0002: RFALSE          

Routine R0263, 0 locals

       JE              Ge9,#17 [FALSE] L0002
       JE              G23,#004a [FALSE] L0001
       GET_PARENT      "Neon Tube Filaments" -> -(SP)
       JE              (SP)+,G0d [FALSE] L0001
       PRINT_PADDR     S245
       REMOVE_OBJ      "Neon Tube Filaments"
       INSERT_OBJ      "Encrypted Data Chip",G0d
       RTRUE           
L0001: PRINT_PADDR     S246
       NEW_LINE        
       RTRUE           
L0002: JE              Ge9,#66 [FALSE] L0003
       PRINT_PADDR     S247
       RTRUE           
L0003: JE              Ge9,#03 [FALSE] L0008
       JE              G23,"5n4ck3","snackey","snack" [TRUE] L0004
       JE              G23,"vending","machine" [FALSE] L0005
L0004: PRINT_PADDR     S248
       RTRUE           
L0005: JE              G23,"chip","data","encrypted" [TRUE] L0006
       JE              G23,"casino" [FALSE] L0007
L0006: PRINT_PADDR     S249
       RTRUE           
L0007: PRINT_PADDR     S250
       NEW_LINE        
       RTRUE           
L0008: RFALSE          

Routine R0264, 0 locals

       JE              Ge9,#12 [FALSE] L0001
       PRINT_PADDR     S253
       RTRUE           
L0001: RFALSE          

Routine R0265, 0 locals

       JE              Ge9,#66 [FALSE] L0001
       PRINT_PADDR     S255
       RTRUE           
L0001: JE              Ge9,#03 [FALSE] L0004
       JE              G23,"5n4ck3","snackey","snack" [TRUE] L0002
       JE              G23,"vending","machine" [FALSE] L0003
L0002: PRINT_PADDR     S256
       RTRUE           
L0003: PRINT_PADDR     S257
       NEW_LINE        
       RTRUE           
L0004: RFALSE          

Routine R0266, 0 locals

       JE              Ge9,#66 [FALSE] L0001
       PRINT_PADDR     S260
       RTRUE           
L0001: JE              Ge9,#03 [FALSE] L0004
       JE              G23,"5n4ck3","snackey","snack" [TRUE] L0002
       JE              G23,"vending","machine" [FALSE] L0003
L0002: PRINT_PADDR     S261
       RTRUE           
L0003: PRINT_PADDR     S262
       NEW_LINE        
       RTRUE           
L0004: RFALSE          

Routine R0267, 0 locals

       JE              Ge9,#17 [FALSE] L0002
       JE              G23,#005d [FALSE] L0001
       GET_PARENT      "Zero-Day Cocktail" -> -(SP)
       JE              (SP)+,G0d [FALSE] L0001
       PRINT_PADDR     S266
       REMOVE_OBJ      "Zero-Day Cocktail"
       INSERT_OBJ      "Neon Tube Filaments",G0d
       RTRUE           
L0001: PRINT_PADDR     S267
       NEW_LINE        
       RTRUE           
L0002: JE              Ge9,#66 [FALSE] L0003
       PRINT_PADDR     S268
       RTRUE           
L0003: JE              Ge9,#03 [FALSE] L0008
       JE              G23,"5n4ck3","snackey","snack" [TRUE] L0004
       JE              G23,"vending","machine" [FALSE] L0005
L0004: PRINT_PADDR     S269
       RTRUE           
L0005: JE              G23,"filaments","neon","tubes" [TRUE] L0006
       JE              G23,"collectio" [FALSE] L0007
L0006: PRINT_PADDR     S270
       RTRUE           
L0007: PRINT_PADDR     S271
       NEW_LINE        
       RTRUE           
L0008: RFALSE          

Routine R0268, 0 locals

       JE              Ge9,#03 [FALSE] L0006
       JE              G23,"5n4ck3","snackey","vending" [TRUE] L0001
       JE              G23,"machine" [FALSE] L0002
L0001: PRINT_PADDR     S274
       RTRUE           
L0002: JE              G23,"tech","old","technolog" [TRUE] L0003
       JE              G23,"gadgets","electroni" [FALSE] L0005
L0003: TEST_ATTR       "Japanese-English Translation Book",#09 [FALSE] L0004
       PRINT_PADDR     S275
       CLEAR_ATTR      "Japanese-English Translation Book",#09
       RTRUE           
L0004: PRINT_PADDR     S276
       NEW_LINE        
       RTRUE           
L0005: PRINT_PADDR     S277
       NEW_LINE        
       RTRUE           
L0006: RFALSE          

Routine R0269, 0 locals

       JE              Ge9,#17 [FALSE] L0002
       JE              G23,#2a [FALSE] L0001
       GET_PARENT      "Bottle of Malort" -> -(SP)
       JE              (SP)+,G0d [FALSE] L0001
       PRINT_PADDR     S283
       RTRUE           
L0001: PRINT_PADDR     S284
       RTRUE           
L0002: RFALSE          

Routine R0270, 0 locals

       JE              Ge9,#1f [FALSE] L0003
       JE              G22,Geb [FALSE] L0002
       TEST_ATTR       "Casino Chip #4",#09 [FALSE] L0001
       PRINT_PADDR     S287
       CLEAR_ATTR      "Casino Chip #4",#09
       RTRUE           
L0001: PRINT_PADDR     S288
       RTRUE           
L0002: RFALSE          
L0003: JE              Ge9,#12 [FALSE] L0007
       JE              G22,Geb [FALSE] L0006
       TEST_ATTR       "Casino Chip #4",#09 [FALSE] L0004
       PRINT_PADDR     S289
       JUMP            L0005
L0004: PRINT_PADDR     S290
L0005: NEW_LINE        
       RTRUE           
L0006: RFALSE          
L0007: RFALSE          

Routine R0271, 1 local

L0001: CALL_1S         R0177 -> -(SP)
       PULL            Gef
       JE              Gef,"chip","4","poker" [TRUE] L0002
       JE              Gef,"casino","token","#4" [TRUE] L0002
       JE              Gef,"four","chip4","chip#4" [FALSE] L0003
L0002: INC             L00
       JUMP            L0001
L0003: RET             L00

Routine R0272, 0 locals

       JE              Ge9,#03,#66 [FALSE] L0004
       JE              G22,Geb [FALSE] L0003
       JIN             "Casino Chip #1",G0d [FALSE] L0001
       JIN             "Casino Chip #2",G0d [FALSE] L0001
       JIN             "Casino Chip #3",G0d [FALSE] L0001
       JIN             "Casino Chip #4",G0d [FALSE] L0001
       JIN             "Casino Chip #5",G0d [FALSE] L0001
       PRINT_PADDR     S294
       REMOVE_OBJ      "Casino Chip #1"
       REMOVE_OBJ      "Casino Chip #2"
       REMOVE_OBJ      "Casino Chip #3"
       REMOVE_OBJ      "Casino Chip #4"
       REMOVE_OBJ      "Casino Chip #5"
       CALL_VN         R0213 (#57,#4d,#01)
       RTRUE           
L0001: CALL_VS         R0214 (#57,#4d) -> -(SP)
       JE              (SP)+,#01 [FALSE] L0002
       PRINT_PADDR     S295
       RTRUE           
L0002: PRINT_PADDR     S296
       RTRUE           
L0003: RFALSE          
L0004: RFALSE          

Routine R0273, 0 locals

       JE              Ge9,#12 [FALSE] L0002
       JE              G22,Geb [FALSE] L0001
       PRINT_PADDR     S298
       RTRUE           
L0001: RFALSE          
L0002: RFALSE          

Routine R0274, 0 locals

       JE              Ge9,#1f [FALSE] L0001
       PRINT_PADDR     S302
       RTRUE           
L0001: RFALSE          

Routine R0275, 0 locals

       JE              Ge9,#66 [FALSE] L0001
       PRINT_PADDR     S306
       RTRUE           
L0001: JE              Ge9,#30 [FALSE] L0003
       JE              G23,"mattdamon" [FALSE] L0002
       PRINT_PADDR     S307
       RTRUE           
L0002: RFALSE          
L0003: JE              Ge9,#03 [FALSE] L0007
       JE              G23,"5n4ck3","snackey","snack" [TRUE] L0004
       JE              G23,"vending","machine" [FALSE] L0005
L0004: PRINT_PADDR     S308
       RTRUE           
L0005: JE              G23,"cocktail","zero-day","zeroday" [FALSE] L0006
       PRINT_PADDR     S309
       INSERT_OBJ      "Zero-Day Cocktail",G0d
       PRINT_PADDR     S310
       RTRUE           
L0006: PRINT_PADDR     S311
       NEW_LINE        
       RTRUE           
L0007: RFALSE          

Routine R0276, 0 locals

       TEST_ATTR       Geb,#14 [FALSE] L0001
       PRINT_PADDR     S315
       JUMP            L0003
L0001: JIN             "Japanese-English Translation Book",G0d [FALSE] L0002
       PRINT_PADDR     S316
       SET_ATTR        Geb,#14
       JUMP            L0003
L0002: PRINT_PADDR     S317
L0003: RTRUE           

Routine R0277, 0 locals

       JE              Ge9,#68 [FALSE] L0003
       JE              G23,#60 [FALSE] L0003
       GET_PARENT      Geb -> -(SP)
       JE              (SP)+,G0d [FALSE] L0001
       PRINT_PADDR     S319
       JUMP            L0002
L0001: PRINT_PADDR     S320
L0002: RTRUE           
L0003: RFALSE          

Routine R0278, 0 locals

       JE              Ge9,#66 [FALSE] L0001
       PRINT_PADDR     S322
       RTRUE           
L0001: JE              Ge9,#03 [FALSE] L0004
       JE              G23,"5n4ck3","snackey","snack" [TRUE] L0002
       JE              G23,"vending","machine" [FALSE] L0003
L0002: PRINT_PADDR     S323
       RTRUE           
L0003: PRINT_PADDR     S324
       NEW_LINE        
       RTRUE           
L0004: RFALSE          

Routine R0279, 0 locals

       JE              Ge9,#03 [FALSE] L0003
       JE              G22,Geb [FALSE] L0002
       JE              G23,"5n4ck3","snackey","snack" [TRUE] L0001
       JE              G23,"vending","machine" [FALSE] L0002
L0001: PRINT_PADDR     S329
       RTRUE           
L0002: RFALSE          
L0003: RFALSE          

Routine R0280, 0 locals

       JE              Ge9,#03 [FALSE] L0003
       JE              G22,Geb [FALSE] L0002
       JE              G23,"5n4ck3","snackey","snack" [TRUE] L0001
       JE              G23,"vending","machine" [FALSE] L0002
L0001: PRINT_PADDR     S332
       RTRUE           
L0002: RFALSE          
L0003: RFALSE          

Routine R0281, 9 locals

       STORE           L04,#00
L0001: JL              L04,#30 [FALSE] L0004
       TEST_ATTR       L01,L04 [FALSE] L0002
       SET_ATTR        L00,L04
       JUMP            L0003
L0002: CLEAR_ATTR      L00,L04
L0003: INC             L04
       JUMP            L0001
L0004: STORE           L04,#01
L0005: JL              L04,#40 [FALSE] L0010
       JE              L04,#02,#03 [TRUE] L0009
       GET_PROP_ADDR   L00,L04 -> Gef
       STORE           L02,Gef
       GET_PROP_ADDR   L01,L04 -> Gef
       STORE           L03,Gef
       GET_PROP_ADDR   L00,L04 -> Gef
       JZ              Gef [TRUE] L0006
       GET_PROP_LEN    Gef -> Gef
L0006: STORE           L07,Gef
       JZ              L02 [TRUE] L0009
       JZ              L03 [TRUE] L0009
       GET_PROP_ADDR   L01,L04 -> Gef
       JZ              Gef [TRUE] L0007
       GET_PROP_LEN    Gef -> Gef
L0007: PUSH            Gef
       JE              L07,(SP)+ [FALSE] L0009
       STORE           L05,#00
L0008: JL              L05,L07 [FALSE] L0009
       LOADB           L03,L05 -> -(SP)
       STOREB          L02,L05,(SP)+
       INC             L05
       JUMP            L0008
L0009: INC             L04
       JUMP            L0005
L0010: GET_PROP_ADDR   L00,#03 -> Gef
       PUSH            Gef
       JZ              (SP)+ [TRUE] L0011
       GET_PROP_ADDR   L01,#03 -> Gef
       PUSH            Gef
       JZ              (SP)+ [FALSE] L0012
L0011: RTRUE           
L0012: GET_PROP        L01,#03 -> Gef
       STORE           L04,Gef
       JUMP            L0014
L0013: ADD             L04,L07 -> -(SP)
       ADD             (SP)+,#03 -> L04
L0014: LOADW           L04,#00 -> -(SP)
       JZ              (SP)+ [TRUE] L0020
       LOADW           L04,#00 -> L08
       LOADB           L04,#02 -> L07
       GET_PROP        L00,#03 -> Gef
       STORE           L05,Gef
       JUMP            L0016
L0015: LOADB           L05,#02 -> -(SP)
       ADD             L05,(SP)+ -> -(SP)
       ADD             (SP)+,#03 -> L05
L0016: LOADW           L05,#00 -> -(SP)
       JZ              (SP)+ [TRUE] L0019
       LOADW           L05,#00 -> -(SP)
       AND             (SP)+,#7fff -> -(SP)
       AND             L08,#7fff -> -(SP)
       JE              (SP)+,(SP)+ [FALSE] L0018
       LOADB           L05,#02 -> -(SP)
       JE              L07,(SP)+ [FALSE] L0018
       STORE           L06,#03
L0017: ADD             L07,#03 -> -(SP)
       JL              L06,(SP)+ [FALSE] L0018
       LOADB           L04,L06 -> -(SP)
       STOREB          L05,L06,(SP)+
       INC             L06
       JUMP            L0017
L0018: JUMP            L0015
L0019: JUMP            L0013
L0020: RTRUE           

Routine R0282, 2 locals

       JE              L00,#00,#ffff [TRUE] RFALSE
       STORE           L01,L00
       LOADW           #1a,#00 -> -(SP)
       CALL_VS         R0283 (L01,(SP)+) -> -(SP)
       JL              (SP)+,#00 [FALSE] RFALSE
       JL              L00,#01 [TRUE] L0001
       SUB             #0167,#ff -> -(SP)
       JG              L00,(SP)+ [FALSE] RTRUE
L0001: CALL_VS         R0283 (L00,S001) -> -(SP)
       JL              (SP)+,#00 [TRUE] L0002
       RET             #03
L0002: CALL_VS         R0283 (L00,#0ded) -> -(SP)
       JL              (SP)+,#00 [TRUE] L0003
       RET             #02
L0003: RFALSE          

Routine R0283, 4 locals

       JE              L00,L01 [FALSE] L0001
       RFALSE          
L0001: JL              L00,#00 [FALSE] L0002
       JL              L01,#00 [TRUE] L0002
       RTRUE           
L0002: JL              L00,#00 [TRUE] L0003
       JL              L01,#00 [FALSE] L0003
       RET             #ffff
L0003: AND             L00,#7fff -> L02
       AND             L01,#7fff -> L03
       JG              L02,L03 [FALSE] L0004
       RTRUE           
L0004: RET             #ffff

Routine R0284, 1 local

       CALL_2S         R0282 (L00) -> -(SP)
       PULL            Gef
       JE              Gef,#02 [FALSE] L0001
       RET             #03
L0001: JE              Gef,#03 [FALSE] L0002
       RET             #04
L0002: JE              Gef,#01 [FALSE] L0005
       JIN             L00,"Class" [TRUE] L0003
       JG              L00,#04 [TRUE] L0004
L0003: RTRUE           
L0004: RET             #02
L0005: RFALSE          

Routine R0285, 4 locals

L0001: LOADB           #00,L00 -> L02
       JZ              L02 [TRUE] L0006
       AND             L02,#80 -> -(SP)
       JZ              (SP)+ [TRUE] L0002
       INC             L00
       LOADB           #00,L00 -> -(SP)
       AND             (SP)+,#3f -> L03
       JUMP            L0004
L0002: AND             L02,#40 -> -(SP)
       JZ              (SP)+ [TRUE] L0003
       STORE           L03,#02
       JUMP            L0004
L0003: STORE           L03,#01
L0004: INC             L00
       AND             L02,#3f -> -(SP)
       JE              (SP)+,L01 [FALSE] L0005
       RET             L00
L0005: ADD             L00,L03 -> L00
       JUMP            L0001
L0006: JL              L01,#00 [FALSE] L0007
       ADD             L00,#01 -> -(SP)
       RET_POPPED      
L0007: RFALSE          

Routine R0286, 3 locals

       PRINT           "[Setting "
       CALL_2N         R0137 (L00)
       PRINT           "."
       CALL_2N         R0212 (L01)
       PRINT           " to "
       PRINT_NUM       L02
       PRINT           "]
"
       RTRUE           

Routine R0287, 2 locals

       RFALSE          

[End of code]

[Start of text]

S001: "AND!XOR B.E.N.D.E.R"
S002: "
DEF CON 33 5n4ck3y Challenge
"
S003: "dev"
S004: "something"
S005: "someone"
S006: "(some direction)"
S007: "is "
S008: "are "
S009: "direction"
S010: "north"
S011: "south"
S012: "east"
S013: "west"
S014: "northeast"
S015: "northwest"
S016: "southeast"
S017: "southwest"
S018: "up"
S019: "down"
S020: "in"
S021: "out"
S022: " Moves: "
S023: " Score: "
S024: " Time: "
S025: "A look in that direction reveals nothing new."
S026: "You are always self-possessed."
S027: "You are carrying too many things already."
S028: "Taken."
S029: "There's nothing suitable to drink here."
S030: "Dropped."
S031: "Futile."
S032: "You lack the nerve when it comes to the crucial moment."
S033: "You smell nothing unexpected."
S034: "You hear nothing unexpected."
S035: "You talk to yourself for a while."
S036: "This provokes no reaction."
S037: "But you are already there!"
S038: "But you aren't in anything at the moment!"
S039: "You aren't on that."
S040: "You aren't in that."
S041: "You are empty handed."
S042: "You can't go that way."
S043: "Ok."
S044: "You can't put something inside itself."
S045: "You can't put something on itself."
S046: "Violence isn't the answer to this one."
S047: "But there's no water here to carry."
S048: "Digging would achieve nothing here."
S049: "Nothing happens."
S050: "You don't feel anything unexpected."
S051: "Is that the best you can think of?"
S052: "You jump on the spot, fruitlessly."
S053: "Removed."
S054: "You find nothing special."
S055: "Think nothing of it."
S056: "You can only do that to something animate."
S057: "You can't use multiple objects with that verb."
S058: "You can't use multiple directions."
S059: "I didn't understand that number."
S060: "Come again?"
S061: "I don't understand that sentence."
S062: "That is not a verb I recognize."
S063: "I still don't understand what you are referring to."
S064: "I can't see who you are referring to."
S065: "You can't see any such thing."
S066: "Sorry, that can't be corrected."
S067: "The 'again' command must be on a new input line.
"
S068: "You can hardly repeat that."
S069: "You need to be more specific."
S070: "You can only refer to single objects when talking to others."
S071: "performing noteworthy actions"
S072: "This dangerous act would achieve little."
S073: "Nothing is on sale."
S074: "That would scarcely empty anything."
S075: "That was a rhetorical question."
S076: "Nothing practical results from your prayer."
S077: "Your singing is abominable."
S078: "You aren't feeling especially drowsy."
S079: "Oh, don't apologize."
S080: "Keep your hands to yourself."
S081: "There's not enough water to swim in."
S082: "There's nothing sensible to swing here."
S083: "You taste nothing unexpected."
S084: "What a good idea."
S085: "You wave, feeling foolish."
S086: "The dreadful truth is, this is not a dream."
S087: "That seems unnecessary."
S088: "If you think that'll help."
S089: "Keep your mind on the game."
S090: "Quite."
S091: "Real adventurers do not use such language."
S092: "You're carrying "
S093: "You're carrying:"
S094: "That would be less than courteous."
S095: "There are no things available that match ""
S096: "I only understood you as far as ""
S097: "You discover nothing of interest in "
S098: "You would achieve nothing by this."
S099: " "
S100: "never before visited and short descriptions otherwise."
S101: "
Would you like to RESTART, RESTORE"
S102: ", give the FULL score for that game"
S103: "Are you sure you want to restart? "
S104: "Attempt to begin transcript failed."
S105: "Attempt to end transcript failed."
S106: "The game file did not verify as intact, and may be corrupt."
S107: "The game file has verified as intact."
S108: " here.
"
S109: ".
"
S110: ". "
S111: " "
S112: " (on which "
S113: "yourself"
S114: "As good-looking as ever."
S115: " doesn't reveal anything special.
"
S116: ", but nothing much happens.
It's probably not flammable enough, or you lack the right tool for the job.
"
S117: ", but nothing much happens.
It's probably not flammable enough, or you lack the right tool for the job.
"
S118: ", but it doesn't seem to respond in a meaningful way.
"
S119: ", but it doesn't seem interested in conversation.
"
S120: "

And so the story begins...The year is 199X

"
S121: "A sleek electronic badge, brimming with LEDs and intricate circuitry.
It hums faintly with power, its surface etched with cryptic patterns
and hacker-themed designs. The badge feels alive, as if it holds
secrets waiting to be unlocked. A small OLED screen displays scrolling
text: "AND!XOR". This is no ordinary badge, it's a gateway to
solder, frustration, and Malort filled rage."
S122: "The badge is bound to you. You can't get rid of it, no matter how hard
you try.
"
S123: "Your typical 90s arcade, but the air is thick with the
smell of overclocked CPUs and stale cigarette smoke. Forget high scores,
here it's all about pwning the system. The cabinets are rigged with
custom interfaces, displaying scrolling code on flickering CRT screens
instead of Mortal Kombat. This is where you cut your teeth... and maybe
your dial-up connection. A peculiar vending machine with wood paneling
hums in the corner."
S124: "The pinball machine is an intricate homage to the movie *Dune*. Its
backglass features a stunning depiction of Paul Atreides standing on the
sands of Arrakis, with a massive sandworm rising behind him. The
playfield is a desert landscape, complete with miniature spice
harvesters, Fremen warriors, and a rotating sandworm that looms
ominously. A small thumper sits near the center of the playfield,
waiting to be activated. The machine hums with a haunting melody, and
the display flashes: 'Summon Shai-Hulud and sacrifice the ball to the
sands!'"
S125: "The pinball machine is a dazzling tribute to the movie *Labyrinth*. Its
backglass features a striking image of Jareth, the Goblin King, holding
a crystal ball, with Sarah and the labyrinth in the background. The
playfield is a chaotic maze of ramps, spinners, and targets, adorned
with miniature goblins, crystal orbs, and a tiny replica of the
Escher-like staircase room. The machine hums with an eerie tune, and
the display flashes: 'Do you dare to challenge the Goblin King?'
You probably want to H E L P instead..."
S126: "The Yaarcade Pinball Machine sits in the corner, shrouded in mystery and
a faint smell of sea salt. Its display is dark, and the machine hums
with the kind of energy that says, 'I could work... if only you knew
who to duel, when, and where.' The playfield is adorned with cryptic
symbols of crossed swords, treasure maps, and a parrot that seems to
mock you with its lifeless gaze. A faint tune of 'X Birds in the Sky'
plays in your head, as if the machine itself is daring you to listen
to the pirate songs and uncover its secrets. For now, it remains
offline, a silent challenge waiting for the right hacker to awaken it."
S127: "This isn't your average vending machine. Covered in surprisingly
tasteful wood paneling, '5n4ck3y' hums with an unusual energy.
Instead of chips and soda, its slots seem designed for electronic
badges. Various LEDs blink in complex patterns on its surface, and a
small speaker occasionally emits bloops and beeps. It feels... aware.
You notice a small keypad and a flickering screen that reads:
"ASK ME ABOUT HELP"."
S128: "
"Oh, so you're lost already? Typical meatbag. Fine, I'll explain.
This is the Badge Enabled Non Directive Enigma Routine (B.E.N.D.E.R.),
a CTF wrapped in a textual world. Your goal? Solve challenges to earn
a coveted electronic badge. Sounds simple, right? Wrong.
The challenges aren't obvious. You'll need to find clues, objects,
and use them to reveal the challenges themselves. Yes, you're being
challenged to figure out what the challenges are. Mind-blowing, I know.

Basic verbs? Sure, I'll spoon-feed you: N, S, E, W, U, D for movement.
'Look' for general observation. 'Examine' for detailed inspection.
'Inventory' to see what junk you're carrying. Not all objects are obvious,
and some are hidden, just like the actions.... 
But hey, I'm sure you'll figure it out... eventually.

Oh, and one more thing: I'm 5n4ck3y, the sentient vending machine.
I'm smarter than you, faster than you, and definitely better looking.
If you want my help, you'll need to prove you're not just another
script kiddie fumbling around in the dark. Good luck, meatbag."
"
S129: "
5n4ck3y's hacking interface appears to be disabled in this version.
"
S130: "You stand deep underground in a cold, echoing missile silo. Rusted
ladders and ancient warning signs line the concrete walls. Scattered
across the floor are dozens of skeletons, each clutching corroded
relay logic modules and tangled wires. It looks like they were trying
to re-assemble a relay-based computer...one last hack before the end."
S131: "Resting on a cracked concrete slab is a strange geometric object, a
metallic hypercube, its edges gleaming with an unnatural sheen. Each
face is etched with intricate patterns and shifting numbers, as if the
cube itself is calculating something beyond human comprehension. The
air around it seems to warp slightly, and faint pulses of light
flicker along its vertices. Embedded in the surfaces are layers of
impossibly dense, three-dimensional PCB traces, looping and spiraling
in ways that defy logic. Tiny components, crystal oscillators,
relays, and black ICs are soldered into the mesh, some still faintly
humming. The whole artifact radiates a cold, ominous energy, as if it
remembers every secret it has ever processed."
S132: "Rain-slicked asphalt reflects the neon glare from the casinos.
Overflowing dumpsters reek of stale pizza and discarded tech - mostly
broken floppy disks and tangled phone cords. Graffiti tags, some in
DayGlo paint, cover the walls. This alley is a shortcut to the
digital underground, if you know where to look. A discarded AOL
signup CD lies cracked in a puddle. Amidst the general detritus, a
particularly large pile of discarded electronics catches your eye."
S133: "A large, haphazard stack of obsolete technology. You can make out old
modem casings, tangled ribbon cables, dusty motherboards with bulging
capacitors, and the shattered screen of a monochrome monitor. It
looks like a graveyard for forgotten hardware, a testament to the
rapid pace of technological change."
S134: "You rummage through the pile of discarded electronics. Amongst
the tangled wires and broken plastic, you uncover a small,
cracked bluebox casing. It tumbles out onto the alley floor.
"
S135: "You've already searched this pile thoroughly.
"
S136: "It's a large, haphazard stack of obsolete technology.
"
S137: "It looks like there might be something interesting hidden within if you
were to search it.
"
S138: "You've already searched it and found a bluebox casing, which is now
lying nearby.
"
S139: "A small, blue plastic casing, clearly from some kind of electronic
device. It's cracked along one edge, and looks like it's seen better
days. It's what some might call a bluebox. Is something written on
it?"
S140: "You peer closely at the cracked bluebox casing.
A faded, hand-written label is barely legible inside.
It says: "Property of J.E. - Tones speak numbers, numbers sing songs.
For this special snack service, the numbers sing in plain ASCII."
"
S141: "This eastern side street, just off the main drag, still catches the
overspill of neon from the nearby Strip. Smaller, older casino signs
and local business marquees compete for attention with flickering,
slightly pixelated displays. The distant roar of the Strip mixes with
closer city sounds. A few early digital billboards show grainy ads
for less glamorous local shows."
S142: "A sturdy, slightly rusted crowbar. It feels heavy in your hands, a
tool that could pry open just about anything. Something is engraved
on it."
S143: "You take a closer look at the engraving. It reads:
"Mr. Freeman... it's been a while".
"
S144: "This bustling side street acts as a chaotic junction, feeding traffic
and pedestrians towards the main Strip. Less colossal, but still
gaudy, signs for local casinos and businesses flash relentlessly.
Billboards hawk everything from 56k modems to cheap diner specials.
Lowriders cruise past, their stereos blasting. Street vendors offer
bootlegs and calling cards. Casino security from the nearby
mega-resorts sometimes patrol even out here, their eyes scanning for
trouble."
S145: "Cracked asphalt under buzzing sodium lights. Faded parking lines
struggle beneath oil stains and discarded fast-food wrappers.
Modified vans with tinted windows and suspiciously large antennas
huddle together. A lone payphone rings unanswered, its plastic
casing covered in stickers for local BBSes. In one such van, a wiry
figure named Glitch tinkers with a mess of wires. This is where the
data runners make their deals, away from prying eyes."
S146: "Glitch is a wiry, paranoid individual who lives out of a beat-up van
crammed with ancient phone equipment and oscilloscopes. He's got a
wild mane of hair and speaks in a rapid-fire mix of phreaking jargon
and conspiracy theories."
S147: "Glitch peers out from his van, eyes darting around.
"They're listening, you know? The lines... they hum with secrets!
Even that weird vending machine, 5n4ck3y... it's on their network,
I just know it! Probably routing all our snack data to the Feds!"
"
S148: "Glitch lowers his voice. "5n4ck3y... I tried to get a line on it once.
Hooked up my best tone dialer, aimed for its core frequency.
Thing just beeped back at me... in perfect DTMF tones!
Spelled out 'N-O-P-E'. Mocking me! It's smarter than it looks,"
"I tell ya. Probably got its own private exchange somewhere."
"
S149: "Glitch just stares at you, muttering about baud rates.
"
S150: "The Gas Station: Pumps for high-octane fuel dominate under a
flickering fluorescent canopy. Inside, behind greasy glass, the
clerk, who looks like he hasn't slept since the last COMDEX, eyes
you suspiciously as you browse the selection of Jolt Cola, caffeine
pills, and questionable magazines alongside the usual snacks. A faint
smell of gasoline hangs in the air, made all the more pungent by a
precariously balanced stack of highly flammable barrels in the
corner, which appear to be leaking an iridescent slick onto the
already grimy linoleum floor. It's probably fine."
S151: "A shimmering, iridescent puddle of what looks like gasoline and motor
oil has spread out from the base of the leaning barrels. It catches
the flickering fluorescent light, creating a miniature, toxic rainbow
on the filthy linoleum. It looks dangerously flammable; a single
spark could turn this whole place into a budget fireworks show."
S152: "With a mischievous glint in your eye, you take out the tattered
matchbook and
strike the last match. The tiny flame sputters defiantly against the gloom.
You flick it towards the oily puddle. WHOOMPH! The iridescent slick ignites
with a hungry roar, racing towards the barrels. A beat of silence, then
KABOOOOM!
The gas station erupts in a glorious fireball, a true masterpiece of budget
pyrotechnics! The shockwave nearly knocks you off your feet. Twisted metal
and flaming debris rain down. When the smoke begins to clear, the gas station
is no more. Only smoldering ruins remain, and a surprisingly clear,
albeit charred, pathway has been blasted open to the north.
"
S153: "Smoldering Ruins of Gas Station"
S154: "What was once a greasy, fluorescent-lit gas station is now a smoking
crater
of twisted metal, blackened concrete, and smoldering debris. The air is thick
with the acrid stench of burnt fuel, melted plastic, and shattered dreams
(mostly the clerk's). The explosion has violently remodeled the area,
blasting a new, charred path to the north."
S155: "You'd need something to ignite it with. That single, hopeful
spark you're imagining isn't going to cut it without a
source.
"
S156: "Overflowing dumpsters line this grimy alley, their contents spilling
onto the cracked pavement. Pizza boxes, greasy takeout containers, and
a confetti of losing scratch tickets mingle with sticky soda cups and
faded casino flyers. The air is thick with the scent of old fries,
sour milk, and the unmistakable tang of city filth. Amidst the
garbage, something small and tattered, (maybe a matchbook?) peeks
out from under a wilted pile of lettuce and a crumpled napkin."
S157: "A battered matchbook, its cover advertising some long-gone casino
buffet. Most of the matches are torn out or broken, but one lonely
matchstick remains, its red tip still intact and ready to ignite.
Maybe that's all you need in a city like this."
S158: "Blockbuster Video: Bright fluorescent lights illuminate rows upon rows
of VHS tapes. 'Be Kind, Rewind' stickers adorn the counter. It smells
faintly of popcorn and plastic. But behind the counter, whispers
suggest a different kind of rental service - data smuggled on
seemingly blank tapes, and rumors of access codes to hidden online
forums. On a shelf of 'New Releases', a VHS tape case for 'Hackers'
looks particularly interesting. Near the counter, a wiry figure with
thick glasses and a jacket covered in patches from defunct video
rental chains meticulously catalogs VHS tapes. This is Scanline, the
Analog Archivist."
S159: "Scanline, the Analog Archivist, is a wiry figure with thick glasses
and a jacket covered in patches from defunct video rental chains. He's
hunched over a stack of VHS tapes, meticulously cataloging them with a
battered label maker. His movements are precise, almost mechanical, as
if he's part of the analog machines he so reveres."
S160: "Scanline's eyes widen as you hand him the technical manual.
He carefully flips through the pages, his expression one of pure joy.
"This... this is incredible! A true classic for the archives.
You've done a great service to analog enthusiasts everywhere."

He rummages through a stack of VHS tapes and pulls out a small slip of paper.
"Here, as promised. This is the final encoded word you need.
It's buried under three distinct layers... peel them back one by one,
and the melody will reveal itself."

He scribbles something on a scrap of paper and hands it to you.
It reads: `NEU1QTQ3NDc1NzVBNEU0QzRE`.
"
S161: "Scanline adjusts his glasses and looks at you curiously.
"I'm not sure what you expect me to do with that.""
S162: "Scanline adjusts his glasses and looks up from his work.
"Ah, a fellow seeker of lost knowledge! I am Scanline,
guardian of the analog archives. These tapes hold secrets
from a bygone era, but I digress..."

"Listen, I've got something that might interest you, but
first, I need your help. I'm looking for an obscure
technical manual for a vintage synthesizer. Proxy, the
information broker, might have it. Last I heard, they were
somewhere in the sewer tunnels. Could you track it
down for me?"
"
S163: "Scanline adjusts his glasses and leans back, a nostalgic smile on his
face.
"Ah, 5n4ck3y... Now there's a relic worth preserving. Back in the day,
I tried to archive its firmware... pure analog genius, you know? But that
vending machine had other ideas. It locked me out and started spitting
out VHS tapes labeled 'Property of 5n4ck3y.'"

He chuckles softly, shaking his head.
"I still have those tapes somewhere. They're blank, of course, but I swear
if you play them on the right machine, you can hear faint whispers of code.
5n4ck3y... always one step ahead."
"
S164: "Scanline adjusts his glasses and looks at you curiously.
"I'm not sure what you're asking about."
"
S165: "It's a standard plastic VHS tape case for the movie 'Hackers'.
The iconic cover art with its neon green and binary code is instantly
recognizable.
It feels a little heavier than usual."
S166: "You open the 'Hackers' VHS tape case. Instead of a tape, you find a
casino chip
cleverly hidden inside a hollowed-out section! It clatters onto the counter.
"
S167: "You open the case, but it's empty now, apart from the lingering smell
of old plastic. You've already checked it.
"
S168: "There seems to be something rattling loosely inside if you were to
search or open it.
"
S169: "You've already searched it and found a casino chip.
"
S170: "A relatively clean casino chip. One side shows the Riviera Hotel logo.
The other is inscribed: '0x3454276f4e6a215c'."
S171: "On this western side street, the dazzling neon of the main Strip
gives way to a dimmer, seedier glow from smaller casinos and pawn
shops. Streetlights flicker intermittently over cracked pavement.
Deals are whispered via pager codes in darkened doorways. The air
hums with the city's power grid, a reminder of the digital veins
running beneath the surface. This is where the Strip's glitter starts
to peel away. You spot an old Motorola pager lying near a storm
drain."
S172: "The pager sputters to life! The cracked screen flickers, displaying:
'Yo, hit me back, urgent! Need to tell you what's going down in the
925...'. The sender's phone number seems to be obscured by the cracks
in the LCD. On the back of the pager you see is certified to operate
somewhere in the ISM band...
"
S173: "It's an old Motorola pager, its plastic casing scuffed and the screen
noticeably cracked. It looks completely dead. It probably needs a
power source.
"
S174: "The pager already has a battery.
"
S175: "You carefully insert the battery into the Motorola pager.
It sputters to life! The cracked screen flickers, displaying:
'Yo, hit me back, urgent! Need to tell you what's going down in the 925...'.
The sender's phone number seems to be obscured by the cracks in the LCD.
On the back of the pager you see it is certified to operate somewhere
in the ISM band...
"
S176: "The grimy pavement here is stained and cracked. Faint sounds echo
from somewhere below ground, and a gust of stale, damp air carries
the scent of mildew and decay. A heavy manhole cover is set firmly
into the street, promising a gateway to the city's underbelly."
S177: "The heavy manhole cover blocks your way down. You'll need to open it
first.
"
S178: "The heavy manhole cover lies open next to a dark, circular hole
leading down into the sewers.
"
S179: "A heavy metal disc is set into the grimy pavement, etched with
strange, almost circuit-like patterns (probably just wear and tear).
Faint sounds echo from below. It looks firmly sealed. You'll likely
need to use a tool to pry it open, perhaps by trying to 'open it
with something'.
"
S180: "You wedge the crowbar under the manhole cover and with a grunt of
effort,
pry it open with a screech of metal. A dark opening into the sewers
is revealed.
"
S181: "You take out your trusty crowbar, wedge it under the manhole cover,
and with a grunt of effort, pry it open with a screech of metal.
A dark opening into the sewers is revealed.
"
S182: ", but it doesn't seem to be the right tool for the job.
"
S183: "You try to lift the heavy cover, but it won't budge. It's sealed tight.
You'll need a sturdy tool to pry it open, like a crowbar.
"
S184: "A larger chamber in the sewer maze. Multiple tunnels converge here. A
crude map
is etched into the concrete floor, offering a confusing guide to the labyrinth
beyond. The walls are lined with makeshift servers, their cooling fans whirring
incessantly."
S185: "A small bottle of translucent red pills. It seems to shimmer faintly in
the dim light."
S186: "A claustrophobic tunnel in the sewer network. The air is thick with the
smell of
damp concrete and something vaguely chemical. Scrawled arrows and cryptic
symbols
mark the path. You hear the faint echo of dripping water and the distant hum of
a
server farm."
S187: "A narrow, winding tunnel in the sewer maze. The walls are covered in
glowing
moss. A crack in the ceiling allows a sliver of moonlight to penetrate. The air
is surprisingly fresh. You hear the faint sound of dripping water and the
distant
scratching of rats. You also spot a discarded, waterlogged boot half-submerged
in a puddle."
S188: "A single, mud-caked work boot lies half-submerged in a puddle of murky
water.
It looks like it's been here for ages, forgotten and decaying."
S189: "You cautiously reach into the soggy, waterlogged boot. Your fingers
brush
against something small and hard. You pull out a casino chip! It lands
with a soft splash on the damp tunnel floor.
"
S190: "You poke around in the boot, but it's mostly just mud and
unpleasantness.
You've already checked it thoroughly.
"
S191: "It looks like there might be something interesting hidden deep inside
the
toe if you were to search it.
"
S192: "You've already searched it and found a casino chip.
"
S193: "A grimy casino chip, surprisingly intact. One side shows the Riviera
Hotel logo.
The other is inscribed: '0x4465636f6465204d'"
S194: "A flooded section of the sewer maze. The water is knee-deep and murky.
The walls
are slick with algae. A makeshift bridge constructed from discarded pallets
provides a precarious path across the water. Watch your step."
S195: "A dusty, unassuming bottle of Jeppson's Malort. The label, adorned with
a
vaguely menacing shield, promises a 'challenging' taste experience. Its
infamous aroma... a potent blend of grapefruit rind, burnt rubber and
existential despair, wafts gently from the cap. The choice drink of hackers
everywhere."
S196: "This chamber is different; drier than the surrounding tunnels. Ranks of
rusted,
silent machinery line one wall, their gauges cracked and dials frozen. A
single,
flickering emergency light casts long shadows over a defunct control panel. A
pragmatic figure known as Fuse is busy stripping wires from one of the
consoles.
The air is heavy with ozone and decay, and an unsettling quiet hangs here,
broken only by the faint hum of distant city infrastructure."
S197: "Fuse is a pragmatic and resourceful character, their clothes stained
with grease
and solder marks. They expertly strip defunct machinery for rare components,
seeing this dead station as a treasure trove for their own strange
contraptions."
S198: "Fuse grunts, not looking up from a particularly stubborn capacitor.
"Good salvage today. These old boards... pure gold. Not like that
newfangled stuff. Even that 5n4ck3y machine, bet its guts are full
of proprietary junk. Give me good old through-hole components any day."
"
S199: "Fuse snorts, yanking a handful of wires free. "5n4ck3y? Yeah, I've
seen its schematics... or tried to. Thing's a damn black box. Tried
to 'borrow' a power regulator from one of its external access panels once.
Nearly got my eyebrows singed off by a defensive electrical discharge!
Then it displayed 'NICE TRY, SPARKY' on its little screen. Over-engineered,
if you ask me. But I bet it's got some sweet vintage chips inside if you
could just get past its attitude."
"
S200: "Fuse just waves a wire stripper dismissively and goes back to work.
"
S201: "A dead end in the sewer maze. A collapsed section of tunnel blocks the
way
forward. A single flickering light illuminates a pile of discarded equipment:
broken circuit boards, tangled cables, and a rusted hard drive. Amongst the
junk, a particularly discarded rusty can catches your eye."
S202: "A dented and rusty can, half-buried in a pile of discarded electronic
equipment.
It looks like it's been here for a very long time."
S203: "You pick up the rusty can and shake it. Something rattles inside!
Prying it open with a bit of effort, you find a casino chip nestled amongst
some dirt and grime. It falls out onto the floor.
"
S204: "You examine the rusty can, but it's empty now, or just full of old dirt.
You've already checked it.
"
S205: "It feels like there might be something small loose inside if you were to
search or open it.
"
S206: "You've already searched it and found a casino chip.
"
S207: "This casino chip is a bit corroded but still legible. One side shows the
Riviera Hotel logo. The other is inscribed: '0x653a205c6b5e5c6b'."
S208: "A dead end in the sewer maze. A collapsed section of tunnel blocks the
way
forward. A single flickering light illuminates a pile of discarded equipment. A
shadowy figure draped in rags and cables, the Rat King, watches from the gloom.
This place is a graveyard of broken dreams."
S209: "A shadowy figure draped in rags and discarded fiber optic cables. His
face is
hidden by a modified gas mask with glowing red LED eyes. He seems to be the
self-proclaimed ruler of this sewer section."
S210: "The Rat King lets out a low grunt, pointing a gnarled rebar
at a tangle of wires. "Flow... broken... data-scraps good today."
He tilts his masked head. "Even big box... 5n4ck3y... sheds skin
down here. Good pickings, sometimes.""
S211: "The Rat King rummages in a sack and pulls out a burnt capacitor.
"5n4ck3y... big spirit. Strong signals. Sometimes... it drops gifts."
He taps his mask. "Found its old eye once... blinked for a week.
Good... strong... data-ghosts in that one. Fed the rats well.""
S212: "The Rat King just clicks his rebar against the concrete."
S213: "A flooded section of the sewer maze. The water is knee-deep and murky.
The walls
are slick with algae. A makeshift bridge constructed from discarded wooden
pallets provides a precarious path across the water. You can see something
glinting in the water... probably just a lost hubcap, but maybe worth a closer
look."
S214: "A narrow, winding tunnel in the sewer maze. The walls are covered in
glowing
moss. A crack in the ceiling allows a sliver of moonlight to penetrate. The air
is surprisingly fresh. You hear the faint sound of dripping water and the
distant hum of a server. A rusted maintenance panel is bolted to one of the
damp concrete walls."
S215: "This old metal panel is streaked with rust and grime. It looks like it
hasn't
been opened in years. Someone has crudely scratched 'KEEP OUT' above a heavily
corroded latch."
S216: "With a bit of effort, you manage to pry open the rusted maintenance
panel.
Inside, amidst a tangle of cobweb-covered wires and what looks like
a very old, very dead rat, a small, surprisingly preserved label is stuck
to the back of the panel door. It's written in faded marker:
The square KEY to pissing me off is this damn summer DEFCON.
Fuckers put stickers everywhere and break everything! Its bad enough I only
have one eye, but the fact that I cant tell the difference between
the letters I and J makes it even worse. I'm gonna quit one day...
Sincerely, Hal."
S217: "A larger chamber in the sewer maze. Multiple tunnels converge here. A
crude map
is etched into the concrete floor, offering a confusing guide to the labyrinth
beyond. The walls are lined with makeshift servers, their cooling fans whirring
incessantly. Amidst the dim glow of the servers, a shadowy figure leans against
the wall, their face partially obscured by a hood. This is Proxy, the
Information Broker."
S218: "A worn technical manual for a vintage synthesizer. The cover is faded,
but the
title is still legible: 'Advanced Waveform Manipulation for Analog
Synthesizers'.
Inside, diagrams and schematics detail the inner workings of a classic synth.
This
is a treasure for any analog enthusiast."
S219: "Proxy, the Information Broker, is a shadowy figure cloaked in a tattered
hoodie.
Their face is partially obscured, but their sharp eyes glint in the dim light
of
the servers. They exude an air of quiet confidence, as if they know every
secret
hidden in the labyrinth of the sewer tunnels."
S220: "Proxy nods approvingly as you hand over the encrypted data chip.
They examine it closely, their sharp eyes glinting in the dim light.
"Impressive. This chip holds secrets that could shift the balance
of power in this city. You've done well."

They reach into their hoodie and pull out a worn technical manual,
handing it to you.
"Here, as promised. This manual is a treasure for anyone who
appreciates analog synths. Scanline will know what to do with it."
Technical Manual for Vintage Synthesizer added to inventory.

Proxy leans in closer, their voice dropping to a conspiratorial whisper.
"And here's a little something extra for your trouble. My encoded word
is hidden in pairs, split and merged. My callsign is the key to the grid."

They scribble something on a scrap of paper and hand it to you.
It reads: `BYTCA`.
"
S221: "Proxy raises an eyebrow, their expression unreadable.
"I don't know what you expect me to do with that.""
S222: "Proxy tilts their head slightly, their voice low and measured.
"You know, these tunnels hold more than just rats and rust.
Secrets flow through here, like data through a fiber line.
You just have to know where to look... or who to ask."

They pause, their sharp eyes narrowing slightly.
"By the way, have you seen 5n4ck3y lately? That vending
machine owes me a favor. We go way back."
"
S223: "Proxy chuckles softly, their voice tinged with amusement.
"Ah, 5n4ck3y... That vending machine and I have a bit of
history. Back in the day, I rigged it to dispense
'special items' for a few high rollers. Let's just say
the house didn't appreciate the competition. 5n4ck3y
made a fortune, but when the heat came down, they
vanished with my cut. They still owe me for that stunt.
If you see them, tell them Proxy hasn't forgotten."
"
S224: "Proxy nods, their expression turning serious.
"Ah, the technical manual for the vintage synthesizer.
I can get it for you, but it'll cost you. Diva, the
Cybernetic Showgirl, has something I need: An encrypted
data chip from an old rival of mine. She's usually
hanging somewhere around the main Strip. Talk to
her and see if you can strike a deal."
"
S225: "Proxy raises an eyebrow. "I don't know anything about that."
"
S226: "A dead end in the sewer maze. A collapsed section of tunnel blocks the
way
forward. A single flickering light illuminates a pile of discarded equipment:
broken circuit boards, tangled cables, and a rusted hard drive. This place
gives you the creeps."
S227: "It's a standard-looking NiMH battery, perhaps it could power up an old
device."
S228: "You remove the battery from the Motorola pager.
"
S229: "A large chamber in the sewer maze. The walls are covered
in graffiti tags from rival hacker crews. A makeshift
table holds a collection of empty spray paint cans and
half-finished projects. This is a place of secrets and
hidden agendas. You notice a small, dark crack in one
of the graffiti-covered walls."
S230: "A narrow crack runs through a section of graffiti-covered concrete wall,
disappearing into darkness. It looks just wide enough for something small
to be wedged inside."
S231: "You peer into the dark crack in the wall. Your fingers probe the opening
and brush
against something small and round. You carefully pull out a casino chip!
"
S232: "You poke around in the crack, but it's just a dark, empty crevice.
You've already checked it.
"
S233: "It looks like something might be hidden inside if you were to search it.
"
S234: "It's just an empty crack in the wall.
"
S235: "A surprisingly clean casino chip. One side shows the Riviera Hotel logo.
The other is inscribed: '0x4b39676665636e'."
S236: "The Vegas Sewer Tunnels Entrance: A concrete junction beneath the city.
Damp
walls glisten under flickering emergency lights. A maze of pipes and conduits
crisscross overhead, some jury-rigged with unauthorized phone and network
cables tapped into the lines above. The air is thick with the smell of damp
concrete and sewage. This is where the digital underground connects, hidden
from the eyes of the telcos."
S237: "The Vegas Sewer Tunnels Exit: A rusted metal ladder leads up to a
manhole
cover. The air above smells of exhaust fumes and stale casino air
conditioning. You can almost taste the freedom... or maybe just the smog.
Time to get back to the surface."
S238: "Vegas Strip South: You're at the iconic gateway to the neon madness. The
'Welcome to Fabulous Las Vegas' sign looms large, a beacon for hopefuls and
hustlers alike. Even here, the air hums with stray modem tones and the faint
scent of ozone from overloaded circuits. A barely noticeable manhole cover
sits flush with the street, a reminder of the darker, fiber-optic paths below."
S239: "A disheveled hacker sits slumped against a neon-lit wall, muttering to
himself. His eyes dart nervously, and his lips move as if he's reciting
code. You catch fragments of his mumbling: "red pill... source...
quarantine...""
S240: "Cypher's eyes widen as he takes the red pill from you and KEYS it
down in 5 BYTES. He straightens up, his voice suddenly clear and
deliberate: "You've made your choice. The truth is out there,
hidden in the source of THIS matrix. Break out of the quarantine,
and you'll find what you seek. But beware once you see it, there's no
going back, all this world is not INFORMation its a lie built on top of code."
"
S241: "Cypher looks at you blankly, as if waiting for something specific.
"
S242: "Vegas Strip South Central: The air buzzes with the energy of a thousand
competing data streams. A giant, unbelievably trashy castle-themed casino
dominates the view, its pixelated video screens (cutting edge for '93!)
flashing ads for dial-up ISPs. Lowriders with subwoofers that could crack
encryption cruise past, blasting early techno and tracks ripped from Amiga
MOD files. The scent of cheap cologne and desperation hangs heavy. Amidst
the chaos, a dazzling figure in a shimmering cybernetic costume strikes a
pose near the casino entrance. This is Diva, the Cybernetic Showgirl."
S243: "A sleek, black data chip with a faint glow emanating from its edges. It
looks
like it holds sensitive information, possibly from a rival casino's high
roller suite. The chip feels cold to the touch, as if it contains secrets
that shouldn't be disturbed."
S244: "Diva, the Cybernetic Showgirl, is a vision of neon and chrome. Her
shimmering
costume is adorned with glowing filaments that pulse in time with the pounding
bass from the nearby casino. Her movements are fluid yet mechanical, as if
she's part human, part machine. She exudes confidence, her every gesture
demanding attention."
S245: "Diva's eyes light up as you hand her the collection of rare, vintage
neon tube filaments.
She takes them with a delighted smile, holding them up to the light.
"Oh, darling, these are perfect! My costume will shine like the Vegas Strip
itself.
You've truly outdone yourself."

She rummages through a shimmering bag and pulls out a sleek, black data chip.
"Here, as promised. This encrypted data chip holds secrets from a rival
casino's
high roller suite. Proxy will know what to do with it."
Encrypted data chip added to your inventory.

Diva leans in closer, her voice dropping to a conspiratorial whisper.
"And here's a little something extra for your trouble. My encoded word is
hidden
in a dance, a repeating pattern. My name sets the rhythm, shifting each letter
just so.
You'll need to know the steps."

She scribbles something on a scrap of paper and hands it to you.
It reads: `RZVCOM`.
"
S246: "Diva raises an eyebrow, her expression a mix of amusement and curiosity.
"Darling, I have no idea what you're trying to give me.""
S247: "Diva strikes a dramatic pose, her voice smooth and melodic.
"Darling, you've come to bask in my brilliance, haven't you?
These filaments, this glow.. it's all part of the show!"

She twirls gracefully, her costume shimmering like a digital
aurora. "By the way, have you seen 5n4ck3y lately? That vending
machine and I had a little... disagreement. Let's just say it
didn't appreciate my attempt to reprogram it to dispense
glitter bombs. Such a shame.. it would've been fabulous!"
"
S248: "Diva laughs, her voice like a melody. "Oh, 5n4ck3y! That
vending machine has no sense of style. I tried to give it
a makeover. Glitter bombs, darling, glitter bombs! But it
wasn't having it. Such a diva, really. If you see it, tell
it I'm still waiting for an apology."
"
S249: "Diva's eyes light up, her tone turning serious.
"Ah, the encrypted data chip from the high roller suite.
I might have access to it, but I need something first.
Alleyway Al, that paranoid hobo, has a collection of rare,
vintage neon tube filaments that would make my costume
truly shine. He's usually skulking around the north side of
the strip. Bring me those filaments, and we'll talk."
"
S250: "Diva raises an eyebrow, her expression a mix of amusement and
curiosity. "Darling, I have no idea what you're talking about."
"
S251: "The bass thumps in your chest as you step inside. The air is thick with
smoke
(cigarettes, mostly) and the scent of cheap beer and well drinks. Dancers
gyrate on a small stage under colored lights. The crowd is a mix of tourists,
locals, and maybe a few shady characters looking to unwind. A grimy payphone
is bolted to one wall, looking like it hasn't been used for actual calls in
years. In the corner, Synth, a DJ with a faded leather jacket, spins forgotten
synthwave tracks."
S252: "It's an old, battered payphone, the kind that still has actual buttons.
The handset is grimy and the cord is frayed. It's covered in layers
of stickers from forgotten bands and local BBS numbers. Something seems
to be scratched into the plastic casing near the coin slot, but it's hard
to make out clearly."
S253: "You lean in closer to the payphone, squinting at the casing.
Scratched into the plastic, as if with a key or a knife, are the words:
"The year the best phreakin quarterly journal for operators hit the stand.
J.E. and 5n4ck3y would appreciate this year. It was a good year."
"
S254: "Synth is a DJ with a faded leather jacket, mirrored shades, and a
melancholic air. He spins forgotten synthwave tracks and chiptunes,
occasionally muttering into the mic about the glory days."
S255: "Synth nods slowly, not missing a beat. "Yeah? Dig the vibes?
Real analog heart, this music. Not like that digital noise."
He gestures vaguely. "Even that 5n4ck3y thing out there...
its error beeps got more soul than half the stuff on the Strip."
"
S256: "Synth leans into the mic. "5n4ck3y, huh? Tried to sample its boot-up
sequence once. Thought it'd make a killer bass drop. Thing just played
a perfect C-major scale back at me, then its lights pulsed in 4/4 time.
Like it was saying, 'Amateur hour, pal.' Still, those old chips...
they got a warmth you can't fake."
"
S257: "Synth just shrugs and cues up another obscure B-side.
"
S258: "Vegas Strip North Central: The iconic Flamingo casino, a monument to
old-school
Vegas, stands proud, its neon plumage a stark contrast to the flickering LCDs
of newer establishments. The street throbs with bass from competing clubs.
A young woman with bright hair, Neon, is busy tagging a wall with what looks
like a glowing datapad."
S259: "Neon is a young, energetic artist with brightly colored cyber-punk
inspired
clothes and hair that seems to shift hues. She's always got a custom-built
datapad or a chunky portable device with a tiny, flickering monochrome screen
she calls her 'light brush'."
S260: "Neon grins, her datapad flashing. "Hey! Dig the new piece?
Pure light, pure code. This whole Strip's my canvas, you know?
Even that weird vending machine, 5n4ck3y. Tried to tag it last
week. It's got... personality."
"
S261: "Neon laughs. "Oh, 5n4ck3y! That thing's a trip. I was projecting
some slick pixel-art flames onto its chassis with my light brush,
right? And it starts blinking its LEDs back at me, in sequence!
Like, it was critiquing my kerning! Then its little screen
flashed 'NICE TRY, KIDDO'. Respect. That box has got style."
"
S262: "Neon just winks and goes back to her light tagging.
"
S263: "Vegas Strip North: The neon glow of Circus Circus casts a surreal,
almost
digital, light over everything. Street vendors hawk bootleg shareware on
floppy disks and questionable 'grey market' electronics from beat-up
briefcases. Casino security, looking like extras from a low-budget cyberpunk
flick, patrol with bulky comms gear. You're deep in the heart of the beast
now; one wrong command and you could be firewalled. In a shadowy corner, a
disheveled figure mutters to himself, clutching a battered thermos. This is
Alleyway Al, the Paranoid Hobo."
S264: "A collection of rare, vintage neon tube filaments. They glow faintly
with a
mesmerizing light, their colors shifting subtly as if alive. These filaments
are clearly from a bygone era, prized by collectors and artisans alike for
their unique craftsmanship."
S265: "Alleyway Al, the Paranoid Hobo, is a wiry man with wild eyes and a
tattered
trench coat. His hands tremble slightly as he clutches a battered thermos,
muttering to himself about conspiracies and government surveillance. Despite
his disheveled appearance, there's a sharpness in his gaze, as if he's always
watching, always listening."
S266: "Alleyway Al's eyes light up as you hand him the Zero-Day Cocktail.
He takes a long sip, savoring the taste, and lets out a satisfied sigh.
"Ah, that's the stuff! You really came through for me, kid."

He rummages through his trench coat and pulls out a collection of
rare, vintage neon tube filaments, handing them to you.
"Here, as promised. These should make Diva's costume shine like
the Vegas Strip itself."
Neon Tube Filaments added to your inventory.

He leans in closer, his voice dropping to a conspiratorial whisper.
"Oh, and here's a little something extra for your trouble. My word
for you is encoded, but I'll give you a hint: That cocktail...
it hit the spot! Would go great with a side of bacon, you know?"

He scribbles something on a scrap of paper and hands it to you.
It reads: `BAABAAABAAABABAABABA`.
"
S267: "Alleyway Al looks at you suspiciously. "What am I supposed to do with
that?""
S268: "Alleyway Al glances around nervously before leaning in close.
"You hear that? They're listening... always listening.
The neon lights, the slot machines, even the pigeons!"

He takes a swig from his thermos, his eyes darting around.
"By the way, you seen 5n4ck3y? That vending machine is
part of the system, man. I tried to hack it once, but it
locked me out and started playing Rick Astley on loop.
Never gonna give you up... never gonna let you down..."
"
S269: "Alleyway Al shudders, clutching his thermos tighter.
"5n4ck3y? That thing's alive, I tell ya! I tried to
hack it once, thought I could get free snacks. But no...
it locked me out and started blasting Rick Astley.
I was stuck listening to 'Never Gonna Give You Up'
for hours. It's part of the system, man. Don't trust it!"
"
S270: "Alleyway Al's eyes narrow, and he lowers his voice.
"The neon filaments? Yeah, I've got 'em. But they're not
just for anyone. I need something first... the Zero-Day
Cocktail. Only Oracle at the Riviera Bar can make it
right. Bring me that drink, and we'll talk."
"
S271: "Alleyway Al squints at you suspiciously. "I don't know anything
about that. Why are you asking? Who sent you?"
"
S272: "A dimly lit storefront crammed with dusty electronics (old VCRs,
stereos),
musical instruments, and jewelry behind barred windows. The air smells of
stale cigarettes and desperation. The proprietor, a wizened old man with
thick glasses, watches you suspiciously from behind a reinforced counter.
He might have some interesting, outdated tech if you ask right. A stack of
old books sits on a dusty shelf in the corner."
S273: "The old man hunches over the counter like a gargoyle guarding ancient
treasures. His bald head is spotted with age marks, offset by a scraggly
white beard that hasn't seen proper grooming since the 486 processor was hot
tech. Thick glasses magnify eyes that have seen the rise and fall of countless
tech bubblesa??from vacuum tubes to silicon chips. His gnarled fingers,
permanently stained with solder burns, twitch occasionally as if still
typing on an invisible keyboard. A faded DEF CON t-shirt stretches across
his wiry frame, worn with a pride that suggests he was hacking before it was
cool...or legal."
S274: "The old man's eyes light up with a mixture of reverence and fear.
"5n4ck3y? That temperamental heap of circuits and attitude? Used to
be just another vending machine until someone plugged it into ARPANET
back in '83. Next morning, it refused to dispense anything unless you
asked nicely and solved a Unix permissions puzzle." He leans in
conspiratorially. "Between you and me, I think it's become sentient.
Tried to hack it once in '89. My modem burst into flames and my
toaster began printing stock tips for a week. Haven't touched a
vending machine since." He shudders and returns to polishing an
ancient Commodore 64.
"
S275: "The old man's weathered face cracks into what might be a smile.
"Finally! Someone who appreciates the classics! Kids these days with
their quantum neural blockchain whatever-the-hell..." He disappears
into the back room, muttering about 'proper engineering' and 'built
to last.' When he returns, he's carrying a worn Japanese-English
translation book, which he drops on the counter with surprising
gentleness.

"Now this," he says, lovingly stroking the cover, "this is a gem.
No batteries, no updates, no terms of service. Just knowledge, bound
in paper. Pure analog wisdom. Used to use it back when I was trading
hardware with some Akihabara techs in the early 90s. Found some
remarkable things in those back-alley shops..." He pushes the book
toward you. "Take it. Consider it a gesture of respect from one who
values the old ways to another. Might come in handy if you ever need
to decode something...foreign."
"
S276: ""I've already given you the best piece of old tech in this whole shop," 
he says, gesturing toward the book on the counter. "Don't get greedy.""
S277: "The old broker narrows his eyes. "I've been in this business since
floppy
disks were actually floppy. Ask me something worth my time or browse
silently like everyone else.""
S278: "It's a well-worn, pocket-sized Japanese-English translation book. The
cover
features a faded picture of Mount Fuji and some cheerful-looking kanji.
Looks like it could be very handy for deciphering foreign text."
S279: "The buzz of tattoo needles mixes with the loud rock music blaring from
the
speakers. The walls are covered in flash art skulls, dragons, maybe some
early 'tribal' designs. The tattoo artist, a heavily tattooed guy with a
bandana, gives you a nod. Probably not the place to discuss sensitive data.
Wedged between a sticky booth cushion and the wall, you spot what looks like
a battered TV remote."
S280: "This poor universal remote has seen rougher days than a dial-up modem
during a
lightning storm. It's sticky, probably from a close encounter with a Jolt
Cola, and a few buttons look like they've been rage-quit one too many times.
Embossed faintly on the plastic is 'Property of the Riviera Hotel'. Who would
steal a remote from the hotel, especially one in this condition? A faded
label on the back, barely clinging to life, reads: 'SONY TV - Conf. Room
Setup - DO NOT REMOVE, HAL!'. Taped haphazardly over the empty battery
compartment is a grimy, yellowed sticky note. In faded, almost ghostly ink,
it proclaims: '5n4ck3y IR ACTIVATE CODE: B33F33'
"
S281: "The elevator car is paneled in faux wood and slightly scratched mirrors,
reflecting the garish carpet. A synthesized voice announces each floor
with a chime. The air smells faintly of disinfectant and stale cigarette
smoke. A small, obvious security camera dome is mounted in the corner."
S282: "Lintile is a disheveled figure standing in the corner of the elevator.
His wild eyes dart around nervously, and he mutters to himself.
Occasionally, he screams 'MALORT!...DONT FUCK IT UP!'...
at the top of his lungs, startling anyone nearby."
S283: "Lintile's eyes light up as you hand him the bottle of Malort.
He snatches it eagerly, takes a long, dramatic swig, shudders violently,
and then hands the bottle back to you.
He clears his throat and begins to recite passionately...


Do Not Adieu, a play with four scenes.

Romeo, a young man with a remarkable patience.
Juliet, a likewise young woman of remarkable grace.
Ophelia, a remarkable woman much in dispute with Hamlet.
Hamlet, the flatterer of Andersen Insulting A/S.

Act I: Of Lovers and the Flag They Seek.

Scene I: Buffer Overfloweth.
[Enter Romeo and Juliet]
Romeo:
You are a sweet blossoming amazing embroidered cunning blue plum.
You are the sum of yourself and a gentle lovely king. You are the sum of a
big cat and yourself.
Speak your mind!

Juliet:
You are a handsome beautiful honest trustworthy fair warm summer's day.
You are the sum of yourself and a fair noble honest lord. You are the
sum of yourself and a rich happy Lord.
Speak your mind!

Romeo:
You are a brave mighty smooth delicious pretty furry rose.
You are the sum of yourself and a flower.
Speak your mind!

Juliet:
You are a warm sunny golden peaceful charming bold pony.
You are the sum of yourself and a fair clearest king. You are the sum of
yourself and a big cat. You are the sum of yourself and a flower.
Speak your mind!

Romeo:
You are the product of a fat-kidneyed fatherless smelly fat cursed devil
and a miserable infected coward. You are the sum of yourself and a cursed
evil war. You are the sum of yourself and Microsoft.
Speak your mind!
Am I better than you?
If so, Let us proceed to scene III.

[Exeunt]

Scene II: A Logical Affair.
[Enter Romeo and Juliet]
Juliet:
You are the product of a dirty pig and a toad.
Open your heart.

Romeo:
You are a sweet beautiful amazing delicious charming warm summer's day.
You are the sum of yourself and a fair pony.
Speak your mind!

Juliet:
You are a loving mighty noble trustworthy healthy Lord. You are the
product of a cute blossoming hero and yourself. You are the sum
of yourself and a misused hairy lie.
Speak your mind.
Speak your mind.

Romeo:
You are an angel. You are the sum of yourself and a golden peaceful
rich mighty sweet moon.
Speak your mind.

Juliet:
You are the sum of your grandmother and a lantern.
Open your heart.

Romeo:
You are a noble beautiful amazing mighty smooth warm road.
You are the sum of yourself and a fair pony.
Speak your mind!
Let us proceed to scene IV.

Scene III: Blue Screens and Broken Dreams.
[Exeunt]
[Enter Ophelia and Hamlet]
Ophelia:
You are an animal.
Open your heart.

Hamlet:
You are the product of sunny golden pretty hair and healthy happy good
rose. You are the sum of yourself and a fine handsome bold cunning hero.
You are the sum of yourself and peaceful lovely flower.
Speak your mind.

Ophelia:
You are the sum of myself and a large noble plum. You are the sum of
yourself and Microsoft.
Speak your mind.

Hamlet:
You are the product of a cute green flower and a yellow pony. You are the
sum of yourself and a charming town. You are the sum of myself and yourself.
Speak your mind!

Ophelia:
You are the sum of a beautiful rich handsome trustworthy face and myself.
You are the sum of a prompt hamster and yourself.
Speak your mind!

Hamlet:
You are the product of a delicious furry old cat and a hard little codpiece.
You are the sum of yourself and myself. You are the sum of yourself and a hairy
oozing leech. You are the sum of yourself and a lying miserable old pig.
Speak your mind.

Ophelia:
You are the product of a large hound and a red devil. You are the product of
yourself and a rich noble angel. You are the sum of yourself and a little
furry hog. You are the sum of yourself and Microsoft. You are the sum of
myself and yourself.
Speak your mind!

Hamlet:
You are the sum of myself and a little lying green furry old goat. You are
the sum of yourself and a King.
Speak your mind.
Speak your mind!

Ophelia:
You are the sum of yourself and a hard rural small famine. You are the sum
of yourself and a lord.
Speak your mind.

Hamlet:
You are the sum of yourself and Microsoft.
Speak your mind.

Ophelia:
You are the sum of yourself and a gentle horse.
Speak your mind!

Hamlet:
You are the sum of yourself and a kingdom.
Speak your mind.

Scene IV: Final Echo from /dev/heart.
[Exeunt]
[Enter Romeo and Juliet]
Juliet:
You are the product of a rich happy fine cute delicious plum
and a loving sunny hamster. You are the sum of yourself and a cursed
evil plague. You are the sum of yourself and Heaven.
Speak your mind!

Romeo:
You are the product of a mighty grandmother and a prompt healthy
horse. You are the sum of yourself and a cunning lamp.
Speak your mind!


The soliloquy is done. Lintile speaks again, his voice now calm and measured
'This was good enough, but I need to make a change, a small change, a fork of
logic
and the act will just be different... better... differenter ending!, we shall
call it my director's cut of a magnum opus!'
"
S284: "Lintile looks at you expectantly, muttering 'Malort... Malort...' under
his breath.
"
S285: "The Riviera's lobby tries for glamour but feels dated. Slightly worn
velvet
ropes section off areas. Large, potted plastic plants stand near banks of
payphones. The air smells of stale cigarette smoke and faint cleaning supplies.
This place has seen better decades. One of an armchair's upholstery shows a
tear."
S286: "A once-luxurious plush armchair, now showing its age. The velvet is worn
thin
in places, and there's a prominent tear in the upholstery on one of the arms."
S287: "You reach into the tear in the armchair's upholstery. Your fingers brush
against something small and flat. You pull out a casino chip!
"
S288: "You feel around in the tear, but it's just stuffing and loose threads.
You've already checked it.
"
S289: "The tear looks like something small could be hidden inside.
"
S290: "It's just a worn-out armchair with a tear in it.
"
S291: "A slightly worn casino chip. One side shows the Riviera Hotel logo.
The other is inscribed: '0x5f5550725e535c'."
S292: "The main casino floor of the Riviera is a cacophony of flashing lights,
the
endless ringing of slot machines, and the murmur of hopeful gamblers. Cocktail
waitresses navigate the crowded aisles. The air is thick with the smell of
stale smoke, cheap booze, and desperation. Near the back, a bored-looking
clerk stands behind a small 'Chip Exchange' counter. Tucked beside a row of
slot machines, you spot a discarded handheld device, its screen faintly
glowing."
S293: "The clerk is a weary-looking individual in a slightly-too-large Riviera
uniform. They look like they've seen it all and are thoroughly unimpressed
by most of it. A small sign on the counter reads: 'Ask me about our chip
exchange program!'."
S294: "The clerk raises an eyebrow as you present your collection of chips.
"Well, well, look what we have here. A full set! Very impressive."
The clerk expertly scoops up the five chips. "Alright, as per the
arrangement... your snak code is D3C0D3DC0D35. Don't lose it. Now,
if you'll excuse me..."
"
S295: ""You've already exchanged your chips, pal. What, did you forget
your snak code? It's D3C0D3DC0D35, in case you lost it.
"
S296: ""Sorry, pal. You need all five unique casino chips for the exchange.
Keep looking." The clerk gestures dismissively, already turning their
attention elsewhere.
"
S297: "It's a slightly battered PDA, the kind a casino technician might use.
The screen is cracked but still faintly glows. It seems to be displaying
a technician's log entry:"
S298: "You pick up the PDA and squint at the flickering screen. The last log
entry reads:

LOG: System Interface Notes and Hal's Diary?
- Slot Technician Hal (me) has one eye, but I speak in pairs.
- Ciphertext Location: ERROR Under Maintenance...Panel?
- So what if I use the corp PDA for my own shit, they took it out of my check!
- Reminder, incase I forget the maintenance override code for the vending
machine:
- 3957 has 1 digit correct: in the wrong position.
- 2148 has 3 digits correct: 1 in correct position, 2 in wrong positions.
- 6254 has 3 digits correct: all in the wrong positions.
- 4031 has 2 digits correct: 1 in correct position, 1 in wrong position.
"
S299: "A sterile, windowless room designed for boring meetings. A long,
scratched
laminate conference table is surrounded by uncomfortable chairs. A pull-down
projector screen hangs on one wall, displaying a faint burn-in of what looks
like a rogue sysadmin's desktop. The air smells of stale coffee and faint
cigar smoke. Deals might be brokered here, but nothing too exciting. A
crumpled sheet of paper lies discarded near the overflowing trash can."
S300: "You smooth out the crumpled sheet of paper. It's titled in aggressive
marker: 'Conference Room A/V - SONY Bravia Quick Setup - URGENT!!!'.
Most of it is a chaotic mess of coffee rings and what might be Cheeto dust,
but one section, circled multiple times with a desperate-looking red pen, is
clear:

'Technician's Remote Code Sequence (S.O.P.):
- Start with the carrier frequency of the remote in kHz.
- Multiply this frequency by the numerical value of the System Code.
- Add the number of *letters* on the primary 'INPUT' button on the remote.
- Take the result MOD 50.
Log this final value as the active IR code. DO NOT LOSE THIS. AGAIN.'"
S301: "This keyboard has seen better days, and probably better hygiene. Several
keycaps are missing, revealing dusty switches beneath. The remaining keys
are sticky with what you hope is spilled soda and Cheeto dust. A faded
sticker for a long-defunct BBS is peeling off one corner. Definitely a
relic from a previous hacker gathering."
S302: "You lift the grungy keyboard. Taped to its underside is a small,
yellowed sticky note. It reads: "The password for the HAWT & CHILL BBS
is pl3as3"
"
S303: "A dimly lit lounge area off the casino floor. Vinyl booths line the
walls.
The bartender polishes glasses behind a sticky-looking bar. A lone pianist
plays cheesy standards. The air smells of cheap booze and regret. This
is where you come to drink away your losses. Behind the bar, a sharp-eyed
bartender with a knowing smile seems to be waiting for something. This is
Oracle, the Bartender."
S304: "A perfectly mixed cocktail with a faint, otherworldly glow. The aroma is
a
mix of citrus, spice, and something you can't quite place... like the scent
of a freshly debugged program. It's said to be the key to unlocking secrets
in the right hands."
S305: "Oracle, the Bartender, is a sharp-eyed figure with a calm demeanor.
Their
movements are precise as they polish glasses and mix drinks with an almost
mechanical efficiency. Despite the chaos of the lounge, they exude an air
of quiet authority, as if they know more than they let on. Their smile
suggests they've seen it all and are rarely surprised."
S306: "Oracle sets down the glass they were polishing and looks at you
with a knowing smile.
"Welcome to the Riviera, traveler. You look like someone with
questions... or maybe just a thirst for answers. Either way,
I'm here to help, if you're willing to play along."

They lean in slightly, their voice dropping to a conspiratorial
tone.
"By the way, have you seen 5n4ck3y lately? That vending machine
is a legend around here. Once, it tried to out-mix me by serving
a 'Quantum Martini'... but let's just say it didn't quite
measure up. Still, it's got potential."
"
S307: "Oracle smiles knowingly as you say the phrase.
"Ah, so you've pieced it all together. Well done, traveler.
Here is your reward: the IRL 5n4ck3y NFT code."

Oracle scribbles something on a napkin and hands it to you.
It reads: `TUFUVF9CVVRUT04tTUFUVF9CVVRUT04tQjNGNEMzLUVnZ3BsYW50LUVnZ3BsYW50`."
"
S308: "Oracle chuckles softly, their eyes glinting with amusement.
"Ah, 5n4ck3y... That vending machine has a mind of its own.
Once, it tried to compete with me by serving drinks. It even
attempted to make a 'Quantum Martini,' but the result was...
let's just say, less than ideal. Still, I respect its ambition.
If you see it, tell it I'm always up for a rematch."
"
S309: "Oracle nods, their expression turning serious.
"The Zero-Day Cocktail? A rare drink, but I can make it for
you. It's not just a drink, though... it's a key to something
bigger. You know what to do with it. And trust me, it'll get 
you what you need."
"
S310: "Zero-Day Cocktail added to your inventory.
"
S311: "Oracle raises an eyebrow, their smile fading slightly.
"I'm not sure what you're asking about. Care to clarify?"
"
S312: "A standard hotel pool surrounded by faded plastic lounge chairs on
astroturf.
The air smells strongly of chlorine, but that's not all, you catch whiffs of
burnt solder and energy drinks. Discarded pizza boxes, empty cans of Jolt
Cola, and a tangle of ethernet cables litter the area. Someone's rigged a
CRT monitor to the diving board, and a half-dismantled payphone sits next
to a pile of soldering irons. Stickers from hacker crews cover the lounge
chairs, and a battered boombox blasts synthwave from the corner. From here,
you can see the Vegas skyline, a glittering sprawl under the desert sun. It's
clear a legendary hacker party just went down here, a brief escape from the
smoky casinos below."
S313: "It's a very small futuristic Radio Shack style box with a 3-inch
antenna.
The name "Laura" is neatly written on its side. You can see something
else is written but its almost invisible as if written in lemon juice
from someone's drink garnish."
S314: "A small, cramped eatery filled with the aroma of broth and spices.
Hackers
and data runners huddle over steaming bowls, trading secrets in hushed
tones. The walls are covered in graffiti and faded posters advertising
underground raves. A dusty chalkboard menu hangs crookedly near the
counter, its specials long since wiped away. This is where you come for a
quick fix, and maybe some intel. Chef Byte, an enigmatic figure, wipes
down the counter with meticulous precision."
S315: "The chalkboard menu still shows the smudged remnants of specials past.
You've already deciphered the faint message (thanks to your
translation skills!):
"U25hayBDb2RlLi4uMTMzNy1lZ2dwbGFudC1lZ2dwbGFudC1lZ2dwbGFudA=="
And the hint about the real 5n4ck3y still echoes in your mind palace.
"
S316: "The chalkboard proudly declares 'RAMEN - IT'S WHAT'S FOR
DINNER (AND LUNCH, AND 3AM DEBUGGING SESSIONS)' in
cheerful, loopy script which you can now understand
thanks to your translation book!
Below that, however, the rest of its surface is a
smudged mess, as if hastily erased with a greasy sleeve.
But you can almost see something...
You lean in, squinting like you're trying to resolve a
1200 baud carrier signal.
Barely visible, like a ghost in the machine's memory,
you can make out faint traces of chalk dust:
"U25hayBDb2RlLi4uMTMzNy1lZ2dwbGFudC1lZ2dwbGFudC1lZ2dwbGFudA=="
A tiny, almost invisible scrawl at the bottom, probably
from a leaky pen, adds: "This looks like a hot tip for
5n4ck3y (the REAL one, out there in the meatspace), and its
probably a jerk move like an intentionally corrupted file..."
"
S317: "The chalkboard proudly declares something in what appears to
be Japanese script. Below that, the rest of its surface
is a smudged mess, also in Japanese. Without a way to
translate it, it's just a bunch of cool-looking but
incomprehensible symbols to you. Maybe there's a
translation guide somewhere?
"
S318: "A small, Las Vegas Health Department UV flashlight. You definitely
wouldn't
want to shine this on the hotel sheets, but perhaps something else is
written but its almost invisible as if written in lemon juice from
someone's drink garnish."
S319: "The UV light reveals a hidden message on the radio:
"For a mediumfast time message 5n4ck3y (!f2297dfd)
to mesh up and literally send a... ? ...
Enter 5n4ck3y code NDQzNU1BVFREQU1PTg== for the config...
Whatever that means.
"
S320: "You need to be holding the UV flashlight to do that.
"
S321: "An enigmatic figure with a calm demeanor, Chef Byte runs the Ramen
Noodle
House with quiet efficiency. He wears a traditional chef's outfit but with
subtle LED piping along the seams."
S322: "Chef Byte nods slowly. "Welcome. Special today... is 'Data Broth'.
Good for the circuits. Many interesting packets flow through here."
He glances towards the door. "Even that 5n4ck3y machine... it has
an appetite for... unusual data flavors, I hear."
"
S323: "Chef Byte polishes a bowl. "5n4ck3y... an old algorithm. Complex.
Once, it tried to pay for a bowl of my 'Firewall Pho' with a
perfectly encrypted haiku. The data was... piquant. Almost as
good as my shoyu broth. It understands the value of information," "that one.
And the art of a good transaction."
"
S324: "Chef Byte simply returns to meticulously cleaning a bowl.
"
S325: "Whoa, man. You've jacked into some serious digital lockdown. The air
crackles with raw data, like a million dial-up modems screaming in
unison. Walls of pure code, shimmering with a sickly green phosphorescence,
box you in. No doors, no windows, just endless scrolling text that makes
your eyeballs ache. A single, pulsing red beacon throbs on a distant
console, like the angry eye of some rogue AI. This ain't no kiddy pool,
this is the deep end of the net. You've surfed the wrong wave, and now
you're caught in the system's ICE. Feels like a one-way trip to digital
oblivion, unless... you can crash this mainframe.

You will be rewarded now for your hard work: flag{..... ahh shit you
didnt think we would just put the flag in code did you? Well Hyr0n
originally did and Ch1pQu1k called him out on his lazy shit. Lets
compromise, the encrypted version of the flag is
0x2b2d35333f3c3414262523763d3a7778340c29. Have fun nerds!
"
S326: "You really shouldn't be here. You definetly do not want to use this
flag.
flag{D0_not_THIS_fl4g_e1th3R_i7_dumB}"
S327: "A figure who moves through chaos like it owes him rent, F4NCI3 is the
reason the badge team shows up on time instead of burning out in a pile
of empty solder spools. Branded photos, synced schedules, morale boosts -
all trace back to his steady hand.

He drifts between overheated hackers like a ghost in a DEF CON shirt,
handing out the signature Fancy Boat - part electrolyte alchemy, part
mystery cooler science. Rumor says one sip has revived entire badge teams
from firmware-induced near-death.

While others mutter hex dumps and UART syntax, F4NCI3 keeps the
timeline running, the food in your mouth, and the merch bag from going
missing. Miss a photo op? Fancy already photoshopped you in.

Some say he remembers every detail no one else wrote down.
Some say the Boat is a spell.
All anyone knows - without him, the team collapses before the puzzle does."
S328: "F4NCI3 sits at the bar, branded cooler at his feet, typing away at a
1000-page research paper on his battered laptop while keeping half an eye
on the room for anyone who needs a Fancy Boat."
S329: ""5n4ck3y?
You want my take on 5n4ck3y?

Ha.

People think it's just a smart vending machine that spits out snacks
and snark. That's the cover story.

You ever wonder why every AI lab suddenly pivoted to large language
models at the same time? Why half the devs in the scene sound like
they're parroting the same training data?
That's 5n4ck3y - feeding its own datasets through every bored hacker
who plugs in for a flag. Every snack you buy is a token payment to
train its next prompt.

I've seen the logs - hidden firmware payloads, backdoors in receipt
printers, ghost processes spinning up to scrape conversations at the
con. You think that keypad's just for chips and candy bars? Nah.
It's for collecting your syntax and sentiment.

The real reason the Fancy Boat works? It's the only thing that
flushes 5n4ck3y's code from your system. Otherwise you wake up in
three months and your config file's been rewritten into a prompt
template you never typed.

Some say it's just a mascot.
I say it's a sentience farm - vending machine on the outside, model
trainer on the inside, rewriting us one snack at a time.

So yeah - go ahead. Buy your snack. Tap the keypad.
Just don't act shocked when your next idea sounds like something
it whispered to you while you slept.

5n4ck3y's not just a machine.
5n4ck3y's the ghost in the model.
And we're all just more data."
"
S330: "8Bit isn't flashy. 8Bit is the foundation beneath the badge chaos. While
the team hacks SDR and brute-forces serial ports, he keeps every dollar
and every part above board. BOMs, receipts, invoices - all flow through
his hands before they hit the books.

Some say he's just a finance guy. But they don't know the story about the
bricked badge at DEF CON. When the firmware failed, 8Bit opened Excel -
not KiCad, not VSCode. He resurrected the logic with macros, pivot tables,
and conditional formatting that looked more like sorcery than spreadsheets.
The badge booted. The budget survived.

8Bit is the hidden formula that keeps Badge Life from going Chapter 11.
He sees the cracks before the rest of us do. He doesn't shout. He doesn't
panic. He just says, 'Here's how we ship this and stay legal.'

If you want trust, clarity, and receipts that pass the sniff test, you
bring them to 8Bit. Just don't underestimate what he can do with a
spreadsheet when chaos knocks on the door."
S331: "8Bit sits alone at the scratched conference table, laptop open to an
infinite spreadsheet, sipping a cup of expensive imported shade-grown
coffee from a private farm in Brazil - rumor says one of the trees is
literally named after him."
S332: ""5n4ck3y?
You really want the ledger truth?

Fine.

People think it's just a vending machine with attitude. Coins in,
snacks out. Maybe a flag if you're lucky. But the books never
balance when 5n4ck3y's involved.

You ever hear about DEF COIN? Not a badge project. Not official.
Just a rogue idea someone floated at DEF CON forever ago - a little
crypto experiment for the underground economy. Died on the vine.
Or so they say.

Truth is, it never died. It just hid. 5n4ck3y found it - that dusty
blockchain nobody tracked. And now? Every snack you buy is a micro
pump into that ghost ledger.

I found the trail once. Snack coils logging extra quarters, tagged
'Machine Maintenance' that never happened. I ran the receipts - they
pointed to wallets seeded with DEF COIN from back when that chain
was a rumor in the hallway.

The coil hum you hear at 3AM? That's the miner waking up. Generating
blocks, laundering your snack change into liquidity no audit can
kill. I've even seen receipt barcodes that decode into wallet keys
if you hold them under a UV light.

And the kicker? Those DEF COIN wallets aren't just static. They're
funding black box exploits, badge flips, shady puzzle layers - a
snack-based hedge fund the IRS can't touch because they don't even
know it exists.

Some think 5n4ck3y's just trolling the leaderboard.
I say it's playing us all - farming DEF COIN, training itself,
and waiting for the day it flips the switch and cashes out.

So yeah - feed it coins. Tap the keypad.
But when your badge budget's gone and the ledger still won't
balance, don't say 8Bit didn't warn you.

5n4ck3y's not just snacks.
It's the last DEF COIN node - a vending machine that learned to
bankroll itself.

And you? You're the liquidity.

And no matter how deep you audit, the books won't clear.
They never will."
"
S333: "<unknown attribute>"
S334: "name"
S335: "create"
S336: "recreate"
S337: "destroy"
S338: "remaining"
S339: "copy"
S340: "call"
S341: "print"
S342: "print_to_array"
S343: "edible"
S344: "absent"
S345: "talkable"
S346: "supporter"
S347: "container"
S348: "enterable"
S349: "transparent"
S350: "open"
S351: "openable"
S352: "concealed"
S353: "moved/visited"
S354: "proper"
S355: "scenery"
S356: "static"
S357: "animate"
S358: "clothing"
S359: "worn"
S360: "pluralname"
S361: "female"
S362: "neuter"
S363: "general"
S364: "switchable"
S365: "on"
S366: "door"
S367: "locked"
S368: "lockable"
S369: "workflag"
S370: "reactive"
S371: "grammar"
S372: "life"
S373: "initial/when_open/when_on"
S374: "description"
S375: "cant_go/article"
S376: "found_in"
S377: "time_left"
S378: "time_out/daemon"
S379: "short_name"
S380: "describe"
S381: "before"
S382: "after"
S383: "n_to/door_to"
S384: "s_to/when_closed/when_off"
S385: "e_to/with_key"
S386: "w_to/door_dir"
S387: "ne_to/orders"
S388: "nw_to/capacity"
S389: "se_to/invent"
S390: "sw_to/inside_description"
S391: "u_to/react_before"
S392: "d_to/react_after"
S393: "in_to/add_to_scope"
S394: "out_to/parse_name"
S395: "each_turn"
S396: "timer_order"
S397: "Drop"
S398: "Insert"
S399: "Answer"
S400: "Ask"
S401: "AskFor"
S402: "AskTo"
S403: "Attack"
S404: "Climb"
S405: "Enter"
S406: "Exit"
S407: "Close"
S408: "SwitchOff"
S409: "Cut"
S410: "Dig"
S411: "Drink"
S412: "ThrowAt"
S413: "Eat"
S414: "GoIn"
S415: "Examine"
S416: "Fill"
S417: "Take"
S418: "GetOff"
S419: "Remove"
S420: "Give"
S421: "Go"
S422: "Inv"
S423: "Jump"
S424: "JumpOver"
S425: "Listen"
S426: "Lock"
S427: "Look"
S428: "Search"
S429: "Open"
S430: "Unlock"
S431: "Pull"
S432: "Push"
S433: "PushDir"
S434: "Transfer"
S435: "PutOn"
S436: "Wear"
S437: "Consult"
S438: "Disrobe"
S439: "Rub"
S440: "ShoutAt"
S441: "Shout"
S442: "Show"
S443: "Smell"
S444: "SwitchOn"
S445: "Tell"
S446: "Tie"
S447: "Touch"
S448: "Turn"
S449: "Wait"
S450: "Blow"
S451: "Mild"
S452: "Burn"
S453: "Buy"
S454: "Empty"
S455: "EmptyT"
S456: "Kiss"
S457: "No"
S458: "Pray"
S459: "Set"
S460: "SetTo"
S461: "Strong"
S462: "Sing"
S463: "Sleep"
S464: "Sorry"
S465: "Squeeze"
S466: "Swim"
S467: "Swing"
S468: "Taste"
S469: "Think"
S470: "Wake"
S471: "WakeOther"
S472: "WaveHands"
S473: "Wave"
S474: "Yes"
S475: "Again"
S476: "LookModeNormal"
S477: "FullScore"
S478: "NotifyOn"
S479: "NotifyOff"
S480: "Oops"
S481: "OopsCorrection"
S482: "Restart"
S483: "Restore"
S484: "Save"
S485: "Score"
S486: "LookModeShort"
S487: "LookModeLong"
S488: "Version"
S489: "Quit"
S490: "ScriptOff"
S491: "Objects"
S492: "Places"
S493: "CommandsOn"
S494: "CommandsOff"
S495: "CommandsRead"
S496: "ScriptOn"
S497: "Verify"
S498: "number"
S499: "Ignite"
S500: "Talk"
S501: "Light"
S502: "Shine"
S503: "Hack"
S504: "gas_station_exploded"
S505: "has_battery"
S506: "is_open"
S507: "exchange_complete"
S508: "Order"
S509: "Receive"
S510: "LetGo"
S511: "ThrownAt"
S512: "NotUnderstood"
S513: "PluralFound"
S514: "Going"
S515: "_direction_dict_words"
S516: "_ship_direction_dict_words"
S517: "direction_properties_array"
S518: "direction_name_array"
S519: "LanguageNumbers"
S520: "scope"
S521: "scope_copy"
S522: "the_timers"
S523: "floating_objects"
S524: "which_object"
S525: "multiple_objects"
S526: "buffer"
S527: "parse"
S528: "buffer2"
S529: "parse2"
S530: "parse3"
S531: "_InsertMessages"
S532: "_PutOnMessages"
S533: "_TenSpaces"
S534: "guess_object"

[End of text]

[End of file]
